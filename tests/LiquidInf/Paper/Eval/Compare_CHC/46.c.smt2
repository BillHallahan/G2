(set-info :original "/tmp/sea-Gs9Tse/46.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int ))
(declare-rel main@.lr.ph (Int Int Int ))
(declare-rel main@verifier.error.split ())
(declare-var main@%_3_0 Int )
(declare-var main@%_4_0 Bool )
(declare-var main@%_5_0 Int )
(declare-var main@%_6_0 Int )
(declare-var main@%_7_0 Int )
(declare-var main@%_8_0 Bool )
(declare-var main@%x.1.i.lcssa_1 Int )
(declare-var main@%w.0.i3_2 Int )
(declare-var main@%x.0.i1_2 Int )
(declare-var main@%_0_0 Int )
(declare-var main@%_1_0 Int )
(declare-var main@%_2_0 Bool )
(declare-var @__VERIFIER_nondet_int_0 Int )
(declare-var main@entry_0 Bool )
(declare-var main@.lr.ph.preheader_0 Bool )
(declare-var main@.lr.ph_0 Bool )
(declare-var main@%w.0.i3_0 Int )
(declare-var main@%x.0.i1_0 Int )
(declare-var main@%w.0.i3_1 Int )
(declare-var main@%x.0.i1_1 Int )
(declare-var main@verifier.error_0 Bool )
(declare-var main@%x.0.i.lcssa_0 Bool )
(declare-var main@%x.0.i.lcssa_1 Bool )
(declare-var main@verifier.error.split_0 Bool )
(declare-var main@%x.1.i_0 Int )
(declare-var main@%w.1.i_0 Int )
(declare-var main@.lr.ph_1 Bool )
(declare-var main@verifier.error.loopexit_0 Bool )
(declare-var main@%x.1.i.lcssa_0 Int )
(declare-var main@%phitmp_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (main@entry @__VERIFIER_nondet_int_0))
(rule (=> (and (main@entry @__VERIFIER_nondet_int_0)
         true
         (= main@%_0_0 @__VERIFIER_nondet_int_0)
         (= main@%_2_0 (= main@%_1_0 0))
         (=> main@.lr.ph.preheader_0 (and main@.lr.ph.preheader_0 main@entry_0))
         (=> (and main@.lr.ph.preheader_0 main@entry_0) (not main@%_2_0))
         (=> main@.lr.ph_0 (and main@.lr.ph_0 main@.lr.ph.preheader_0))
         main@.lr.ph_0
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0) (= main@%w.0.i3_0 1))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0) (= main@%x.0.i1_0 0))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0)
             (= main@%w.0.i3_1 main@%w.0.i3_0))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0)
             (= main@%x.0.i1_1 main@%x.0.i1_0)))
    (main@.lr.ph main@%w.0.i3_1 main@%x.0.i1_1 @__VERIFIER_nondet_int_0)))
(rule (=> (and (main@entry @__VERIFIER_nondet_int_0)
         true
         (= main@%_0_0 @__VERIFIER_nondet_int_0)
         (= main@%_2_0 (= main@%_1_0 0))
         (=> main@verifier.error_0 (and main@verifier.error_0 main@entry_0))
         (=> (and main@verifier.error_0 main@entry_0) main@%_2_0)
         (=> (and main@verifier.error_0 main@entry_0)
             (= main@%x.0.i.lcssa_0 true))
         (=> (and main@verifier.error_0 main@entry_0)
             (= main@%x.0.i.lcssa_1 main@%x.0.i.lcssa_0))
         (=> main@verifier.error_0 (not main@%x.0.i.lcssa_1))
         (=> main@verifier.error.split_0
             (and main@verifier.error.split_0 main@verifier.error_0))
         main@verifier.error.split_0)
    main@verifier.error.split))
(rule (=> (and (main@.lr.ph main@%w.0.i3_0 main@%x.0.i1_0 @__VERIFIER_nondet_int_0)
         true
         (= main@%_3_0 (rem main@%w.0.i3_0 2))
         (= main@%_4_0 (= main@%_3_0 1))
         (= main@%_5_0 (ite main@%_4_0 1 0))
         (= main@%x.1.i_0 (+ main@%_5_0 main@%x.0.i1_0))
         (= main@%w.1.i_0 (+ main@%_5_0 main@%w.0.i3_0))
         (= main@%_6_0 @__VERIFIER_nondet_int_0)
         (= main@%_8_0 (= main@%_7_0 0))
         (=> main@.lr.ph_1 (and main@.lr.ph_1 main@.lr.ph_0))
         main@.lr.ph_1
         (=> (and main@.lr.ph_1 main@.lr.ph_0) (not main@%_8_0))
         (=> (and main@.lr.ph_1 main@.lr.ph_0) (= main@%w.0.i3_1 main@%w.1.i_0))
         (=> (and main@.lr.ph_1 main@.lr.ph_0) (= main@%x.0.i1_1 main@%x.1.i_0))
         (=> (and main@.lr.ph_1 main@.lr.ph_0)
             (= main@%w.0.i3_2 main@%w.0.i3_1))
         (=> (and main@.lr.ph_1 main@.lr.ph_0)
             (= main@%x.0.i1_2 main@%x.0.i1_1)))
    (main@.lr.ph main@%w.0.i3_2 main@%x.0.i1_2 @__VERIFIER_nondet_int_0)))
(rule (let ((a!1 (and (main@.lr.ph main@%w.0.i3_0
                             main@%x.0.i1_0
                             @__VERIFIER_nondet_int_0)
                true
                (= main@%_3_0 (rem main@%w.0.i3_0 2))
                (= main@%_4_0 (= main@%_3_0 1))
                (= main@%_5_0 (ite main@%_4_0 1 0))
                (= main@%x.1.i_0 (+ main@%_5_0 main@%x.0.i1_0))
                (= main@%w.1.i_0 (+ main@%_5_0 main@%w.0.i3_0))
                (= main@%_6_0 @__VERIFIER_nondet_int_0)
                (= main@%_8_0 (= main@%_7_0 0))
                (=> main@verifier.error.loopexit_0
                    (and main@verifier.error.loopexit_0 main@.lr.ph_0))
                (=> (and main@verifier.error.loopexit_0 main@.lr.ph_0)
                    main@%_8_0)
                (=> (and main@verifier.error.loopexit_0 main@.lr.ph_0)
                    (= main@%x.1.i.lcssa_0 main@%x.1.i_0))
                (=> (and main@verifier.error.loopexit_0 main@.lr.ph_0)
                    (= main@%x.1.i.lcssa_1 main@%x.1.i.lcssa_0))
                (=> main@verifier.error.loopexit_0
                    (= main@%phitmp_0 (< main@%x.1.i.lcssa_1 2)))
                (=> main@verifier.error_0
                    (and main@verifier.error_0 main@verifier.error.loopexit_0))
                (=> (and main@verifier.error_0 main@verifier.error.loopexit_0)
                    (= main@%x.0.i.lcssa_0 main@%phitmp_0))
                (=> (and main@verifier.error_0 main@verifier.error.loopexit_0)
                    (= main@%x.0.i.lcssa_1 main@%x.0.i.lcssa_0))
                (=> main@verifier.error_0 (not main@%x.0.i.lcssa_1))
                (=> main@verifier.error.split_0
                    (and main@verifier.error.split_0 main@verifier.error_0))
                main@verifier.error.split_0)))
  (=> a!1 main@verifier.error.split)))
(query main@verifier.error.split)

