(set-info :original "/tmp/sea-vhP5cX/22.pp.ms.o.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int ))
(declare-rel main@.lr.ph (Int Int Int Int Int ))
(declare-rel main@verifier.error.split ())
(declare-var main@%_14_0 Bool )
(declare-var main@%_13_0 Bool )
(declare-var main@%_3_0 Int )
(declare-var main@%_4_0 Bool )
(declare-var main@%_5_0 Int )
(declare-var main@%_8_0 Int )
(declare-var main@%_10_0 Int )
(declare-var main@%_11_0 Int )
(declare-var main@%_12_0 Bool )
(declare-var main@%.lcssa13_1 Int )
(declare-var main@%.lcssa_1 Int )
(declare-var main@%k.0.i4_2 Int )
(declare-var main@%x.0.i3_2 Int )
(declare-var main@%y.0.i2_2 Int )
(declare-var main@%z.0.i1_2 Int )
(declare-var main@%_0_0 Int )
(declare-var main@%_1_0 Int )
(declare-var main@%_2_0 Bool )
(declare-var @__VERIFIER_nondet_int_0 Int )
(declare-var main@entry_0 Bool )
(declare-var main@.lr.ph.preheader_0 Bool )
(declare-var main@.lr.ph_0 Bool )
(declare-var main@%k.0.i4_0 Int )
(declare-var main@%x.0.i3_0 Int )
(declare-var main@%y.0.i2_0 Int )
(declare-var main@%z.0.i1_0 Int )
(declare-var main@%k.0.i4_1 Int )
(declare-var main@%x.0.i3_1 Int )
(declare-var main@%y.0.i2_1 Int )
(declare-var main@%z.0.i1_1 Int )
(declare-var main@._crit_edge.thread_0 Bool )
(declare-var main@%z.0.i.lcssa9_0 Int )
(declare-var main@%x.0.i.lcssa8_0 Int )
(declare-var main@%z.0.i.lcssa9_1 Int )
(declare-var main@%x.0.i.lcssa8_1 Int )
(declare-var main@verifier.error_0 Bool )
(declare-var main@verifier.error.split_0 Bool )
(declare-var main@%.x.0.i_0 Int )
(declare-var main@%_6_0 Int )
(declare-var main@%_7_0 Int )
(declare-var main@%_9_0 Int )
(declare-var main@.lr.ph_1 Bool )
(declare-var main@._crit_edge_0 Bool )
(declare-var main@%.lcssa13_0 Int )
(declare-var main@%.lcssa_0 Int )
(declare-var main@%.x.0.i.lcssa_0 Int )
(declare-var main@%.x.0.i.lcssa_1 Int )
(declare-var |tuple(main@._crit_edge_0, main@verifier.error_0)| Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (main@entry @__VERIFIER_nondet_int_0))
(rule (=> (and (main@entry @__VERIFIER_nondet_int_0)
         true
         (= main@%_0_0 @__VERIFIER_nondet_int_0)
         (= main@%_2_0 (= main@%_1_0 0))
         (=> main@.lr.ph.preheader_0 (and main@.lr.ph.preheader_0 main@entry_0))
         (=> (and main@.lr.ph.preheader_0 main@entry_0) (not main@%_2_0))
         (=> main@.lr.ph_0 (and main@.lr.ph_0 main@.lr.ph.preheader_0))
         main@.lr.ph_0
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0) (= main@%k.0.i4_0 0))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0) (= main@%x.0.i3_0 0))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0) (= main@%y.0.i2_0 0))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0) (= main@%z.0.i1_0 0))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0)
             (= main@%k.0.i4_1 main@%k.0.i4_0))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0)
             (= main@%x.0.i3_1 main@%x.0.i3_0))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0)
             (= main@%y.0.i2_1 main@%y.0.i2_0))
         (=> (and main@.lr.ph_0 main@.lr.ph.preheader_0)
             (= main@%z.0.i1_1 main@%z.0.i1_0)))
    (main@.lr.ph main@%k.0.i4_1
                 main@%x.0.i3_1
                 main@%y.0.i2_1
                 main@%z.0.i1_1
                 @__VERIFIER_nondet_int_0)))
(rule (let ((a!1 (and (main@entry @__VERIFIER_nondet_int_0)
                true
                (= main@%_0_0 @__VERIFIER_nondet_int_0)
                (= main@%_2_0 (= main@%_1_0 0))
                (=> main@._crit_edge.thread_0
                    (and main@._crit_edge.thread_0 main@entry_0))
                (=> (and main@._crit_edge.thread_0 main@entry_0) main@%_2_0)
                (=> (and main@._crit_edge.thread_0 main@entry_0)
                    (= main@%z.0.i.lcssa9_0 0))
                (=> (and main@._crit_edge.thread_0 main@entry_0)
                    (= main@%x.0.i.lcssa8_0 0))
                (=> (and main@._crit_edge.thread_0 main@entry_0)
                    (= main@%z.0.i.lcssa9_1 main@%z.0.i.lcssa9_0))
                (=> (and main@._crit_edge.thread_0 main@entry_0)
                    (= main@%x.0.i.lcssa8_1 main@%x.0.i.lcssa8_0))
                (=> main@._crit_edge.thread_0
                    (= main@%_14_0
                       (= main@%x.0.i.lcssa8_1 main@%z.0.i.lcssa9_1)))
                (=> main@._crit_edge.thread_0 (not main@%_14_0))
                (=> main@verifier.error_0
                    (and main@verifier.error_0 main@._crit_edge.thread_0))
                (=> main@verifier.error.split_0
                    (and main@verifier.error.split_0 main@verifier.error_0))
                main@verifier.error.split_0)))
  (=> a!1 main@verifier.error.split)))
(rule (=> (and (main@.lr.ph main@%k.0.i4_0
                      main@%x.0.i3_0
                      main@%y.0.i2_0
                      main@%z.0.i1_0
                      @__VERIFIER_nondet_int_0)
         true
         (= main@%_3_0 (rem main@%k.0.i4_0 3))
         (= main@%_4_0 (= main@%_3_0 0))
         (= main@%_5_0 (ite main@%_4_0 1 0))
         (= main@%.x.0.i_0 (+ main@%_5_0 main@%x.0.i3_0))
         (= main@%_6_0 (+ main@%y.0.i2_0 1))
         (= main@%_7_0 (+ main@%z.0.i1_0 1))
         (= main@%_8_0 (+ main@%_6_0 main@%_7_0))
         (= main@%_9_0 (+ main@%_8_0 main@%.x.0.i_0))
         (= main@%_10_0 @__VERIFIER_nondet_int_0)
         (= main@%_12_0 (= main@%_11_0 0))
         (=> main@.lr.ph_1 (and main@.lr.ph_1 main@.lr.ph_0))
         main@.lr.ph_1
         (=> (and main@.lr.ph_1 main@.lr.ph_0) (not main@%_12_0))
         (=> (and main@.lr.ph_1 main@.lr.ph_0) (= main@%k.0.i4_1 main@%_9_0))
         (=> (and main@.lr.ph_1 main@.lr.ph_0)
             (= main@%x.0.i3_1 main@%.x.0.i_0))
         (=> (and main@.lr.ph_1 main@.lr.ph_0) (= main@%y.0.i2_1 main@%_6_0))
         (=> (and main@.lr.ph_1 main@.lr.ph_0) (= main@%z.0.i1_1 main@%_7_0))
         (=> (and main@.lr.ph_1 main@.lr.ph_0)
             (= main@%k.0.i4_2 main@%k.0.i4_1))
         (=> (and main@.lr.ph_1 main@.lr.ph_0)
             (= main@%x.0.i3_2 main@%x.0.i3_1))
         (=> (and main@.lr.ph_1 main@.lr.ph_0)
             (= main@%y.0.i2_2 main@%y.0.i2_1))
         (=> (and main@.lr.ph_1 main@.lr.ph_0)
             (= main@%z.0.i1_2 main@%z.0.i1_1)))
    (main@.lr.ph main@%k.0.i4_2
                 main@%x.0.i3_2
                 main@%y.0.i2_2
                 main@%z.0.i1_2
                 @__VERIFIER_nondet_int_0)))
(rule (let ((a!1 (and (main@.lr.ph main@%k.0.i4_0
                             main@%x.0.i3_0
                             main@%y.0.i2_0
                             main@%z.0.i1_0
                             @__VERIFIER_nondet_int_0)
                true
                (= main@%_3_0 (rem main@%k.0.i4_0 3))
                (= main@%_4_0 (= main@%_3_0 0))
                (= main@%_5_0 (ite main@%_4_0 1 0))
                (= main@%.x.0.i_0 (+ main@%_5_0 main@%x.0.i3_0))
                (= main@%_6_0 (+ main@%y.0.i2_0 1))
                (= main@%_7_0 (+ main@%z.0.i1_0 1))
                (= main@%_8_0 (+ main@%_6_0 main@%_7_0))
                (= main@%_9_0 (+ main@%_8_0 main@%.x.0.i_0))
                (= main@%_10_0 @__VERIFIER_nondet_int_0)
                (= main@%_12_0 (= main@%_11_0 0))
                (=> main@._crit_edge_0 (and main@._crit_edge_0 main@.lr.ph_0))
                (=> (and main@._crit_edge_0 main@.lr.ph_0) main@%_12_0)
                (=> (and main@._crit_edge_0 main@.lr.ph_0)
                    (= main@%.lcssa13_0 main@%_7_0))
                (=> (and main@._crit_edge_0 main@.lr.ph_0)
                    (= main@%.lcssa_0 main@%_6_0))
                (=> (and main@._crit_edge_0 main@.lr.ph_0)
                    (= main@%.x.0.i.lcssa_0 main@%.x.0.i_0))
                (=> (and main@._crit_edge_0 main@.lr.ph_0)
                    (= main@%.lcssa13_1 main@%.lcssa13_0))
                (=> (and main@._crit_edge_0 main@.lr.ph_0)
                    (= main@%.lcssa_1 main@%.lcssa_0))
                (=> (and main@._crit_edge_0 main@.lr.ph_0)
                    (= main@%.x.0.i.lcssa_1 main@%.x.0.i.lcssa_0))
                (=> main@._crit_edge_0
                    (= main@%_13_0 (= main@%.x.0.i.lcssa_1 main@%.lcssa_1)))
                (=> main@._crit_edge.thread_0
                    (and main@._crit_edge.thread_0 main@._crit_edge_0))
                (=> (and main@._crit_edge.thread_0 main@._crit_edge_0)
                    main@%_13_0)
                (=> (and main@._crit_edge.thread_0 main@._crit_edge_0)
                    (= main@%z.0.i.lcssa9_0 main@%.lcssa13_1))
                (=> (and main@._crit_edge.thread_0 main@._crit_edge_0)
                    (= main@%x.0.i.lcssa8_0 main@%.x.0.i.lcssa_1))
                (=> (and main@._crit_edge.thread_0 main@._crit_edge_0)
                    (= main@%z.0.i.lcssa9_1 main@%z.0.i.lcssa9_0))
                (=> (and main@._crit_edge.thread_0 main@._crit_edge_0)
                    (= main@%x.0.i.lcssa8_1 main@%x.0.i.lcssa8_0))
                (=> main@._crit_edge.thread_0
                    (= main@%_14_0
                       (= main@%x.0.i.lcssa8_1 main@%z.0.i.lcssa9_1)))
                (=> main@._crit_edge.thread_0 (not main@%_14_0))
                (=> |tuple(main@._crit_edge_0, main@verifier.error_0)|
                    main@._crit_edge_0)
                (=> main@verifier.error_0
                    (or (and main@._crit_edge_0
                             |tuple(main@._crit_edge_0, main@verifier.error_0)|)
                        (and main@verifier.error_0 main@._crit_edge.thread_0)))
                (=> (and main@._crit_edge_0
                         |tuple(main@._crit_edge_0, main@verifier.error_0)|)
                    (not main@%_13_0))
                (=> main@verifier.error.split_0
                    (and main@verifier.error.split_0 main@verifier.error_0))
                main@verifier.error.split_0)))
  (=> a!1 main@verifier.error.split)))
(query main@verifier.error.split)

