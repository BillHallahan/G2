module G2.Liquid.Inference.Initalization ( initStateAndConfig
                                         , createStateForInference
                                         , getGHCI ) where

import G2.Config.Config as G2
import qualified G2.Initialization.Types as IT
import G2.Interface hiding (violated)
import G2.Language
import qualified G2.Language.ExprEnv as E
import G2.Translation

import G2.Liquid.AddTyVars
import G2.Liquid.ConvertCurrExpr
import G2.Liquid.Interface
import G2.Liquid.Types
import G2.Liquid.Inference.Config
import G2.Liquid.Inference.Verify

import Language.Haskell.Liquid.Types as LH
import qualified Language.Fixpoint.Types.Config as FP

import qualified Data.Text as T

initStateAndConfig :: ExtractedG2 -> Maybe T.Text -> G2.Config -> InferenceConfig -> [GhcInfo]
                   -> (LiquidReadyState, G2.Config, InferenceConfig)
initStateAndConfig exg2 main_mod g2config infconfig ghci = 
    let
        simp_s = initSimpleState exg2
        (g2config', infconfig') = adjustConfig main_mod simp_s g2config infconfig ghci

        lrs = createStateForInference simp_s g2config' ghci

        lh_s = lr_state lrs
        g2config'' = adjustConfigPostLH main_mod (measures lh_s) (tcvalues lh_s) (state lh_s) ghci g2config'
    in
    (lrs, g2config'', infconfig')

createStateForInference :: SimpleState -> G2.Config -> [GhcInfo] -> LiquidReadyState
createStateForInference simp_s config ghci =
    let
        (simp_s', ph_tyvars) = if add_tyvars config
                                then fmap Just $ addTyVarsEEnvTEnv simp_s
                                else (simp_s, Nothing)
        (s, b) = initStateFromSimpleState simp_s' True 
                    (\_ ng _ _ _ _ _ -> (Prim Undefined TyBottom, [], [], ng))
                    (E.higherOrderExprs . IT.expr_env)
                    config
    in
    createLiquidReadyState s b ghci ph_tyvars config

getGHCI :: InferenceConfig -> G2.Config -> [FilePath] -> [FilePath] -> [FilePath] -> IO ([GhcInfo], LH.Config)
getGHCI infconfig config proj fp lhlibs = do
    lhconfig <- defLHConfig proj lhlibs
    let lhconfig' = lhconfig { pruneUnsorted = True
                             -- Block qualifiers being auto-generated by LH
                             , maxParams = if keep_quals infconfig then maxParams lhconfig else 0
                             , eliminate = if keep_quals infconfig then eliminate lhconfig else FP.All
                             , higherorderqs = False
                             , scrapeImports = False
                             , scrapeInternals = False
                             , scrapeUsedImports = False }
    ghci <- ghcInfos Nothing lhconfig' fp
    return (ghci, lhconfig)
