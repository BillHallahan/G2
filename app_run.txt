['bernouilli', 'digits-of-e1', 'digits-of-e2', 'exp3_8', 'gen_regexps', 'integrate', 'paraffins', 'primes', 'queens', 'rfib', 'tak', 'wheel-sieve1', 'wheel-sieve2', 'x2n1']
bernouilli
Baseline:
hpc_exp = [('Bernouilli', '12', '11', '85', '2', '6'), ('CallForHPC', '58', '14', '24', '0', '0')]
calculate hpc converage
[('Bernouilli', 12, 11, 85, '2', '6'), ('CallForHPC', 58, 14, 24, '0', '0')]
[('Bernouilli', 12, 11, 85, '2', '6')]
[('2', '6')]
Last time is: 0.323432033
hpc reached = 12.9
g2 reached = 15
total = 96
% reached = 15.6
last time = 0.323432033
all_times = ['(95,"Bernouilli") - 0.229949849', '(93,"Bernouilli") - 0.229949849', '(89,"Bernouilli") - 0.229949849', '(91,"Bernouilli") - 0.229949849', '(94,"Bernouilli") - 0.229949849', '(90,"Bernouilli") - 0.229949849', '(43,"Bernouilli") - 0.229949849', '(48,"Bernouilli") - 0.293429583', '(52,"Bernouilli") - 0.293429583', '(49,"Bernouilli") - 0.293429583', '(51,"Bernouilli") - 0.293429583', '(44,"Bernouilli") - 0.323432033', '(46,"Bernouilli") - 0.323432033', '(45,"Bernouilli") - 0.323432033', '(47,"Bernouilli") - 0.323432033']
Red Rules #: 23437
SMT Solving time: 0.252334389
Gen Solving time: 0.255040019
SMT Solver calls: 67
General Solver calls: 77
# nrpcs = []
# post call args = 3
# func args = 0
# timeouts = 0
# branches = 8
NRPC:
hpc_exp = [('Bernouilli', '80', '68', '85', '2', '6'), ('CallForHPC', '83', '62', '74', '0', '4')]
calculate hpc converage
[('Bernouilli', 80, 68, 85, '2', '6'), ('CallForHPC', 83, 62, 74, '0', '4')]
[('Bernouilli', 80, 68, 85, '2', '6')]
[('2', '6')]
Last time is: 0.716570762
hpc reached = 80.0
g2 reached = 76
total = 96
% reached = 79.2
last time = 0.716570762
all_times = ['(95,"Bernouilli") - 0.234095539', '(93,"Bernouilli") - 0.234095539', '(89,"Bernouilli") - 0.234095539', '(91,"Bernouilli") - 0.234095539', '(94,"Bernouilli") - 0.234095539', '(90,"Bernouilli") - 0.234095539', '(43,"Bernouilli") - 0.234095539', '(48,"Bernouilli") - 0.306888181', '(52,"Bernouilli") - 0.306888181', '(49,"Bernouilli") - 0.306888181', '(51,"Bernouilli") - 0.306888181', '(44,"Bernouilli") - 0.340373878', '(46,"Bernouilli") - 0.340373878', '(45,"Bernouilli") - 0.340373878', '(47,"Bernouilli") - 0.340373878', '(41,"Bernouilli") - 0.704610467', '(87,"Bernouilli") - 0.704610467', '(79,"Bernouilli") - 0.704610467', '(18,"Bernouilli") - 0.704610467', '(64,"Bernouilli") - 0.704610467', '(80,"Bernouilli") - 0.704610467', '(61,"Bernouilli") - 0.704610467', '(88,"Bernouilli") - 0.704610467', '(59,"Bernouilli") - 0.704610467', '(3,"Bernouilli") - 0.704610467', '(67,"Bernouilli") - 0.704610467', '(21,"Bernouilli") - 0.704610467', '(92,"Bernouilli") - 0.704610467', '(40,"Bernouilli") - 0.704610467', '(24,"Bernouilli") - 0.704610467', '(76,"Bernouilli") - 0.704610467', '(60,"Bernouilli") - 0.704610467', '(38,"Bernouilli") - 0.704610467', '(22,"Bernouilli") - 0.704610467', '(63,"Bernouilli") - 0.704610467', '(42,"Bernouilli") - 0.704610467', '(73,"Bernouilli") - 0.704610467', '(86,"Bernouilli") - 0.704610467', '(16,"Bernouilli") - 0.704610467', '(55,"Bernouilli") - 0.704610467', '(84,"Bernouilli") - 0.704610467', '(25,"Bernouilli") - 0.704610467', '(26,"Bernouilli") - 0.704610467', '(70,"Bernouilli") - 0.704610467', '(56,"Bernouilli") - 0.704610467', '(50,"Bernouilli") - 0.704610467', '(68,"Bernouilli") - 0.704610467', '(72,"Bernouilli") - 0.704610467', '(27,"Bernouilli") - 0.704610467', '(85,"Bernouilli") - 0.704610467', '(74,"Bernouilli") - 0.704610467', '(53,"Bernouilli") - 0.704610467', '(71,"Bernouilli") - 0.704610467', '(81,"Bernouilli") - 0.704610467', '(83,"Bernouilli") - 0.704610467', '(75,"Bernouilli") - 0.704610467', '(69,"Bernouilli") - 0.704610467', '(65,"Bernouilli") - 0.704610467', '(39,"Bernouilli") - 0.704610467', '(17,"Bernouilli") - 0.704610467', '(54,"Bernouilli") - 0.704610467', '(82,"Bernouilli") - 0.704610467', '(58,"Bernouilli") - 0.704610467', '(19,"Bernouilli") - 0.704610467', '(62,"Bernouilli") - 0.704610467', '(23,"Bernouilli") - 0.704610467', '(66,"Bernouilli") - 0.704610467', '(57,"Bernouilli") - 0.704610467', '(20,"Bernouilli") - 0.716089005', '(37,"Bernouilli") - 0.716089005', '(31,"Bernouilli") - 0.716089005', '(35,"Bernouilli") - 0.716089005', '(34,"Bernouilli") - 0.716089005', '(30,"Bernouilli") - 0.716089005', '(28,"Bernouilli") - 0.716089005', '(2,"Bernouilli") - 0.716570762']
Red Rules #: 21352
SMT Solving time: 0.252767638
Gen Solving time: 0.254212239
SMT Solver calls: 59
General Solver calls: 66
# nrpcs = [0, 0, 0, 0, 1, 0, 1]
# post call args = 3
# func args = 4
# timeouts = 0
# branches = 8


Graph latex for: bernouilli: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(bernouilli)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.23, 7) (0.29, 4) (0.32, 4)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.23, 7) (0.31, 4) (0.34, 4) (0.7, 53) (0.72, 8)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


digits-of-e1
Baseline:
hpc_exp = [('CallForHPC', '88', '182', '205', '0', '48'), ('Main2', '75', '82', '109', '1', '4')]
calculate hpc converage
[('CallForHPC', 88, 182, 205, '0', '48'), ('Main2', 75, 82, 109, '1', '4')]
[('Main2', 75, 82, 109, '1', '4')]
[('1', '4')]
Last time is: 0.387108350
hpc reached = 75.2
g2 reached = 91
total = 118
% reached = 77.1
last time = 0.387108350
all_times = ['(92,"Main2") - 0.168920856', '(117,"Main2") - 0.168920856', '(116,"Main2") - 0.168920856', '(115,"Main2") - 0.168920856', '(112,"Main2") - 0.168920856', '(113,"Main2") - 0.168920856', '(110,"Main2") - 0.168920856', '(76,"Main2") - 0.168920856', '(90,"Main2") - 0.185865273', '(111,"Main2") - 0.185865273', '(108,"Main2") - 0.185865273', '(77,"Main2") - 0.185865273', '(107,"Main2") - 0.185865273', '(79,"Main2") - 0.185865273', '(91,"Main2") - 0.185865273', '(104,"Main2") - 0.185865273', '(81,"Main2") - 0.185865273', '(80,"Main2") - 0.185865273', '(74,"Main2") - 0.387108350', '(2,"Main2") - 0.387108350', '(68,"Main2") - 0.387108350', '(3,"Main2") - 0.387108350', '(30,"Main2") - 0.387108350', '(109,"Main2") - 0.387108350', '(87,"Main2") - 0.387108350', '(25,"Main2") - 0.387108350', '(103,"Main2") - 0.387108350', '(17,"Main2") - 0.387108350', '(5,"Main2") - 0.387108350', '(22,"Main2") - 0.387108350', '(86,"Main2") - 0.387108350', '(59,"Main2") - 0.387108350', '(85,"Main2") - 0.387108350', '(31,"Main2") - 0.387108350', '(14,"Main2") - 0.387108350', '(66,"Main2") - 0.387108350', '(20,"Main2") - 0.387108350', '(69,"Main2") - 0.387108350', '(13,"Main2") - 0.387108350', '(9,"Main2") - 0.387108350', '(19,"Main2") - 0.387108350', '(27,"Main2") - 0.387108350', '(1,"Main2") - 0.387108350', '(89,"Main2") - 0.387108350', '(60,"Main2") - 0.387108350', '(4,"Main2") - 0.387108350', '(84,"Main2") - 0.387108350', '(34,"Main2") - 0.387108350', '(38,"Main2") - 0.387108350', '(65,"Main2") - 0.387108350', '(58,"Main2") - 0.387108350', '(26,"Main2") - 0.387108350', '(75,"Main2") - 0.387108350', '(28,"Main2") - 0.387108350', '(67,"Main2") - 0.387108350', '(15,"Main2") - 0.387108350', '(36,"Main2") - 0.387108350', '(12,"Main2") - 0.387108350', '(39,"Main2") - 0.387108350', '(72,"Main2") - 0.387108350', '(10,"Main2") - 0.387108350', '(106,"Main2") - 0.387108350', '(24,"Main2") - 0.387108350', '(32,"Main2") - 0.387108350', '(6,"Main2") - 0.387108350', '(71,"Main2") - 0.387108350', '(37,"Main2") - 0.387108350', '(63,"Main2") - 0.387108350', '(114,"Main2") - 0.387108350', '(82,"Main2") - 0.387108350', '(40,"Main2") - 0.387108350', '(83,"Main2") - 0.387108350', '(64,"Main2") - 0.387108350', '(23,"Main2") - 0.387108350', '(88,"Main2") - 0.387108350', '(21,"Main2") - 0.387108350', '(61,"Main2") - 0.387108350', '(29,"Main2") - 0.387108350', '(8,"Main2") - 0.387108350', '(18,"Main2") - 0.387108350', '(93,"Main2") - 0.387108350', '(62,"Main2") - 0.387108350', '(70,"Main2") - 0.387108350', '(41,"Main2") - 0.387108350', '(16,"Main2") - 0.387108350', '(35,"Main2") - 0.387108350', '(33,"Main2") - 0.387108350', '(0,"Main2") - 0.387108350', '(7,"Main2") - 0.387108350', '(11,"Main2") - 0.387108350', '(102,"Main2") - 0.387108350']
Red Rules #: 36057
SMT Solving time: 0.063732447
Gen Solving time: 0.064967955
SMT Solver calls: 26
General Solver calls: 86
# nrpcs = []
# post call args = 7
# func args = 0
# timeouts = 0
# branches = 5
NRPC:
hpc_exp = [('CallForHPC', '70', '17', '24', '0', '0'), ('Main2', '69', '76', '109', '1', '4')]
calculate hpc converage
[('CallForHPC', 70, 17, 24, '0', '0'), ('Main2', 69, 76, 109, '1', '4')]
[('Main2', 69, 76, 109, '1', '4')]
[('1', '4')]
Last time is: 0.965192434
hpc reached = 69.7
g2 reached = 98
total = 118
% reached = 83.1
last time = 0.965192434
all_times = ['(92,"Main2") - 0.172173913', '(117,"Main2") - 0.172173913', '(116,"Main2") - 0.172173913', '(115,"Main2") - 0.172173913', '(112,"Main2") - 0.172173913', '(113,"Main2") - 0.172173913', '(110,"Main2") - 0.172173913', '(76,"Main2") - 0.172173913', '(90,"Main2") - 0.190258912', '(111,"Main2") - 0.190258912', '(108,"Main2") - 0.190258912', '(77,"Main2") - 0.190258912', '(107,"Main2") - 0.190258912', '(79,"Main2") - 0.190258912', '(91,"Main2") - 0.190258912', '(104,"Main2") - 0.190258912', '(81,"Main2") - 0.190258912', '(80,"Main2") - 0.190258912', '(109,"Main2") - 0.226588888', '(87,"Main2") - 0.226588888', '(5,"Main2") - 0.226588888', '(22,"Main2") - 0.226588888', '(86,"Main2") - 0.226588888', '(85,"Main2") - 0.226588888', '(14,"Main2") - 0.226588888', '(13,"Main2") - 0.226588888', '(9,"Main2") - 0.226588888', '(19,"Main2") - 0.226588888', '(89,"Main2") - 0.226588888', '(4,"Main2") - 0.226588888', '(75,"Main2") - 0.226588888', '(12,"Main2") - 0.226588888', '(10,"Main2") - 0.226588888', '(6,"Main2") - 0.226588888', '(37,"Main2") - 0.226588888', '(114,"Main2") - 0.226588888', '(82,"Main2") - 0.226588888', '(40,"Main2") - 0.226588888', '(23,"Main2") - 0.226588888', '(8,"Main2") - 0.226588888', '(7,"Main2") - 0.226588888', '(11,"Main2") - 0.226588888', '(17,"Main2") - 0.232787488', '(20,"Main2") - 0.232787488', '(15,"Main2") - 0.232787488', '(83,"Main2") - 0.232787488', '(16,"Main2") - 0.232787488', '(2,"Main2") - 0.280719286', '(3,"Main2") - 0.280719286', '(1,"Main2") - 0.280719286', '(84,"Main2") - 0.280719286', '(18,"Main2") - 0.280719286', '(0,"Main2") - 0.280719286', '(74,"Main2") - 0.290289088', '(68,"Main2") - 0.290289088', '(30,"Main2") - 0.290289088', '(25,"Main2") - 0.290289088', '(103,"Main2") - 0.290289088', '(59,"Main2") - 0.290289088', '(31,"Main2") - 0.290289088', '(66,"Main2") - 0.290289088', '(69,"Main2") - 0.290289088', '(27,"Main2") - 0.290289088', '(34,"Main2") - 0.290289088', '(26,"Main2") - 0.290289088', '(28,"Main2") - 0.290289088', '(67,"Main2") - 0.290289088', '(36,"Main2") - 0.290289088', '(39,"Main2") - 0.290289088', '(72,"Main2") - 0.290289088', '(106,"Main2") - 0.290289088', '(24,"Main2") - 0.290289088', '(32,"Main2") - 0.290289088', '(71,"Main2") - 0.290289088', '(88,"Main2") - 0.290289088', '(29,"Main2") - 0.290289088', '(93,"Main2") - 0.290289088', '(70,"Main2") - 0.290289088', '(35,"Main2") - 0.290289088', '(33,"Main2") - 0.290289088', '(102,"Main2") - 0.290289088', '(60,"Main2") - 0.329542124', '(65,"Main2") - 0.369829052', '(63,"Main2") - 0.369829052', '(64,"Main2") - 0.369829052', '(21,"Main2") - 0.369829052', '(61,"Main2") - 0.369829052', '(62,"Main2") - 0.369829052', '(73,"Main2") - 0.428066038', '(101,"Main2") - 0.428066038', '(105,"Main2") - 0.428066038', '(94,"Main2") - 0.428066038', '(38,"Main2") - 0.554106643', '(58,"Main2") - 0.554106643', '(41,"Main2") - 0.554106643', '(78,"Main2") - 0.842472994', '(100,"Main2") - 0.965192434', '(95,"Main2") - 0.965192434']
Red Rules #: 28994
SMT Solving time: 0.10008789
Gen Solving time: 0.102789553
SMT Solver calls: 43
General Solver calls: 226
# nrpcs = [0, 0, 1, 3, 0, 0, 1, 1, 1, 3, 2, 2, 7, 4, 9, 13, 5, 4, 4, 14]
# post call args = 4
# func args = 16
# timeouts = 16
# branches = 5


Graph latex for: digits-of-e1: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(digits-of-e1)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.17, 8) (0.19, 10) (0.39, 73)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.17, 8) (0.19, 10) (0.23, 29) (0.28, 6) (0.29, 28) (0.33, 1) (0.37, 6) (0.43, 4) (0.55, 3) (0.84, 1) (0.97, 2)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


digits-of-e2
Baseline:
hpc_exp = [('CallForHPC', '95', '283', '295', '0', '84'), ('Main2', '98', '77', '78', '2', '2')]
calculate hpc converage
[('CallForHPC', 95, 283, 295, '0', '84'), ('Main2', 98, 77, 78, '2', '2')]
[('Main2', 98, 77, 78, '2', '2')]
[('2', '2')]
Last time is: 0.924918755
hpc reached = 98.7
g2 reached = 87
total = 87
% reached = 100.0
last time = 0.924918755
all_times = ['(48,"Main2") - 0.187050760', '(87,"Main2") - 0.187050760', '(86,"Main2") - 0.187050760', '(85,"Main2") - 0.187050760', '(50,"Main2") - 0.187050760', '(49,"Main2") - 0.187050760', '(47,"Main2") - 0.187050760', '(82,"Main2") - 0.187050760', '(83,"Main2") - 0.187050760', '(81,"Main2") - 0.187050760', '(68,"Main2") - 0.236597374', '(56,"Main2") - 0.236597374', '(55,"Main2") - 0.236597374', '(69,"Main2") - 0.236597374', '(53,"Main2") - 0.236597374', '(52,"Main2") - 0.236597374', '(54,"Main2") - 0.236597374', '(57,"Main2") - 0.236597374', '(77,"Main2") - 0.236597374', '(67,"Main2") - 0.236597374', '(78,"Main2") - 0.236597374', '(79,"Main2") - 0.236597374', '(51,"Main2") - 0.236597374', '(71,"Main2") - 0.236597374', '(70,"Main2") - 0.236597374', '(80,"Main2") - 0.236597374', '(66,"Main2") - 0.292631678', '(46,"Main2") - 0.292631678', '(60,"Main2") - 0.292631678', '(65,"Main2") - 0.292631678', '(72,"Main2") - 0.292631678', '(63,"Main2") - 0.292631678', '(76,"Main2") - 0.292631678', '(64,"Main2") - 0.292631678', '(73,"Main2") - 0.322406934', '(74,"Main2") - 0.322406934', '(17,"Main2") - 0.322406934', '(22,"Main2") - 0.322406934', '(59,"Main2") - 0.322406934', '(14,"Main2") - 0.322406934', '(20,"Main2") - 0.322406934', '(19,"Main2") - 0.322406934', '(27,"Main2") - 0.322406934', '(84,"Main2") - 0.322406934', '(58,"Main2") - 0.322406934', '(26,"Main2") - 0.322406934', '(75,"Main2") - 0.322406934', '(15,"Main2") - 0.322406934', '(24,"Main2") - 0.322406934', '(23,"Main2") - 0.322406934', '(21,"Main2") - 0.322406934', '(61,"Main2") - 0.322406934', '(18,"Main2") - 0.322406934', '(62,"Main2") - 0.322406934', '(16,"Main2") - 0.322406934', '(33,"Main2") - 0.322406934', '(25,"Main2") - 0.362380522', '(5,"Main2") - 0.362380522', '(9,"Main2") - 0.362380522', '(4,"Main2") - 0.362380522', '(34,"Main2") - 0.362380522', '(38,"Main2") - 0.362380522', '(36,"Main2") - 0.362380522', '(39,"Main2") - 0.362380522', '(6,"Main2") - 0.362380522', '(37,"Main2") - 0.362380522', '(45,"Main2") - 0.362380522', '(8,"Main2") - 0.362380522', '(7,"Main2") - 0.362380522', '(2,"Main2") - 0.435299177', '(3,"Main2") - 0.435299177', '(1,"Main2") - 0.435299177', '(0,"Main2") - 0.435299177', '(30,"Main2") - 0.477912332', '(13,"Main2") - 0.477912332', '(28,"Main2") - 0.477912332', '(12,"Main2") - 0.477912332', '(10,"Main2") - 0.477912332', '(32,"Main2") - 0.477912332', '(29,"Main2") - 0.477912332', '(11,"Main2") - 0.477912332', '(44,"Main2") - 0.617605110', '(42,"Main2") - 0.617605110', '(40,"Main2") - 0.617605110', '(41,"Main2") - 0.617605110', '(43,"Main2") - 0.617605110', '(31,"Main2") - 0.924918755']
Red Rules #: 24811
SMT Solving time: 0.179369391
Gen Solving time: 0.181175416
SMT Solver calls: 78
General Solver calls: 101
# nrpcs = []
# post call args = 21
# func args = 0
# timeouts = 0
# branches = 4
NRPC:
hpc_exp = [('CallForHPC', '95', '143', '149', '0', '20'), ('Main2', '92', '72', '78', '2', '2')]
calculate hpc converage
[('CallForHPC', 95, 143, 149, '0', '20'), ('Main2', 92, 72, 78, '2', '2')]
[('Main2', 92, 72, 78, '2', '2')]
[('2', '2')]
Last time is: 0.951870696
hpc reached = 92.3
g2 reached = 81
total = 87
% reached = 93.1
last time = 0.951870696
all_times = ['(48,"Main2") - 0.192226846', '(87,"Main2") - 0.192226846', '(86,"Main2") - 0.192226846', '(85,"Main2") - 0.192226846', '(50,"Main2") - 0.192226846', '(49,"Main2") - 0.192226846', '(47,"Main2") - 0.192226846', '(82,"Main2") - 0.192226846', '(83,"Main2") - 0.192226846', '(81,"Main2") - 0.192226846', '(68,"Main2") - 0.242903241', '(56,"Main2") - 0.242903241', '(55,"Main2") - 0.242903241', '(69,"Main2") - 0.242903241', '(53,"Main2") - 0.242903241', '(52,"Main2") - 0.242903241', '(54,"Main2") - 0.242903241', '(57,"Main2") - 0.242903241', '(77,"Main2") - 0.242903241', '(67,"Main2") - 0.242903241', '(78,"Main2") - 0.242903241', '(79,"Main2") - 0.242903241', '(51,"Main2") - 0.242903241', '(71,"Main2") - 0.242903241', '(70,"Main2") - 0.242903241', '(80,"Main2") - 0.242903241', '(73,"Main2") - 0.272704468', '(74,"Main2") - 0.272704468', '(66,"Main2") - 0.272704468', '(46,"Main2") - 0.272704468', '(19,"Main2") - 0.272704468', '(60,"Main2") - 0.272704468', '(84,"Main2") - 0.272704468', '(65,"Main2") - 0.272704468', '(58,"Main2") - 0.272704468', '(26,"Main2") - 0.272704468', '(75,"Main2") - 0.272704468', '(72,"Main2") - 0.272704468', '(63,"Main2") - 0.272704468', '(76,"Main2") - 0.272704468', '(64,"Main2") - 0.272704468', '(23,"Main2") - 0.272704468', '(17,"Main2") - 0.291516568', '(59,"Main2") - 0.291516568', '(14,"Main2") - 0.291516568', '(15,"Main2") - 0.291516568', '(61,"Main2") - 0.291516568', '(18,"Main2") - 0.291516568', '(62,"Main2") - 0.291516568', '(16,"Main2") - 0.291516568', '(22,"Main2") - 0.315841476', '(20,"Main2") - 0.315841476', '(21,"Main2") - 0.315841476', '(27,"Main2") - 0.443427860', '(24,"Main2") - 0.443427860', '(32,"Main2") - 0.443427860', '(33,"Main2") - 0.443427860', '(25,"Main2") - 0.499520333', '(5,"Main2") - 0.499520333', '(9,"Main2") - 0.499520333', '(4,"Main2") - 0.499520333', '(34,"Main2") - 0.499520333', '(38,"Main2") - 0.499520333', '(36,"Main2") - 0.499520333', '(39,"Main2") - 0.499520333', '(6,"Main2") - 0.499520333', '(37,"Main2") - 0.499520333', '(45,"Main2") - 0.499520333', '(8,"Main2") - 0.499520333', '(7,"Main2") - 0.499520333', '(2,"Main2") - 0.584689689', '(3,"Main2") - 0.584689689', '(1,"Main2") - 0.584689689', '(0,"Main2") - 0.584689689', '(30,"Main2") - 0.951870696', '(13,"Main2") - 0.951870696', '(28,"Main2") - 0.951870696', '(12,"Main2") - 0.951870696', '(10,"Main2") - 0.951870696', '(29,"Main2") - 0.951870696', '(11,"Main2") - 0.951870696']
Red Rules #: 29245
SMT Solving time: 0.150974246
Gen Solving time: 0.153626593
SMT Solver calls: 66
General Solver calls: 184
# nrpcs = [0, 0, 0, 0, 1, 0, 1, 3, 0, 2, 3, 2, 4, 8, 5, 5, 4]
# post call args = 9
# func args = 8
# timeouts = 0
# branches = 4


Graph latex for: digits-of-e2: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(digits-of-e2)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.19, 10) (0.24, 16) (0.29, 8) (0.32, 22) (0.36, 13) (0.44, 4) (0.48, 8) (0.62, 5) (0.92, 1)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.19, 10) (0.24, 16) (0.27, 16) (0.29, 8) (0.32, 3) (0.44, 4) (0.5, 13) (0.58, 4) (0.95, 7)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


exp3_8
Baseline:
hpc_exp = [('CallForHPC', '94', '49', '52', '0', '8'), ('Main2', '89', '42', '47', '1', '12')]
calculate hpc converage
[('CallForHPC', 94, 49, 52, '0', '8'), ('Main2', 89, 42, 47, '1', '12')]
[('Main2', 89, 42, 47, '1', '12')]
[('1', '12')]
Last time is: 0.962934919
hpc reached = 89.4
g2 reached = 50
total = 55
% reached = 90.9
last time = 0.962934919
all_times = ['(68,"Main2") - 0.208411109', '(25,"Main2") - 0.208411109', '(17,"Main2") - 0.208411109', '(22,"Main2") - 0.208411109', '(56,"Main2") - 0.208411109', '(20,"Main2") - 0.208411109', '(19,"Main2") - 0.208411109', '(57,"Main2") - 0.208411109', '(27,"Main2") - 0.208411109', '(1,"Main2") - 0.208411109', '(60,"Main2") - 0.208411109', '(58,"Main2") - 0.208411109', '(26,"Main2") - 0.208411109', '(28,"Main2") - 0.208411109', '(67,"Main2") - 0.208411109', '(15,"Main2") - 0.208411109', '(24,"Main2") - 0.208411109', '(6,"Main2") - 0.208411109', '(21,"Main2") - 0.208411109', '(61,"Main2") - 0.208411109', '(18,"Main2") - 0.208411109', '(16,"Main2") - 0.208411109', '(7,"Main2") - 0.208411109', '(0,"Main2") - 0.212522899', '(48,"Main2") - 0.376582960', '(59,"Main2") - 0.376582960', '(14,"Main2") - 0.376582960', '(66,"Main2") - 0.376582960', '(13,"Main2") - 0.376582960', '(53,"Main2") - 0.376582960', '(52,"Main2") - 0.376582960', '(9,"Main2") - 0.376582960', '(46,"Main2") - 0.376582960', '(54,"Main2") - 0.376582960', '(65,"Main2") - 0.376582960', '(50,"Main2") - 0.376582960', '(12,"Main2") - 0.376582960', '(51,"Main2") - 0.376582960', '(63,"Main2") - 0.376582960', '(64,"Main2") - 0.376582960', '(23,"Main2") - 0.376582960', '(8,"Main2") - 0.376582960', '(62,"Main2") - 0.376582960', '(41,"Main2") - 0.376582960', '(11,"Main2") - 0.376582960', '(44,"Main2") - 0.962934919', '(42,"Main2") - 0.962934919', '(49,"Main2") - 0.962934919', '(45,"Main2") - 0.962934919', '(43,"Main2") - 0.962934919']
Red Rules #: 38956
SMT Solving time: 0.052439364
Gen Solving time: 0.055017053
SMT Solver calls: 19
General Solver calls: 866
# nrpcs = []
# post call args = 5
# func args = 0
# timeouts = 0
# branches = 13
NRPC:
hpc_exp = [('CallForHPC', '90', '9', '10', '0', '0'), ('Main2', '38', '18', '47', '1', '12')]
calculate hpc converage
[('CallForHPC', 90, 9, 10, '0', '0'), ('Main2', 38, 18, 47, '1', '12')]
[('Main2', 38, 18, 47, '1', '12')]
[('1', '12')]
Last time is: 0.600945088
hpc reached = 38.3
g2 reached = 48
total = 55
% reached = 87.3
last time = 0.600945088
all_times = ['(2,"Main2") - 0.184660071', '(68,"Main2") - 0.184660071', '(25,"Main2") - 0.184660071', '(5,"Main2") - 0.184660071', '(22,"Main2") - 0.184660071', '(56,"Main2") - 0.184660071', '(59,"Main2") - 0.184660071', '(14,"Main2") - 0.184660071', '(66,"Main2") - 0.184660071', '(13,"Main2") - 0.184660071', '(9,"Main2") - 0.184660071', '(54,"Main2") - 0.184660071', '(57,"Main2") - 0.184660071', '(27,"Main2") - 0.184660071', '(1,"Main2") - 0.184660071', '(60,"Main2") - 0.184660071', '(4,"Main2") - 0.184660071', '(26,"Main2") - 0.184660071', '(28,"Main2") - 0.184660071', '(67,"Main2") - 0.184660071', '(15,"Main2") - 0.184660071', '(12,"Main2") - 0.184660071', '(24,"Main2") - 0.184660071', '(21,"Main2") - 0.184660071', '(7,"Main2") - 0.184660071', '(17,"Main2") - 0.309151847', '(20,"Main2") - 0.309151847', '(19,"Main2") - 0.309151847', '(58,"Main2") - 0.309151847', '(6,"Main2") - 0.309151847', '(61,"Main2") - 0.309151847', '(18,"Main2") - 0.309151847', '(16,"Main2") - 0.309151847', '(0,"Main2") - 0.314923490', '(65,"Main2") - 0.423490166', '(63,"Main2") - 0.423490166', '(64,"Main2") - 0.423490166', '(62,"Main2") - 0.423490166', '(11,"Main2") - 0.423490166', '(48,"Main2") - 0.600945088', '(53,"Main2") - 0.600945088', '(52,"Main2") - 0.600945088', '(46,"Main2") - 0.600945088', '(50,"Main2") - 0.600945088', '(51,"Main2") - 0.600945088', '(23,"Main2") - 0.600945088', '(8,"Main2") - 0.600945088', '(41,"Main2") - 0.600945088']
Red Rules #: 35562
SMT Solving time: 0.051458221
Gen Solving time: 0.058110872
SMT Solver calls: 16
General Solver calls: 2172
# nrpcs = [3, 2, 1, 2, 3, 2, 1, 0, 4, 3, 3, 1, 0, 0, 3, 3, 4, 4, 4, 6, 4]
# post call args = 2
# func args = 19
# timeouts = 20
# branches = 13


Graph latex for: exp3_8: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(exp3_8)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.21, 24) (0.38, 21) (0.96, 5)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.18, 25) (0.31, 9) (0.42, 5) (0.6, 9)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


gen_regexps
Baseline:
hpc_exp = [('CallForHPC', '89', '146', '163', '0', '2'), ('Main2', '50', '60', '120', '3', '8')]
calculate hpc converage
[('CallForHPC', 89, 146, 163, '0', '2'), ('Main2', 50, 60, 120, '3', '8')]
[('Main2', 50, 60, 120, '3', '8')]
[('3', '8')]
Last time is: 0.766990556
hpc reached = 50.0
g2 reached = 69
total = 128
% reached = 53.9
last time = 0.766990556
all_times = ['(1,"Main2") - 0.204198616', '(131,"Main2") - 0.204198616', '(132,"Main2") - 0.204198616', '(133,"Main2") - 0.204198616', '(134,"Main2") - 0.204198616', '(0,"Main2") - 0.204198616', '(11,"Main2") - 0.204198616', '(68,"Main2") - 0.222898282', '(3,"Main2") - 0.222898282', '(103,"Main2") - 0.222898282', '(69,"Main2") - 0.222898282', '(113,"Main2") - 0.222898282', '(122,"Main2") - 0.222898282', '(123,"Main2") - 0.222898282', '(4,"Main2") - 0.222898282', '(75,"Main2") - 0.222898282', '(79,"Main2") - 0.222898282', '(63,"Main2") - 0.222898282', '(76,"Main2") - 0.222898282', '(64,"Main2") - 0.222898282', '(62,"Main2") - 0.222898282', '(99,"Main2") - 0.222898282', '(73,"Main2") - 0.231078326', '(100,"Main2") - 0.231078326', '(74,"Main2") - 0.231078326', '(66,"Main2") - 0.231078326', '(65,"Main2") - 0.231078326', '(77,"Main2") - 0.231078326', '(67,"Main2") - 0.231078326', '(78,"Main2") - 0.231078326', '(61,"Main2") - 0.231078326', '(116,"Main2") - 0.259087854', '(109,"Main2") - 0.259087854', '(111,"Main2") - 0.259087854', '(115,"Main2") - 0.259087854', '(112,"Main2") - 0.259087854', '(108,"Main2") - 0.259087854', '(110,"Main2") - 0.259087854', '(50,"Main2") - 0.259087854', '(107,"Main2") - 0.259087854', '(72,"Main2") - 0.259087854', '(6,"Main2") - 0.259087854', '(71,"Main2") - 0.259087854', '(70,"Main2") - 0.259087854', '(7,"Main2") - 0.259087854', '(102,"Main2") - 0.259087854', '(2,"Main2") - 0.302536586', '(5,"Main2") - 0.302536586', '(20,"Main2") - 0.302536586', '(38,"Main2") - 0.302536586', '(36,"Main2") - 0.302536586', '(42,"Main2") - 0.302536586', '(24,"Main2") - 0.302536586', '(49,"Main2") - 0.302536586', '(114,"Main2") - 0.302536586', '(23,"Main2") - 0.302536586', '(21,"Main2") - 0.302536586', '(130,"Main2") - 0.302536586', '(44,"Main2") - 0.359006297', '(45,"Main2") - 0.359006297', '(14,"Main2") - 0.541084992', '(13,"Main2") - 0.541084992', '(9,"Main2") - 0.541084992', '(19,"Main2") - 0.541084992', '(10,"Main2") - 0.541084992', '(18,"Main2") - 0.541084992', '(39,"Main2") - 0.766990556', '(40,"Main2") - 0.766990556', '(41,"Main2") - 0.766990556']
Red Rules #: 3351
SMT Solving time: 0.720675103
Gen Solving time: 0.724102141
SMT Solver calls: 87
General Solver calls: 104
# nrpcs = []
# post call args = 20
# func args = 0
# timeouts = 0
# branches = 11
NRPC:
hpc_exp = [('CallForHPC', '91', '225', '246', '0', '10'), ('Main2', '50', '60', '120', '3', '8')]
calculate hpc converage
[('CallForHPC', 91, 225, 246, '0', '10'), ('Main2', 50, 60, 120, '3', '8')]
[('Main2', 50, 60, 120, '3', '8')]
[('3', '8')]
Last time is: 0.794748550
hpc reached = 50.0
g2 reached = 69
total = 128
% reached = 53.9
last time = 0.794748550
all_times = ['(1,"Main2") - 0.204953564', '(131,"Main2") - 0.204953564', '(132,"Main2") - 0.204953564', '(133,"Main2") - 0.204953564', '(134,"Main2") - 0.204953564', '(0,"Main2") - 0.204953564', '(11,"Main2") - 0.204953564', '(68,"Main2") - 0.223751723', '(3,"Main2") - 0.223751723', '(103,"Main2") - 0.223751723', '(69,"Main2") - 0.223751723', '(113,"Main2") - 0.223751723', '(122,"Main2") - 0.223751723', '(123,"Main2") - 0.223751723', '(4,"Main2") - 0.223751723', '(75,"Main2") - 0.223751723', '(79,"Main2") - 0.223751723', '(63,"Main2") - 0.223751723', '(76,"Main2") - 0.223751723', '(64,"Main2") - 0.223751723', '(62,"Main2") - 0.223751723', '(99,"Main2") - 0.223751723', '(73,"Main2") - 0.231724204', '(100,"Main2") - 0.231724204', '(74,"Main2") - 0.231724204', '(66,"Main2") - 0.231724204', '(65,"Main2") - 0.231724204', '(77,"Main2") - 0.231724204', '(67,"Main2") - 0.231724204', '(78,"Main2") - 0.231724204', '(61,"Main2") - 0.231724204', '(116,"Main2") - 0.262240928', '(109,"Main2") - 0.262240928', '(111,"Main2") - 0.262240928', '(115,"Main2") - 0.262240928', '(112,"Main2") - 0.262240928', '(108,"Main2") - 0.262240928', '(110,"Main2") - 0.262240928', '(50,"Main2") - 0.262240928', '(107,"Main2") - 0.262240928', '(72,"Main2") - 0.262240928', '(6,"Main2") - 0.262240928', '(71,"Main2") - 0.262240928', '(70,"Main2") - 0.262240928', '(7,"Main2") - 0.262240928', '(102,"Main2") - 0.262240928', '(2,"Main2") - 0.306729970', '(5,"Main2") - 0.306729970', '(20,"Main2") - 0.306729970', '(38,"Main2") - 0.306729970', '(36,"Main2") - 0.306729970', '(42,"Main2") - 0.306729970', '(24,"Main2") - 0.306729970', '(49,"Main2") - 0.306729970', '(114,"Main2") - 0.306729970', '(23,"Main2") - 0.306729970', '(21,"Main2") - 0.306729970', '(130,"Main2") - 0.306729970', '(44,"Main2") - 0.363188277', '(45,"Main2") - 0.363188277', '(14,"Main2") - 0.552752278', '(13,"Main2") - 0.552752278', '(9,"Main2") - 0.552752278', '(19,"Main2") - 0.552752278', '(10,"Main2") - 0.552752278', '(18,"Main2") - 0.552752278', '(39,"Main2") - 0.794748550', '(40,"Main2") - 0.794748550', '(41,"Main2") - 0.794748550']
Red Rules #: 3378
SMT Solving time: 0.689255309
Gen Solving time: 0.694543674
SMT Solver calls: 85
General Solver calls: 101
# nrpcs = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 0]
# post call args = 19
# func args = 5
# timeouts = 0
# branches = 11


Graph latex for: gen_regexps: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(gen_regexps)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 7) (0.22, 15) (0.23, 9) (0.26, 15) (0.3, 12) (0.36, 2) (0.54, 6) (0.77, 3)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.2, 7) (0.22, 15) (0.23, 9) (0.26, 15) (0.31, 12) (0.36, 2) (0.55, 6) (0.79, 3)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


integrate
Baseline:
hpc_exp = [('CallForHPC', '50', '6', '12', '0', '0'), ('Main2', '3', '5', '139', '0', '0')]
calculate hpc converage
[('CallForHPC', 50, 6, 12, '0', '0'), ('Main2', 3, 5, 139, '0', '0')]
[('Main2', 3, 5, 139, '0', '0')]
[('0', '0')]
Last time is: 0.214967200
hpc reached = 3.6
g2 reached = 7
total = 143
% reached = 4.9
last time = 0.214967200
all_times = ['(152,"Main2") - 0.214967200', '(141,"Main2") - 0.214967200', '(151,"Main2") - 0.214967200', '(150,"Main2") - 0.214967200', '(146,"Main2") - 0.214967200', '(147,"Main2") - 0.214967200', '(145,"Main2") - 0.214967200']
Red Rules #: 43032
SMT Solving time: 0.043637412
Gen Solving time: 0.044127935
SMT Solver calls: 15
General Solver calls: 36
# nrpcs = []
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 0
NRPC:
hpc_exp = [('CallForHPC', '96', '179', '186', '0', '12'), ('Main2', '69', '96', '139', '0', '0')]
calculate hpc converage
[('CallForHPC', 96, 179, 186, '0', '12'), ('Main2', 69, 96, 139, '0', '0')]
[('Main2', 69, 96, 139, '0', '0')]
[('0', '0')]
Last time is: 0.334346032
hpc reached = 69.1
g2 reached = 63
total = 143
% reached = 44.1
last time = 0.334346032
all_times = ['(152,"Main2") - 0.218704304', '(141,"Main2") - 0.218704304', '(151,"Main2") - 0.218704304', '(150,"Main2") - 0.218704304', '(146,"Main2") - 0.218704304', '(147,"Main2") - 0.218704304', '(145,"Main2") - 0.218704304', '(90,"Main2") - 0.245906858', '(2,"Main2") - 0.245906858', '(138,"Main2") - 0.245906858', '(109,"Main2") - 0.245906858', '(111,"Main2") - 0.245906858', '(103,"Main2") - 0.245906858', '(17,"Main2") - 0.245906858', '(101,"Main2") - 0.245906858', '(22,"Main2") - 0.245906858', '(139,"Main2") - 0.245906858', '(96,"Main2") - 0.245906858', '(112,"Main2") - 0.245906858', '(122,"Main2") - 0.245906858', '(140,"Main2") - 0.245906858', '(108,"Main2") - 0.245906858', '(123,"Main2") - 0.245906858', '(105,"Main2") - 0.245906858', '(27,"Main2") - 0.245906858', '(1,"Main2") - 0.245906858', '(137,"Main2") - 0.245906858', '(89,"Main2") - 0.245906858', '(148,"Main2") - 0.245906858', '(136,"Main2") - 0.245906858', '(94,"Main2") - 0.245906858', '(26,"Main2") - 0.245906858', '(131,"Main2") - 0.245906858', '(77,"Main2") - 0.245906858', '(28,"Main2") - 0.245906858', '(78,"Main2") - 0.245906858', '(107,"Main2") - 0.245906858', '(97,"Main2") - 0.245906858', '(106,"Main2") - 0.245906858', '(132,"Main2") - 0.245906858', '(24,"Main2") - 0.245906858', '(133,"Main2") - 0.245906858', '(142,"Main2") - 0.245906858', '(144,"Main2") - 0.245906858', '(134,"Main2") - 0.245906858', '(104,"Main2") - 0.245906858', '(130,"Main2") - 0.245906858', '(16,"Main2") - 0.245906858', '(99,"Main2") - 0.245906858', '(0,"Main2") - 0.245906858', '(80,"Main2") - 0.245906858', '(102,"Main2") - 0.245906858', '(117,"Main2") - 0.334346032', '(116,"Main2") - 0.334346032', '(120,"Main2") - 0.334346032', '(14,"Main2") - 0.334346032', '(13,"Main2") - 0.334346032', '(15,"Main2") - 0.334346032', '(12,"Main2") - 0.334346032', '(6,"Main2") - 0.334346032', '(121,"Main2") - 0.334346032', '(8,"Main2") - 0.334346032', '(7,"Main2") - 0.334346032']
Red Rules #: 31409
SMT Solving time: 0.07444896
Gen Solving time: 0.074960729
SMT Solver calls: 25
General Solver calls: 36
# nrpcs = [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
# post call args = 1
# func args = 12
# timeouts = 0
# branches = 0


Graph latex for: integrate: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(integrate)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.21, 7)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.22, 7) (0.25, 45) (0.33, 11)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


paraffins
Baseline:
hpc_exp = [('CallForHPC', '85', '97', '113', '0', '6'), ('Main2', '36', '94', '260', '6', '14')]
calculate hpc converage
[('CallForHPC', 85, 97, 113, '0', '6'), ('Main2', 36, 94, 260, '6', '14')]
[('Main2', 36, 94, 260, '6', '14')]
[('6', '14')]
Last time is: 0.861566038
hpc reached = 36.2
g2 reached = 117
total = 264
% reached = 44.3
last time = 0.861566038
all_times = ['(247,"Main2") - 0.458008585', '(244,"Main2") - 0.458008585', '(245,"Main2") - 0.458008585', '(255,"Main2") - 0.458008585', '(218,"Main2") - 0.458008585', '(211,"Main2") - 0.458008585', '(258,"Main2") - 0.458008585', '(260,"Main2") - 0.458008585', '(150,"Main2") - 0.458008585', '(239,"Main2") - 0.458008585', '(238,"Main2") - 0.458008585', '(237,"Main2") - 0.458008585', '(257,"Main2") - 0.458008585', '(225,"Main2") - 0.458008585', '(226,"Main2") - 0.458008585', '(217,"Main2") - 0.458008585', '(263,"Main2") - 0.458008585', '(227,"Main2") - 0.458008585', '(246,"Main2") - 0.458008585', '(142,"Main2") - 0.458008585', '(144,"Main2") - 0.458008585', '(252,"Main2") - 0.458008585', '(240,"Main2") - 0.458008585', '(212,"Main2") - 0.458008585', '(149,"Main2") - 0.458008585', '(261,"Main2") - 0.458008585', '(262,"Main2") - 0.458008585', '(254,"Main2") - 0.458008585', '(143,"Main2") - 0.458008585', '(210,"Main2") - 0.458008585', '(92,"Main2") - 0.495868448', '(100,"Main2") - 0.495868448', '(231,"Main2") - 0.495868448', '(119,"Main2") - 0.495868448', '(116,"Main2") - 0.495868448', '(124,"Main2") - 0.495868448', '(126,"Main2") - 0.495868448', '(109,"Main2") - 0.495868448', '(111,"Main2") - 0.495868448', '(103,"Main2") - 0.495868448', '(115,"Main2") - 0.495868448', '(219,"Main2") - 0.495868448', '(101,"Main2") - 0.495868448', '(223,"Main2") - 0.495868448', '(59,"Main2") - 0.495868448', '(96,"Main2") - 0.495868448', '(112,"Main2") - 0.495868448', '(230,"Main2") - 0.495868448', '(118,"Main2") - 0.495868448', '(113,"Main2") - 0.495868448', '(122,"Main2") - 0.495868448', '(108,"Main2") - 0.495868448', '(123,"Main2") - 0.495868448', '(54,"Main2") - 0.495868448', '(105,"Main2") - 0.495868448', '(60,"Main2") - 0.495868448', '(110,"Main2") - 0.495868448', '(94,"Main2") - 0.495868448', '(221,"Main2") - 0.495868448', '(58,"Main2") - 0.495868448', '(95,"Main2") - 0.495868448', '(222,"Main2") - 0.495868448', '(224,"Main2") - 0.495868448', '(97,"Main2") - 0.495868448', '(229,"Main2") - 0.495868448', '(106,"Main2") - 0.495868448', '(114,"Main2") - 0.495868448', '(228,"Main2") - 0.495868448', '(133,"Main2") - 0.495868448', '(134,"Main2") - 0.495868448', '(121,"Main2") - 0.495868448', '(104,"Main2") - 0.495868448', '(259,"Main2") - 0.495868448', '(125,"Main2") - 0.495868448', '(61,"Main2") - 0.495868448', '(236,"Main2") - 0.495868448', '(135,"Main2") - 0.495868448', '(93,"Main2") - 0.495868448', '(62,"Main2") - 0.495868448', '(220,"Main2") - 0.495868448', '(102,"Main2") - 0.495868448', '(56,"Main2") - 0.692768525', '(55,"Main2") - 0.692768525', '(57,"Main2") - 0.692768525', '(107,"Main2") - 0.692768525', '(74,"Main2") - 0.703398584', '(87,"Main2") - 0.703398584', '(129,"Main2") - 0.703398584', '(69,"Main2") - 0.703398584', '(53,"Main2") - 0.703398584', '(52,"Main2") - 0.703398584', '(128,"Main2") - 0.703398584', '(65,"Main2") - 0.703398584', '(75,"Main2") - 0.703398584', '(50,"Main2") - 0.703398584', '(77,"Main2") - 0.703398584', '(67,"Main2") - 0.703398584', '(78,"Main2") - 0.703398584', '(51,"Main2") - 0.703398584', '(49,"Main2") - 0.703398584', '(47,"Main2") - 0.703398584', '(63,"Main2") - 0.703398584', '(76,"Main2") - 0.703398584', '(82,"Main2") - 0.703398584', '(83,"Main2") - 0.703398584', '(64,"Main2") - 0.703398584', '(70,"Main2") - 0.703398584', '(99,"Main2") - 0.703398584', '(80,"Main2") - 0.703398584', '(86,"Main2") - 0.796741070', '(85,"Main2") - 0.796741070', '(84,"Main2") - 0.796741070', '(79,"Main2") - 0.796741070', '(73,"Main2") - 0.861566038', '(66,"Main2") - 0.861566038', '(72,"Main2") - 0.861566038', '(71,"Main2") - 0.861566038']
Red Rules #: 24149
SMT Solving time: 0.132135309
Gen Solving time: 0.133863838
SMT Solver calls: 72
General Solver calls: 101
# nrpcs = []
# post call args = 14
# func args = 0
# timeouts = 5
# branches = 20
NRPC:
hpc_exp = [('CallForHPC', '90', '109', '120', '0', '2'), ('Main2', '78', '204', '260', '6', '14')]
calculate hpc converage
[('CallForHPC', 90, 109, 120, '0', '2'), ('Main2', 78, 204, 260, '6', '14')]
[('Main2', 78, 204, 260, '6', '14')]
[('6', '14')]
Last time is: 0.881242770
hpc reached = 78.5
g2 reached = 117
total = 264
% reached = 44.3
last time = 0.881242770
all_times = ['(92,"Main2") - 0.431400286', '(100,"Main2") - 0.431400286', '(231,"Main2") - 0.431400286', '(119,"Main2") - 0.431400286', '(116,"Main2") - 0.431400286', '(124,"Main2") - 0.431400286', '(126,"Main2") - 0.431400286', '(109,"Main2") - 0.431400286', '(111,"Main2") - 0.431400286', '(103,"Main2") - 0.431400286', '(115,"Main2") - 0.431400286', '(219,"Main2") - 0.431400286', '(101,"Main2") - 0.431400286', '(223,"Main2") - 0.431400286', '(96,"Main2") - 0.431400286', '(112,"Main2") - 0.431400286', '(230,"Main2") - 0.431400286', '(118,"Main2") - 0.431400286', '(113,"Main2") - 0.431400286', '(260,"Main2") - 0.431400286', '(122,"Main2") - 0.431400286', '(108,"Main2") - 0.431400286', '(123,"Main2") - 0.431400286', '(54,"Main2") - 0.431400286', '(105,"Main2") - 0.431400286', '(239,"Main2") - 0.431400286', '(110,"Main2") - 0.431400286', '(238,"Main2") - 0.431400286', '(94,"Main2") - 0.431400286', '(221,"Main2") - 0.431400286', '(58,"Main2") - 0.431400286', '(95,"Main2") - 0.431400286', '(237,"Main2") - 0.431400286', '(225,"Main2") - 0.431400286', '(222,"Main2") - 0.431400286', '(224,"Main2") - 0.431400286', '(226,"Main2") - 0.431400286', '(97,"Main2") - 0.431400286', '(263,"Main2") - 0.431400286', '(229,"Main2") - 0.431400286', '(227,"Main2") - 0.431400286', '(114,"Main2") - 0.431400286', '(228,"Main2") - 0.431400286', '(133,"Main2") - 0.431400286', '(134,"Main2") - 0.431400286', '(121,"Main2") - 0.431400286', '(104,"Main2") - 0.431400286', '(259,"Main2") - 0.431400286', '(125,"Main2") - 0.431400286', '(236,"Main2") - 0.431400286', '(240,"Main2") - 0.431400286', '(135,"Main2") - 0.431400286', '(93,"Main2") - 0.431400286', '(261,"Main2") - 0.431400286', '(262,"Main2") - 0.431400286', '(220,"Main2") - 0.431400286', '(102,"Main2") - 0.431400286', '(56,"Main2") - 0.441064237', '(55,"Main2") - 0.441064237', '(57,"Main2") - 0.441064237', '(107,"Main2") - 0.441064237', '(247,"Main2") - 0.502735131', '(244,"Main2") - 0.502735131', '(245,"Main2") - 0.502735131', '(255,"Main2") - 0.502735131', '(218,"Main2") - 0.502735131', '(211,"Main2") - 0.502735131', '(258,"Main2") - 0.502735131', '(150,"Main2") - 0.502735131', '(257,"Main2") - 0.502735131', '(217,"Main2") - 0.502735131', '(246,"Main2") - 0.502735131', '(142,"Main2") - 0.502735131', '(144,"Main2") - 0.502735131', '(252,"Main2") - 0.502735131', '(212,"Main2") - 0.502735131', '(149,"Main2") - 0.502735131', '(254,"Main2") - 0.502735131', '(143,"Main2") - 0.502735131', '(210,"Main2") - 0.502735131', '(59,"Main2") - 0.534651504', '(60,"Main2") - 0.534651504', '(106,"Main2") - 0.534651504', '(61,"Main2") - 0.534651504', '(62,"Main2") - 0.534651504', '(74,"Main2") - 0.708044360', '(87,"Main2") - 0.708044360', '(129,"Main2") - 0.708044360', '(69,"Main2") - 0.708044360', '(53,"Main2") - 0.708044360', '(52,"Main2") - 0.708044360', '(128,"Main2") - 0.708044360', '(65,"Main2") - 0.708044360', '(75,"Main2") - 0.708044360', '(50,"Main2") - 0.708044360', '(77,"Main2") - 0.708044360', '(67,"Main2") - 0.708044360', '(78,"Main2") - 0.708044360', '(51,"Main2") - 0.708044360', '(49,"Main2") - 0.708044360', '(47,"Main2") - 0.708044360', '(63,"Main2") - 0.708044360', '(76,"Main2") - 0.708044360', '(82,"Main2") - 0.708044360', '(83,"Main2") - 0.708044360', '(64,"Main2") - 0.708044360', '(70,"Main2") - 0.708044360', '(99,"Main2") - 0.708044360', '(80,"Main2") - 0.708044360', '(86,"Main2") - 0.780514579', '(85,"Main2") - 0.780514579', '(84,"Main2") - 0.780514579', '(79,"Main2") - 0.780514579', '(73,"Main2") - 0.881242770', '(66,"Main2") - 0.881242770', '(72,"Main2") - 0.881242770', '(71,"Main2") - 0.881242770']
Red Rules #: 24645
SMT Solving time: 0.137188169
Gen Solving time: 0.139699391
SMT Solver calls: 72
General Solver calls: 114
# nrpcs = [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]
# post call args = 13
# func args = 3
# timeouts = 4
# branches = 20


Graph latex for: paraffins: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(paraffins)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.46, 30) (0.5, 51) (0.69, 4) (0.7, 24) (0.8, 4) (0.86, 4)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.43, 57) (0.44, 4) (0.5, 19) (0.53, 5) (0.71, 24) (0.78, 4) (0.88, 4)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


primes
Baseline:
hpc_exp = [('CallForHPC', '88', '96', '109', '0', '12'), ('Main2', '100', '25', '25', '0', '0')]
calculate hpc converage
[('CallForHPC', 88, 96, 109, '0', '12'), ('Main2', 100, 25, 25, '0', '0')]
[('Main2', 100, 25, 25, '0', '0')]
[('0', '0')]
Last time is: 0.329375305
hpc reached = 100.0
g2 reached = 29
total = 29
% reached = 100.0
last time = 0.329375305
all_times = ['(22,"Main2") - 0.199943701', '(20,"Main2") - 0.199943701', '(27,"Main2") - 0.199943701', '(26,"Main2") - 0.199943701', '(28,"Main2") - 0.199943701', '(24,"Main2") - 0.199943701', '(23,"Main2") - 0.199943701', '(21,"Main2") - 0.199943701', '(17,"Main2") - 0.206630972', '(19,"Main2") - 0.206630972', '(15,"Main2") - 0.206630972', '(18,"Main2") - 0.206630972', '(16,"Main2") - 0.206630972', '(11,"Main2") - 0.206630972', '(25,"Main2") - 0.233444551', '(14,"Main2") - 0.233444551', '(12,"Main2") - 0.233444551', '(13,"Main2") - 0.251488593', '(10,"Main2") - 0.251488593', '(2,"Main2") - 0.329375305', '(3,"Main2") - 0.329375305', '(5,"Main2") - 0.329375305', '(9,"Main2") - 0.329375305', '(1,"Main2") - 0.329375305', '(4,"Main2") - 0.329375305', '(6,"Main2") - 0.329375305', '(8,"Main2") - 0.329375305', '(0,"Main2") - 0.329375305', '(7,"Main2") - 0.329375305']
Red Rules #: 3511
SMT Solving time: 0.093999306
Gen Solving time: 0.094873992
SMT Solver calls: 38
General Solver calls: 54
# nrpcs = []
# post call args = 13
# func args = 0
# timeouts = 0
# branches = 0
NRPC:
hpc_exp = [('CallForHPC', '90', '138', '153', '0', '16'), ('Main2', '100', '25', '25', '0', '0')]
calculate hpc converage
[('CallForHPC', 90, 138, 153, '0', '16'), ('Main2', 100, 25, 25, '0', '0')]
[('Main2', 100, 25, 25, '0', '0')]
[('0', '0')]
Last time is: 0.326674994
hpc reached = 100.0
g2 reached = 29
total = 29
% reached = 100.0
last time = 0.326674994
all_times = ['(22,"Main2") - 0.200472196', '(20,"Main2") - 0.200472196', '(27,"Main2") - 0.200472196', '(26,"Main2") - 0.200472196', '(28,"Main2") - 0.200472196', '(24,"Main2") - 0.200472196', '(23,"Main2") - 0.200472196', '(21,"Main2") - 0.200472196', '(17,"Main2") - 0.209157704', '(19,"Main2") - 0.209157704', '(15,"Main2") - 0.209157704', '(18,"Main2") - 0.209157704', '(16,"Main2") - 0.209157704', '(11,"Main2") - 0.209157704', '(25,"Main2") - 0.230917122', '(14,"Main2") - 0.230917122', '(12,"Main2") - 0.230917122', '(13,"Main2") - 0.244930148', '(10,"Main2") - 0.244930148', '(2,"Main2") - 0.326674994', '(3,"Main2") - 0.326674994', '(5,"Main2") - 0.326674994', '(9,"Main2") - 0.326674994', '(1,"Main2") - 0.326674994', '(4,"Main2") - 0.326674994', '(6,"Main2") - 0.326674994', '(8,"Main2") - 0.326674994', '(0,"Main2") - 0.326674994', '(7,"Main2") - 0.326674994']
Red Rules #: 3349
SMT Solving time: 0.101171068
Gen Solving time: 0.101982176
SMT Solver calls: 39
General Solver calls: 50
# nrpcs = [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 2, 0, 1, 0, 0]
# post call args = 11
# func args = 5
# timeouts = 0
# branches = 0


Graph latex for: primes: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(primes)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 8) (0.21, 6) (0.23, 3) (0.25, 2) (0.33, 10)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.2, 8) (0.21, 6) (0.23, 3) (0.24, 2) (0.33, 10)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


queens
Baseline:
hpc_exp = [('CallForHPC', '88', '52', '59', '0', '0'), ('Main2', '29', '26', '89', '1', '5')]
calculate hpc converage
[('CallForHPC', 88, 52, 59, '0', '0'), ('Main2', 29, 26, 89, '1', '5')]
[('Main2', 29, 26, 89, '1', '5')]
[('1', '5')]
Last time is: 0.793711643
hpc reached = 29.2
g2 reached = 31
total = 95
% reached = 32.6
last time = 0.793711643
all_times = ['(92,"Main2") - 0.167950509', '(90,"Main2") - 0.167950509', '(86,"Main2") - 0.167950509', '(66,"Main2") - 0.167950509', '(89,"Main2") - 0.167950509', '(65,"Main2") - 0.167950509', '(94,"Main2") - 0.167950509', '(88,"Main2") - 0.167950509', '(93,"Main2") - 0.167950509', '(73,"Main2") - 0.197523222', '(74,"Main2") - 0.197523222', '(68,"Main2") - 0.197523222', '(85,"Main2") - 0.197523222', '(69,"Main2") - 0.197523222', '(84,"Main2") - 0.197523222', '(78,"Main2") - 0.197523222', '(72,"Main2") - 0.197523222', '(79,"Main2") - 0.197523222', '(71,"Main2") - 0.197523222', '(82,"Main2") - 0.197523222', '(83,"Main2") - 0.197523222', '(64,"Main2") - 0.197523222', '(81,"Main2") - 0.197523222', '(70,"Main2") - 0.197523222', '(0,"Main2") - 0.197523222', '(87,"Main2") - 0.793711643', '(75,"Main2") - 0.793711643', '(63,"Main2") - 0.793711643', '(91,"Main2") - 0.793711643', '(80,"Main2") - 0.793711643', '(43,"Main2") - 0.793711643']
Red Rules #: 19959
SMT Solving time: 0.366034633
Gen Solving time: 0.371140079
SMT Solver calls: 203
General Solver calls: 280
# nrpcs = []
# post call args = 9
# func args = 0
# timeouts = 0
# branches = 6
NRPC:
hpc_exp = [('CallForHPC', '97', '558', '575', '0', '58'), ('Main2', '49', '44', '89', '1', '5')]
calculate hpc converage
[('CallForHPC', 97, 558, 575, '0', '58'), ('Main2', 49, 44, 89, '1', '5')]
[('Main2', 49, 44, 89, '1', '5')]
[('1', '5')]
Last time is: 0.752633947
hpc reached = 49.4
g2 reached = 85
total = 95
% reached = 89.5
last time = 0.752633947
all_times = ['(92,"Main2") - 0.180418905', '(90,"Main2") - 0.180418905', '(86,"Main2") - 0.180418905', '(66,"Main2") - 0.180418905', '(89,"Main2") - 0.180418905', '(65,"Main2") - 0.180418905', '(94,"Main2") - 0.180418905', '(88,"Main2") - 0.180418905', '(93,"Main2") - 0.180418905', '(73,"Main2") - 0.210842555', '(74,"Main2") - 0.210842555', '(68,"Main2") - 0.210842555', '(85,"Main2") - 0.210842555', '(69,"Main2") - 0.210842555', '(84,"Main2") - 0.210842555', '(78,"Main2") - 0.210842555', '(72,"Main2") - 0.210842555', '(79,"Main2") - 0.210842555', '(71,"Main2") - 0.210842555', '(82,"Main2") - 0.210842555', '(83,"Main2") - 0.210842555', '(64,"Main2") - 0.210842555', '(81,"Main2") - 0.210842555', '(70,"Main2") - 0.210842555', '(0,"Main2") - 0.210842555', '(87,"Main2") - 0.262180337', '(75,"Main2") - 0.262180337', '(63,"Main2") - 0.262180337', '(91,"Main2") - 0.262180337', '(80,"Main2") - 0.262180337', '(43,"Main2") - 0.262180337', '(76,"Main2") - 0.267691527', '(41,"Main2") - 0.267691527', '(42,"Main2") - 0.274588295', '(48,"Main2") - 0.299206753', '(59,"Main2") - 0.299206753', '(44,"Main2") - 0.299206753', '(53,"Main2") - 0.299206753', '(52,"Main2") - 0.299206753', '(46,"Main2") - 0.299206753', '(60,"Main2") - 0.299206753', '(50,"Main2") - 0.299206753', '(77,"Main2") - 0.299206753', '(51,"Main2") - 0.299206753', '(49,"Main2") - 0.299206753', '(47,"Main2") - 0.299206753', '(45,"Main2") - 0.299206753', '(61,"Main2") - 0.299206753', '(62,"Main2") - 0.299206753', '(67,"Main2") - 0.596993015', '(3,"Main2") - 0.716346010', '(17,"Main2") - 0.716346010', '(5,"Main2") - 0.716346010', '(13,"Main2") - 0.716346010', '(9,"Main2") - 0.716346010', '(4,"Main2") - 0.716346010', '(38,"Main2") - 0.716346010', '(12,"Main2") - 0.716346010', '(39,"Main2") - 0.716346010', '(10,"Main2") - 0.716346010', '(6,"Main2") - 0.716346010', '(37,"Main2") - 0.716346010', '(40,"Main2") - 0.716346010', '(8,"Main2") - 0.716346010', '(16,"Main2") - 0.716346010', '(7,"Main2") - 0.716346010', '(11,"Main2") - 0.716346010', '(14,"Main2") - 0.721273784', '(1,"Main2") - 0.721273784', '(2,"Main2") - 0.725720148', '(15,"Main2") - 0.725720148', '(25,"Main2") - 0.752633947', '(22,"Main2") - 0.752633947', '(20,"Main2") - 0.752633947', '(19,"Main2") - 0.752633947', '(27,"Main2") - 0.752633947', '(34,"Main2") - 0.752633947', '(26,"Main2") - 0.752633947', '(36,"Main2") - 0.752633947', '(24,"Main2") - 0.752633947', '(23,"Main2") - 0.752633947', '(21,"Main2") - 0.752633947', '(18,"Main2") - 0.752633947', '(35,"Main2") - 0.752633947', '(33,"Main2") - 0.752633947']
Red Rules #: 20573
SMT Solving time: 0.280260625
Gen Solving time: 0.286049199
SMT Solver calls: 162
General Solver calls: 508
# nrpcs = [0, 0, 0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 5, 0, 0, 1, 1, 5, 12, 0, 7, 0, 0, 0, 3, 4, 2, 3, 3, 1, 2, 2, 1, 2, 4, 3, 3, 4, 2, 0, 10, 0, 0, 1, 1, 2, 2, 2]
# post call args = 15
# func args = 33
# timeouts = 0
# branches = 6


Graph latex for: queens: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(queens)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.17, 9) (0.2, 16) (0.79, 6)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.18, 9) (0.21, 16) (0.26, 6) (0.27, 3) (0.3, 15) (0.6, 1) (0.72, 19) (0.73, 2) (0.75, 14)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


rfib
Baseline:
hpc_exp = [('CallForHPC', '78', '15', '19', '0', '0'), ('Main2', '52', '11', '21', '1', '2')]
calculate hpc converage
[('CallForHPC', 78, 15, 19, '0', '0'), ('Main2', 52, 11, 21, '1', '2')]
[('Main2', 52, 11, 21, '1', '2')]
[('1', '2')]
Last time is: 0.766015727
hpc reached = 52.4
g2 reached = 25
total = 25
% reached = 100.0
last time = 0.766015727
all_times = ['(3,"Main2") - 0.471782981', '(17,"Main2") - 0.471782981', '(22,"Main2") - 0.471782981', '(20,"Main2") - 0.471782981', '(19,"Main2") - 0.471782981', '(1,"Main2") - 0.471782981', '(4,"Main2") - 0.471782981', '(24,"Main2") - 0.471782981', '(23,"Main2") - 0.471782981', '(21,"Main2") - 0.471782981', '(18,"Main2") - 0.471782981', '(16,"Main2") - 0.471782981', '(0,"Main2") - 0.471782981', '(2,"Main2") - 0.507463577', '(5,"Main2") - 0.507463577', '(14,"Main2") - 0.507463577', '(13,"Main2") - 0.507463577', '(15,"Main2") - 0.507463577', '(12,"Main2") - 0.507463577', '(9,"Main2") - 0.572285400', '(10,"Main2") - 0.572285400', '(8,"Main2") - 0.572285400', '(7,"Main2") - 0.572285400', '(6,"Main2") - 0.703532328', '(11,"Main2") - 0.766015727']
Red Rules #: 1915
SMT Solving time: 0.421375504
Gen Solving time: 0.422040553
SMT Solver calls: 28
General Solver calls: 41
# nrpcs = []
# post call args = 8
# func args = 0
# timeouts = 6
# branches = 3
NRPC:
hpc_exp = [('CallForHPC', '90', '37', '41', '0', '0'), ('Main2', '52', '11', '21', '1', '2')]
calculate hpc converage
[('CallForHPC', 90, 37, 41, '0', '0'), ('Main2', 52, 11, 21, '1', '2')]
[('Main2', 52, 11, 21, '1', '2')]
[('1', '2')]
Last time is: 0.379611403
hpc reached = 52.4
g2 reached = 25
total = 25
% reached = 100.0
last time = 0.379611403
all_times = ['(3,"Main2") - 0.165789360', '(17,"Main2") - 0.165789360', '(22,"Main2") - 0.165789360', '(20,"Main2") - 0.165789360', '(19,"Main2") - 0.165789360', '(1,"Main2") - 0.165789360', '(4,"Main2") - 0.165789360', '(24,"Main2") - 0.165789360', '(23,"Main2") - 0.165789360', '(21,"Main2") - 0.165789360', '(18,"Main2") - 0.165789360', '(16,"Main2") - 0.165789360', '(0,"Main2") - 0.165789360', '(2,"Main2") - 0.210558531', '(5,"Main2") - 0.210558531', '(9,"Main2") - 0.210558531', '(10,"Main2") - 0.210558531', '(8,"Main2") - 0.210558531', '(7,"Main2") - 0.210558531', '(14,"Main2") - 0.239293262', '(13,"Main2") - 0.239293262', '(15,"Main2") - 0.239293262', '(12,"Main2") - 0.239293262', '(11,"Main2") - 0.306816741', '(6,"Main2") - 0.379611403']
Red Rules #: 1311
SMT Solving time: 0.340196859
Gen Solving time: 0.340766351
SMT Solver calls: 22
General Solver calls: 32
# nrpcs = [2, 0, 1, 0, 0, 1, 2, 2]
# post call args = 2
# func args = 6
# timeouts = 4
# branches = 3


Graph latex for: rfib: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(rfib)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.47, 13) (0.51, 6) (0.57, 4) (0.7, 1) (0.77, 1)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.17, 13) (0.21, 6) (0.24, 4) (0.31, 1) (0.38, 1)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


tak
Baseline:
hpc_exp = [('CallForHPC', '90', '258', '285', '0', '56'), ('Main2', '37', '14', '37', '1', '2')]
calculate hpc converage
[('CallForHPC', 90, 258, 285, '0', '56'), ('Main2', 37, 14, 37, '1', '2')]
[('Main2', 37, 14, 37, '1', '2')]
[('1', '2')]
Last time is: 0.174298311
hpc reached = 37.8
g2 reached = 17
total = 41
% reached = 41.5
last time = 0.174298311
all_times = ['(2,"Main2") - 0.158071779', '(5,"Main2") - 0.158071779', '(9,"Main2") - 0.158071779', '(1,"Main2") - 0.158071779', '(4,"Main2") - 0.158071779', '(34,"Main2") - 0.158071779', '(38,"Main2") - 0.158071779', '(36,"Main2") - 0.158071779', '(39,"Main2") - 0.158071779', '(6,"Main2") - 0.158071779', '(37,"Main2") - 0.158071779', '(40,"Main2") - 0.158071779', '(8,"Main2") - 0.158071779', '(35,"Main2") - 0.158071779', '(33,"Main2") - 0.158071779', '(3,"Main2") - 0.174298311', '(0,"Main2") - 0.174298311']
Red Rules #: 9709
SMT Solving time: 0.584629344
Gen Solving time: 0.59653198
SMT Solver calls: 344
General Solver calls: 482
# nrpcs = []
# post call args = 10
# func args = 0
# timeouts = 0
# branches = 3
NRPC:
hpc_exp = [('CallForHPC', '88', '74', '84', '0', '14'), ('Main2', '37', '14', '37', '1', '2')]
calculate hpc converage
[('CallForHPC', 88, 74, 84, '0', '14'), ('Main2', 37, 14, 37, '1', '2')]
[('Main2', 37, 14, 37, '1', '2')]
[('1', '2')]
Last time is: 0.570599093
hpc reached = 37.8
g2 reached = 41
total = 41
% reached = 100.0
last time = 0.570599093
all_times = ['(2,"Main2") - 0.166138437', '(34,"Main2") - 0.166138437', '(39,"Main2") - 0.166138437', '(40,"Main2") - 0.166138437', '(8,"Main2") - 0.166138437', '(35,"Main2") - 0.166138437', '(33,"Main2") - 0.166138437', '(36,"Main2") - 0.168102880', '(0,"Main2") - 0.168102880', '(1,"Main2") - 0.168488071', '(37,"Main2") - 0.168488071', '(5,"Main2") - 0.171404180', '(10,"Main2") - 0.171404180', '(32,"Main2") - 0.171404180', '(7,"Main2") - 0.171404180', '(9,"Main2") - 0.175406713', '(38,"Main2") - 0.175406713', '(6,"Main2") - 0.175406713', '(3,"Main2") - 0.177146031', '(4,"Main2") - 0.178741761', '(17,"Main2") - 0.263541041', '(14,"Main2") - 0.263541041', '(13,"Main2") - 0.263541041', '(15,"Main2") - 0.263541041', '(12,"Main2") - 0.263541041', '(16,"Main2") - 0.263541041', '(11,"Main2") - 0.263541041', '(22,"Main2") - 0.308812218', '(20,"Main2") - 0.308812218', '(19,"Main2") - 0.308812218', '(24,"Main2") - 0.308812218', '(23,"Main2") - 0.308812218', '(21,"Main2") - 0.308812218', '(18,"Main2") - 0.308812218', '(25,"Main2") - 0.342669435', '(31,"Main2") - 0.342669435', '(29,"Main2") - 0.420986994', '(30,"Main2") - 0.460335121', '(27,"Main2") - 0.570599093', '(26,"Main2") - 0.570599093', '(28,"Main2") - 0.570599093']
Red Rules #: 29742
SMT Solving time: 0.136324687
Gen Solving time: 0.141756477
SMT Solver calls: 86
General Solver calls: 1051
# nrpcs = [0, 1, 0, 1, 2, 3, 2, 2, 5, 5, 5, 6, 6, 6, 4, 6, 5, 5, 5, 5, 7, 7, 6, 5, 7]
# post call args = 3
# func args = 22
# timeouts = 22
# branches = 3


Graph latex for: tak: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(tak)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.16, 15) (0.17, 2)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.17, 15) (0.18, 5) (0.26, 7) (0.31, 7) (0.34, 2) (0.42, 1) (0.46, 1) (0.57, 3)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


wheel-sieve1
Baseline:
hpc_exp = [('CallForHPC', '81', '223', '272', '0', '42'), ('Main2', '76', '87', '114', '3', '2')]
calculate hpc converage
[('CallForHPC', 81, 223, 272, '0', '42'), ('Main2', 76, 87, 114, '3', '2')]
[('Main2', 76, 87, 114, '3', '2')]
[('3', '2')]
Last time is: 0.905356193
hpc reached = 76.3
g2 reached = 130
total = 131
% reached = 99.2
last time = 0.905356193
all_times = ['(73,"Main2") - 0.227996874', '(92,"Main2") - 0.227996874', '(100,"Main2") - 0.227996874', '(90,"Main2") - 0.227996874', '(117,"Main2") - 0.227996874', '(74,"Main2") - 0.227996874', '(116,"Main2") - 0.227996874', '(68,"Main2") - 0.227996874', '(124,"Main2") - 0.227996874', '(30,"Main2") - 0.227996874', '(126,"Main2") - 0.227996874', '(87,"Main2") - 0.227996874', '(111,"Main2") - 0.227996874', '(103,"Main2") - 0.227996874', '(86,"Main2") - 0.227996874', '(120,"Main2") - 0.227996874', '(85,"Main2") - 0.227996874', '(31,"Main2") - 0.227996874', '(129,"Main2") - 0.227996874', '(96,"Main2") - 0.227996874', '(112,"Main2") - 0.227996874', '(69,"Main2") - 0.227996874', '(113,"Main2") - 0.227996874', '(122,"Main2") - 0.227996874', '(123,"Main2") - 0.227996874', '(128,"Main2") - 0.227996874', '(105,"Main2") - 0.227996874', '(89,"Main2") - 0.227996874', '(84,"Main2") - 0.227996874', '(38,"Main2") - 0.227996874', '(65,"Main2") - 0.227996874', '(94,"Main2") - 0.227996874', '(95,"Main2") - 0.227996874', '(75,"Main2") - 0.227996874', '(77,"Main2") - 0.227996874', '(67,"Main2") - 0.227996874', '(78,"Main2") - 0.227996874', '(39,"Main2") - 0.227996874', '(79,"Main2") - 0.227996874', '(97,"Main2") - 0.227996874', '(32,"Main2") - 0.227996874', '(37,"Main2") - 0.227996874', '(63,"Main2") - 0.227996874', '(114,"Main2") - 0.227996874', '(76,"Main2") - 0.227996874', '(91,"Main2") - 0.227996874', '(98,"Main2") - 0.227996874', '(82,"Main2") - 0.227996874', '(40,"Main2") - 0.227996874', '(83,"Main2") - 0.227996874', '(64,"Main2") - 0.227996874', '(121,"Main2") - 0.227996874', '(104,"Main2") - 0.227996874', '(127,"Main2") - 0.227996874', '(125,"Main2") - 0.227996874', '(88,"Main2") - 0.227996874', '(29,"Main2") - 0.227996874', '(130,"Main2") - 0.227996874', '(81,"Main2") - 0.227996874', '(93,"Main2") - 0.227996874', '(41,"Main2") - 0.227996874', '(80,"Main2") - 0.227996874', '(102,"Main2") - 0.227996874', '(115,"Main2") - 0.260033589', '(34,"Main2") - 0.260033589', '(36,"Main2") - 0.260033589', '(35,"Main2") - 0.260033589', '(27,"Main2") - 0.270483339', '(28,"Main2") - 0.270483339', '(33,"Main2") - 0.270483339', '(25,"Main2") - 0.283089401', '(24,"Main2") - 0.283089401', '(23,"Main2") - 0.283089401', '(2,"Main2") - 0.310655140', '(3,"Main2") - 0.310655140', '(17,"Main2") - 0.310655140', '(5,"Main2") - 0.310655140', '(22,"Main2") - 0.310655140', '(14,"Main2") - 0.310655140', '(13,"Main2") - 0.310655140', '(9,"Main2") - 0.310655140', '(19,"Main2") - 0.310655140', '(1,"Main2") - 0.310655140', '(4,"Main2") - 0.310655140', '(26,"Main2") - 0.310655140', '(15,"Main2") - 0.310655140', '(12,"Main2") - 0.310655140', '(10,"Main2") - 0.310655140', '(6,"Main2") - 0.310655140', '(21,"Main2") - 0.310655140', '(8,"Main2") - 0.310655140', '(16,"Main2") - 0.310655140', '(0,"Main2") - 0.310655140', '(7,"Main2") - 0.310655140', '(11,"Main2") - 0.310655140', '(20,"Main2") - 0.323321527', '(18,"Main2") - 0.340062323', '(119,"Main2") - 0.495547633', '(48,"Main2") - 0.495547633', '(109,"Main2") - 0.495547633', '(55,"Main2") - 0.495547633', '(66,"Main2") - 0.495547633', '(118,"Main2") - 0.495547633', '(44,"Main2") - 0.495547633', '(53,"Main2") - 0.495547633', '(108,"Main2") - 0.495547633', '(52,"Main2") - 0.495547633', '(46,"Main2") - 0.495547633', '(60,"Main2") - 0.495547633', '(50,"Main2") - 0.495547633', '(107,"Main2") - 0.495547633', '(72,"Main2") - 0.495547633', '(42,"Main2") - 0.495547633', '(106,"Main2") - 0.495547633', '(71,"Main2") - 0.495547633', '(49,"Main2") - 0.495547633', '(47,"Main2") - 0.495547633', '(45,"Main2") - 0.495547633', '(61,"Main2") - 0.495547633', '(62,"Main2") - 0.495547633', '(70,"Main2") - 0.495547633', '(99,"Main2") - 0.495547633', '(43,"Main2") - 0.495547633', '(56,"Main2") - 0.791062201', '(59,"Main2") - 0.791062201', '(54,"Main2") - 0.791062201', '(57,"Main2") - 0.791062201', '(58,"Main2") - 0.791062201', '(51,"Main2") - 0.791062201', '(101,"Main2") - 0.905356193']
Red Rules #: 20301
SMT Solving time: 0.310364512
Gen Solving time: 0.313739412
SMT Solver calls: 102
General Solver calls: 196
# nrpcs = []
# post call args = 24
# func args = 0
# timeouts = 5
# branches = 5
NRPC:
hpc_exp = [('CallForHPC', '91', '290', '317', '0', '40'), ('Main2', '76', '87', '114', '3', '2')]
calculate hpc converage
[('CallForHPC', 91, 290, 317, '0', '40'), ('Main2', 76, 87, 114, '3', '2')]
[('Main2', 76, 87, 114, '3', '2')]
[('3', '2')]
Last time is: 0.723991086
hpc reached = 76.3
g2 reached = 128
total = 131
% reached = 97.7
last time = 0.723991086
all_times = ['(73,"Main2") - 0.228746512', '(92,"Main2") - 0.228746512', '(100,"Main2") - 0.228746512', '(90,"Main2") - 0.228746512', '(117,"Main2") - 0.228746512', '(74,"Main2") - 0.228746512', '(116,"Main2") - 0.228746512', '(68,"Main2") - 0.228746512', '(124,"Main2") - 0.228746512', '(30,"Main2") - 0.228746512', '(126,"Main2") - 0.228746512', '(87,"Main2") - 0.228746512', '(111,"Main2") - 0.228746512', '(103,"Main2") - 0.228746512', '(86,"Main2") - 0.228746512', '(120,"Main2") - 0.228746512', '(85,"Main2") - 0.228746512', '(31,"Main2") - 0.228746512', '(129,"Main2") - 0.228746512', '(96,"Main2") - 0.228746512', '(112,"Main2") - 0.228746512', '(69,"Main2") - 0.228746512', '(113,"Main2") - 0.228746512', '(122,"Main2") - 0.228746512', '(123,"Main2") - 0.228746512', '(128,"Main2") - 0.228746512', '(105,"Main2") - 0.228746512', '(89,"Main2") - 0.228746512', '(84,"Main2") - 0.228746512', '(38,"Main2") - 0.228746512', '(65,"Main2") - 0.228746512', '(94,"Main2") - 0.228746512', '(95,"Main2") - 0.228746512', '(75,"Main2") - 0.228746512', '(77,"Main2") - 0.228746512', '(67,"Main2") - 0.228746512', '(78,"Main2") - 0.228746512', '(39,"Main2") - 0.228746512', '(79,"Main2") - 0.228746512', '(97,"Main2") - 0.228746512', '(32,"Main2") - 0.228746512', '(37,"Main2") - 0.228746512', '(63,"Main2") - 0.228746512', '(114,"Main2") - 0.228746512', '(76,"Main2") - 0.228746512', '(91,"Main2") - 0.228746512', '(98,"Main2") - 0.228746512', '(82,"Main2") - 0.228746512', '(40,"Main2") - 0.228746512', '(83,"Main2") - 0.228746512', '(64,"Main2") - 0.228746512', '(121,"Main2") - 0.228746512', '(104,"Main2") - 0.228746512', '(127,"Main2") - 0.228746512', '(125,"Main2") - 0.228746512', '(88,"Main2") - 0.228746512', '(29,"Main2") - 0.228746512', '(130,"Main2") - 0.228746512', '(81,"Main2") - 0.228746512', '(93,"Main2") - 0.228746512', '(41,"Main2") - 0.228746512', '(80,"Main2") - 0.228746512', '(102,"Main2") - 0.228746512', '(115,"Main2") - 0.332866984', '(34,"Main2") - 0.332866984', '(36,"Main2") - 0.332866984', '(35,"Main2") - 0.332866984', '(27,"Main2") - 0.341391632', '(28,"Main2") - 0.341391632', '(33,"Main2") - 0.341391632', '(25,"Main2") - 0.350458189', '(24,"Main2") - 0.350458189', '(23,"Main2") - 0.350458189', '(66,"Main2") - 0.381664680', '(107,"Main2") - 0.381664680', '(72,"Main2") - 0.381664680', '(106,"Main2") - 0.381664680', '(62,"Main2") - 0.381664680', '(70,"Main2") - 0.381664680', '(119,"Main2") - 0.491753211', '(48,"Main2") - 0.491753211', '(109,"Main2") - 0.491753211', '(55,"Main2") - 0.491753211', '(118,"Main2") - 0.491753211', '(44,"Main2") - 0.491753211', '(53,"Main2") - 0.491753211', '(108,"Main2") - 0.491753211', '(52,"Main2") - 0.491753211', '(46,"Main2") - 0.491753211', '(60,"Main2") - 0.491753211', '(50,"Main2") - 0.491753211', '(42,"Main2") - 0.491753211', '(71,"Main2") - 0.491753211', '(49,"Main2") - 0.491753211', '(47,"Main2") - 0.491753211', '(45,"Main2") - 0.491753211', '(61,"Main2") - 0.491753211', '(99,"Main2") - 0.491753211', '(43,"Main2") - 0.491753211', '(56,"Main2") - 0.570464834', '(59,"Main2") - 0.570464834', '(54,"Main2") - 0.570464834', '(57,"Main2") - 0.570464834', '(58,"Main2") - 0.570464834', '(51,"Main2") - 0.570464834', '(2,"Main2") - 0.715306745', '(3,"Main2") - 0.715306745', '(17,"Main2") - 0.715306745', '(5,"Main2") - 0.715306745', '(22,"Main2") - 0.715306745', '(14,"Main2") - 0.715306745', '(13,"Main2") - 0.715306745', '(9,"Main2") - 0.715306745', '(19,"Main2") - 0.715306745', '(1,"Main2") - 0.715306745', '(4,"Main2") - 0.715306745', '(26,"Main2") - 0.715306745', '(15,"Main2") - 0.715306745', '(12,"Main2") - 0.715306745', '(10,"Main2") - 0.715306745', '(6,"Main2") - 0.715306745', '(21,"Main2") - 0.715306745', '(8,"Main2") - 0.715306745', '(16,"Main2") - 0.715306745', '(0,"Main2") - 0.715306745', '(7,"Main2") - 0.715306745', '(11,"Main2") - 0.715306745', '(20,"Main2") - 0.723991086']
Red Rules #: 17625
SMT Solving time: 0.349549887
Gen Solving time: 0.353148689
SMT Solver calls: 114
General Solver calls: 187
# nrpcs = [1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 1, 0, 0, 1, 3, 2, 2, 0, 0, 0, 2, 0, 1, 0, 1, 2, 4, 2]
# post call args = 12
# func args = 16
# timeouts = 3
# branches = 5


Graph latex for: wheel-sieve1: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(wheel-sieve1)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.23, 63) (0.26, 4) (0.27, 3) (0.28, 3) (0.31, 22) (0.32, 1) (0.34, 1) (0.5, 26) (0.79, 6) (0.91, 1)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.23, 63) (0.33, 4) (0.34, 3) (0.35, 3) (0.38, 6) (0.49, 20) (0.57, 6) (0.72, 23)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


wheel-sieve2
Baseline:
hpc_exp = [('CallForHPC', '60', '6', '10', '0', '0'), ('Main2', '20', '31', '151', '4', '10')]
calculate hpc converage
[('CallForHPC', 60, 6, 10, '0', '0'), ('Main2', 20, 31, 151, '4', '10')]
[('Main2', 20, 31, 151, '4', '10')]
[('4', '10')]
Last time is: 0.991306957
hpc reached = 20.5
g2 reached = 143
total = 177
% reached = 80.8
last time = 0.991306957
all_times = ['(152,"Main2") - 0.216011455', '(90,"Main2") - 0.216011455', '(117,"Main2") - 0.216011455', '(159,"Main2") - 0.216011455', '(119,"Main2") - 0.216011455', '(109,"Main2") - 0.216011455', '(111,"Main2") - 0.216011455', '(141,"Main2") - 0.216011455', '(151,"Main2") - 0.216011455', '(176,"Main2") - 0.216011455', '(129,"Main2") - 0.216011455', '(112,"Main2") - 0.216011455', '(155,"Main2") - 0.216011455', '(170,"Main2") - 0.216011455', '(113,"Main2") - 0.216011455', '(122,"Main2") - 0.216011455', '(108,"Main2") - 0.216011455', '(157,"Main2") - 0.216011455', '(172,"Main2") - 0.216011455', '(128,"Main2") - 0.216011455', '(89,"Main2") - 0.216011455', '(110,"Main2") - 0.216011455', '(168,"Main2") - 0.216011455', '(77,"Main2") - 0.216011455', '(78,"Main2") - 0.216011455', '(107,"Main2") - 0.216011455', '(169,"Main2") - 0.216011455', '(79,"Main2") - 0.216011455', '(158,"Main2") - 0.216011455', '(156,"Main2") - 0.216011455', '(167,"Main2") - 0.216011455', '(153,"Main2") - 0.216011455', '(142,"Main2") - 0.216011455', '(162,"Main2") - 0.216011455', '(175,"Main2") - 0.216011455', '(171,"Main2") - 0.216011455', '(174,"Main2") - 0.216011455', '(81,"Main2") - 0.216011455', '(80,"Main2") - 0.216011455', '(120,"Main2") - 0.222188660', '(116,"Main2") - 0.318515394', '(173,"Main2") - 0.318515394', '(115,"Main2") - 0.318515394', '(96,"Main2") - 0.318515394', '(150,"Main2") - 0.318515394', '(146,"Main2") - 0.318515394', '(147,"Main2") - 0.318515394', '(148,"Main2") - 0.318515394', '(160,"Main2") - 0.318515394', '(145,"Main2") - 0.318515394', '(97,"Main2") - 0.318515394', '(114,"Main2") - 0.318515394', '(121,"Main2") - 0.318515394', '(149,"Main2") - 0.318515394', '(73,"Main2") - 0.391626715', '(74,"Main2") - 0.391626715', '(165,"Main2") - 0.391626715', '(94,"Main2") - 0.391626715', '(95,"Main2") - 0.391626715', '(75,"Main2") - 0.391626715', '(72,"Main2") - 0.391626715', '(71,"Main2") - 0.391626715', '(76,"Main2") - 0.391626715', '(164,"Main2") - 0.391626715', '(92,"Main2") - 0.509971646', '(166,"Main2") - 0.509971646', '(91,"Main2") - 0.509971646', '(93,"Main2") - 0.509971646', '(2,"Main2") - 0.591069858', '(68,"Main2") - 0.591069858', '(124,"Main2") - 0.591069858', '(3,"Main2") - 0.591069858', '(30,"Main2") - 0.591069858', '(126,"Main2") - 0.591069858', '(87,"Main2") - 0.591069858', '(17,"Main2") - 0.591069858', '(5,"Main2") - 0.591069858', '(56,"Main2") - 0.591069858', '(55,"Main2") - 0.591069858', '(86,"Main2") - 0.591069858', '(59,"Main2") - 0.591069858', '(85,"Main2") - 0.591069858', '(31,"Main2") - 0.591069858', '(14,"Main2") - 0.591069858', '(66,"Main2") - 0.591069858', '(20,"Main2") - 0.591069858', '(118,"Main2") - 0.591069858', '(69,"Main2") - 0.591069858', '(44,"Main2") - 0.591069858', '(53,"Main2") - 0.591069858', '(123,"Main2") - 0.591069858', '(52,"Main2") - 0.591069858', '(9,"Main2") - 0.591069858', '(46,"Main2") - 0.591069858', '(54,"Main2") - 0.591069858', '(105,"Main2") - 0.591069858', '(19,"Main2") - 0.591069858', '(57,"Main2") - 0.591069858', '(1,"Main2") - 0.591069858', '(4,"Main2") - 0.591069858', '(84,"Main2") - 0.591069858', '(65,"Main2") - 0.591069858', '(58,"Main2") - 0.591069858', '(26,"Main2") - 0.591069858', '(28,"Main2") - 0.591069858', '(67,"Main2") - 0.591069858', '(15,"Main2") - 0.591069858', '(36,"Main2") - 0.591069858', '(42,"Main2") - 0.591069858', '(10,"Main2") - 0.591069858', '(106,"Main2") - 0.591069858', '(51,"Main2") - 0.591069858', '(24,"Main2") - 0.591069858', '(32,"Main2") - 0.591069858', '(6,"Main2") - 0.591069858', '(37,"Main2") - 0.591069858', '(63,"Main2") - 0.591069858', '(98,"Main2") - 0.591069858', '(82,"Main2") - 0.591069858', '(45,"Main2") - 0.591069858', '(64,"Main2") - 0.591069858', '(23,"Main2") - 0.591069858', '(127,"Main2") - 0.591069858', '(125,"Main2") - 0.591069858', '(161,"Main2") - 0.591069858', '(88,"Main2") - 0.591069858', '(21,"Main2") - 0.591069858', '(61,"Main2") - 0.591069858', '(29,"Main2") - 0.591069858', '(18,"Main2") - 0.591069858', '(62,"Main2") - 0.591069858', '(70,"Main2") - 0.591069858', '(41,"Main2") - 0.591069858', '(16,"Main2") - 0.591069858', '(35,"Main2") - 0.591069858', '(99,"Main2") - 0.591069858', '(0,"Main2") - 0.591069858', '(7,"Main2") - 0.591069858', '(43,"Main2") - 0.591069858', '(103,"Main2") - 0.811872111', '(102,"Main2") - 0.811872111', '(25,"Main2") - 0.991306957', '(60,"Main2") - 0.991306957']
Red Rules #: 25887
SMT Solving time: 0.168480761
Gen Solving time: 0.170353108
SMT Solver calls: 77
General Solver calls: 107
# nrpcs = []
# post call args = 23
# func args = 0
# timeouts = 21
# branches = 14
NRPC:
hpc_exp = [('CallForHPC', '60', '6', '10', '0', '0'), ('Main2', '20', '31', '151', '4', '10')]
calculate hpc converage
[('CallForHPC', 60, 6, 10, '0', '0'), ('Main2', 20, 31, 151, '4', '10')]
[('Main2', 20, 31, 151, '4', '10')]
[('4', '10')]
Last time is: 0.886224238
hpc reached = 20.5
g2 reached = 143
total = 177
% reached = 80.8
last time = 0.886224238
all_times = ['(152,"Main2") - 0.216526383', '(90,"Main2") - 0.216526383', '(117,"Main2") - 0.216526383', '(159,"Main2") - 0.216526383', '(119,"Main2") - 0.216526383', '(109,"Main2") - 0.216526383', '(111,"Main2") - 0.216526383', '(141,"Main2") - 0.216526383', '(151,"Main2") - 0.216526383', '(176,"Main2") - 0.216526383', '(129,"Main2") - 0.216526383', '(112,"Main2") - 0.216526383', '(155,"Main2") - 0.216526383', '(170,"Main2") - 0.216526383', '(113,"Main2") - 0.216526383', '(122,"Main2") - 0.216526383', '(108,"Main2") - 0.216526383', '(157,"Main2") - 0.216526383', '(172,"Main2") - 0.216526383', '(128,"Main2") - 0.216526383', '(89,"Main2") - 0.216526383', '(110,"Main2") - 0.216526383', '(168,"Main2") - 0.216526383', '(77,"Main2") - 0.216526383', '(78,"Main2") - 0.216526383', '(107,"Main2") - 0.216526383', '(169,"Main2") - 0.216526383', '(79,"Main2") - 0.216526383', '(158,"Main2") - 0.216526383', '(156,"Main2") - 0.216526383', '(167,"Main2") - 0.216526383', '(153,"Main2") - 0.216526383', '(142,"Main2") - 0.216526383', '(162,"Main2") - 0.216526383', '(175,"Main2") - 0.216526383', '(171,"Main2") - 0.216526383', '(174,"Main2") - 0.216526383', '(81,"Main2") - 0.216526383', '(80,"Main2") - 0.216526383', '(120,"Main2") - 0.221617250', '(116,"Main2") - 0.250816472', '(173,"Main2") - 0.250816472', '(115,"Main2") - 0.250816472', '(96,"Main2") - 0.250816472', '(150,"Main2") - 0.250816472', '(146,"Main2") - 0.250816472', '(147,"Main2") - 0.250816472', '(148,"Main2") - 0.250816472', '(160,"Main2") - 0.250816472', '(145,"Main2") - 0.250816472', '(97,"Main2") - 0.250816472', '(114,"Main2") - 0.250816472', '(121,"Main2") - 0.250816472', '(149,"Main2") - 0.250816472', '(73,"Main2") - 0.278160413', '(74,"Main2") - 0.278160413', '(165,"Main2") - 0.278160413', '(94,"Main2") - 0.278160413', '(95,"Main2") - 0.278160413', '(75,"Main2") - 0.278160413', '(72,"Main2") - 0.278160413', '(71,"Main2") - 0.278160413', '(76,"Main2") - 0.278160413', '(164,"Main2") - 0.278160413', '(92,"Main2") - 0.470373604', '(166,"Main2") - 0.470373604', '(91,"Main2") - 0.470373604', '(93,"Main2") - 0.470373604', '(2,"Main2") - 0.499217644', '(68,"Main2") - 0.499217644', '(3,"Main2") - 0.499217644', '(30,"Main2") - 0.499217644', '(126,"Main2") - 0.499217644', '(87,"Main2") - 0.499217644', '(17,"Main2") - 0.499217644', '(5,"Main2") - 0.499217644', '(56,"Main2") - 0.499217644', '(55,"Main2") - 0.499217644', '(86,"Main2") - 0.499217644', '(59,"Main2") - 0.499217644', '(85,"Main2") - 0.499217644', '(31,"Main2") - 0.499217644', '(14,"Main2") - 0.499217644', '(66,"Main2") - 0.499217644', '(20,"Main2") - 0.499217644', '(118,"Main2") - 0.499217644', '(69,"Main2") - 0.499217644', '(44,"Main2") - 0.499217644', '(53,"Main2") - 0.499217644', '(52,"Main2") - 0.499217644', '(9,"Main2") - 0.499217644', '(46,"Main2") - 0.499217644', '(54,"Main2") - 0.499217644', '(105,"Main2") - 0.499217644', '(19,"Main2") - 0.499217644', '(57,"Main2") - 0.499217644', '(1,"Main2") - 0.499217644', '(4,"Main2") - 0.499217644', '(84,"Main2") - 0.499217644', '(65,"Main2") - 0.499217644', '(58,"Main2") - 0.499217644', '(26,"Main2") - 0.499217644', '(28,"Main2") - 0.499217644', '(67,"Main2") - 0.499217644', '(15,"Main2") - 0.499217644', '(36,"Main2") - 0.499217644', '(42,"Main2") - 0.499217644', '(10,"Main2") - 0.499217644', '(106,"Main2") - 0.499217644', '(51,"Main2") - 0.499217644', '(24,"Main2") - 0.499217644', '(32,"Main2") - 0.499217644', '(6,"Main2") - 0.499217644', '(37,"Main2") - 0.499217644', '(63,"Main2") - 0.499217644', '(98,"Main2") - 0.499217644', '(82,"Main2") - 0.499217644', '(45,"Main2") - 0.499217644', '(64,"Main2") - 0.499217644', '(23,"Main2") - 0.499217644', '(127,"Main2") - 0.499217644', '(161,"Main2") - 0.499217644', '(88,"Main2") - 0.499217644', '(21,"Main2") - 0.499217644', '(61,"Main2") - 0.499217644', '(29,"Main2") - 0.499217644', '(18,"Main2") - 0.499217644', '(62,"Main2") - 0.499217644', '(70,"Main2") - 0.499217644', '(41,"Main2") - 0.499217644', '(16,"Main2") - 0.499217644', '(35,"Main2") - 0.499217644', '(99,"Main2") - 0.499217644', '(0,"Main2") - 0.499217644', '(7,"Main2") - 0.499217644', '(43,"Main2") - 0.499217644', '(124,"Main2") - 0.552668284', '(123,"Main2") - 0.552668284', '(125,"Main2") - 0.552668284', '(103,"Main2") - 0.721968839', '(102,"Main2") - 0.721968839', '(25,"Main2") - 0.886224238', '(60,"Main2") - 0.886224238']
Red Rules #: 23340
SMT Solving time: 0.118698259
Gen Solving time: 0.120346902
SMT Solver calls: 53
General Solver calls: 106
# nrpcs = [0, 0, 0, 0, 0, 1, 2, 2, 1, 3, 1, 1, 1, 1, 3, 3, 2, 4, 2, 2, 4, 4]
# post call args = 10
# func args = 12
# timeouts = 20
# branches = 14


Graph latex for: wheel-sieve2: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(wheel-sieve2)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.22, 40) (0.32, 14) (0.39, 10) (0.51, 4) (0.59, 71) (0.81, 2) (0.99, 2)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.22, 40) (0.25, 14) (0.28, 10) (0.47, 4) (0.5, 68) (0.55, 3) (0.72, 2) (0.89, 2)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


x2n1
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '32', '0', '0')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 32, '0', '0')]
[('Main2', 0, 0, 32, '0', '0')]
[('0', '0')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 35
% reached = 0.0
last time = 
all_times = []
Red Rules #: 3179
SMT Solving time: 0.912083988
Gen Solving time: 0.912392611
SMT Solver calls: 9
General Solver calls: 15
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 0
NRPC:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '32', '0', '0')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 32, '0', '0')]
[('Main2', 0, 0, 32, '0', '0')]
[('0', '0')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 35
% reached = 0.0
last time = 
all_times = []
Red Rules #: 3165
SMT Solving time: 0.912863753
Gen Solving time: 0.91317191
SMT Solver calls: 9
General Solver calls: 15
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 0


Graph latex for: x2n1: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(x2n1)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0, 0)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| Benchmark    |   #Total Ticks |   B HPC cov % |   B cov % |   B last time |   N HPC cov % |   N cov % |   N last time | Pos 1-sec B/N   | Pos 3-sec B/N   | Pos 5-sec B/N   | Diff tick 1s   | Diff tick 3s   | Diff tick 5s   |   Avg # Nrpcs |   # Branches |
+==============+================+===============+===========+===============+===============+===========+===============+=================+=================+=================+================+================+================+===============+==============+
| bernouilli   |             96 |          12.9 |      15.6 |           0.3 |          80   |      79.2 |           0.7 | 0/0             | 0/0             | 0/0             | 0/61           | 0/61           | 0/61           |          0.29 |            8 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| digits-of-e1 |            118 |          75.2 |      77.1 |           0.4 |          69.7 |      83.1 |           1   | 0/0             | 0/0             | 0/0             | 0/7            | 0/7            | 0/7            |          3.7  |            5 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| digits-of-e2 |             87 |          98.7 |     100   |           0.9 |          92.3 |      93.1 |           1   | 0/0             | 0/0             | 0/0             | 6/0            | 6/0            | 6/0            |          2.24 |            4 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| exp3_8       |             55 |          89.4 |      90.9 |           1   |          38.3 |      87.3 |           0.6 | 0/0             | 0/0             | 0/0             | 2/0            | 2/0            | 2/0            |          2.52 |           13 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| gen_regexps  |            128 |          50   |      53.9 |           0.8 |          50   |      53.9 |           0.8 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0.67 |           11 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| integrate    |            143 |           3.6 |       4.9 |           0.2 |          69.1 |      44.1 |           0.3 | 0/0             | 0/0             | 0/0             | 0/56           | 0/56           | 0/56           |          0.46 |            0 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| paraffins    |            264 |          36.2 |      44.3 |           0.9 |          78.5 |      44.3 |           0.9 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0.94 |           20 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| primes       |             29 |         100   |     100   |           0.3 |         100   |     100   |           0.3 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0.44 |            0 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| queens       |             95 |          29.2 |      32.6 |           0.8 |          49.4 |      89.5 |           0.8 | 0/0             | 0/0             | 0/0             | 0/54           | 0/54           | 0/54           |          2.12 |            6 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| rfib         |             25 |          52.4 |     100   |           0.8 |          52.4 |     100   |           0.4 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          1    |            3 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| tak          |             41 |          37.8 |      41.5 |           0.2 |          37.8 |     100   |           0.6 | 0/0             | 0/0             | 0/0             | 0/24           | 0/24           | 0/24           |          4.24 |            3 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| wheel-sieve1 |            131 |          76.3 |      99.2 |           0.9 |          76.3 |      97.7 |           0.7 | 0/0             | 0/0             | 0/0             | 2/0            | 2/0            | 2/0            |          0.93 |            5 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| wheel-sieve2 |            177 |          20.5 |      80.8 |           1   |          20.5 |      80.8 |           0.9 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          1.68 |           14 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| x2n1         |             35 |           0   |       0   |           0   |           0   |       0   |           0   | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |            0 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+


['boyer', 'boyer2', 'calendar', 'cichelli', 'circsim', 'clausify', 'constraints', 'cryptarithm1', 'cse', 'eliza', 'expert', 'gcd', 'integer', 'lcss', 'life', 'mandel2', 'multiplier', 'power', 'primetest', 'scc', 'rewrite', 'sphere', 'treejoin']
boyer
Baseline:
hpc_exp = [('CallForHPC', '90', '86', '95', '0', '10'), ('Main2', '1', '18', '1152', '10', '35')]
calculate hpc converage
[('CallForHPC', 90, 86, 95, '0', '10'), ('Main2', 1, 18, 1152, '10', '35')]
[('Main2', 1, 18, 1152, '10', '35')]
[('10', '35')]
Last time is: 0.286908266
hpc reached = 1.6
g2 reached = 25
total = 1017
% reached = 2.5
last time = 0.286908266
all_times = ['(1217,"Main2") - 0.224749754', '(1218,"Main2") - 0.224749754', '(1211,"Main2") - 0.224749754', '(14,"Main2") - 0.224749754', '(1220,"Main2") - 0.224749754', '(1226,"Main2") - 0.224749754', '(1216,"Main2") - 0.224749754', '(1219,"Main2") - 0.224749754', '(1221,"Main2") - 0.224749754', '(187,"Main2") - 0.224749754', '(1207,"Main2") - 0.224749754', '(1225,"Main2") - 0.224749754', '(15,"Main2") - 0.224749754', '(12,"Main2") - 0.224749754', '(1212,"Main2") - 0.224749754', '(1227,"Main2") - 0.224749754', '(186,"Main2") - 0.224749754', '(1224,"Main2") - 0.224749754', '(61,"Main2") - 0.224749754', '(1222,"Main2") - 0.224749754', '(1223,"Main2") - 0.224749754', '(181,"Main2") - 0.224749754', '(1213,"Main2") - 0.224749754', '(184,"Main2") - 0.286908266', '(11,"Main2") - 0.286908266']
Red Rules #: 28721
SMT Solving time: 0.157391491
Gen Solving time: 0.15870279
SMT Solver calls: 60
General Solver calls: 70
# nrpcs = []
# post call args = 11
# func args = 0
# timeouts = 0
# branches = 45
NRPC:
hpc_exp = [('CallForHPC', '97', '220', '226', '0', '14'), ('Main2', '37', '433', '1152', '10', '35')]
calculate hpc converage
[('CallForHPC', 97, 220, 226, '0', '14'), ('Main2', 37, 433, 1152, '10', '35')]
[('Main2', 37, 433, 1152, '10', '35')]
[('10', '35')]
Last time is: 0.248241843
hpc reached = 37.6
g2 reached = 25
total = 1017
% reached = 2.5
last time = 0.248241843
all_times = ['(1217,"Main2") - 0.228949096', '(1218,"Main2") - 0.228949096', '(1211,"Main2") - 0.228949096', '(14,"Main2") - 0.228949096', '(1220,"Main2") - 0.228949096', '(1226,"Main2") - 0.228949096', '(1216,"Main2") - 0.228949096', '(1219,"Main2") - 0.228949096', '(1221,"Main2") - 0.228949096', '(187,"Main2") - 0.228949096', '(1207,"Main2") - 0.228949096', '(1225,"Main2") - 0.228949096', '(15,"Main2") - 0.228949096', '(12,"Main2") - 0.228949096', '(1212,"Main2") - 0.228949096', '(1227,"Main2") - 0.228949096', '(186,"Main2") - 0.228949096', '(1224,"Main2") - 0.228949096', '(61,"Main2") - 0.228949096', '(1222,"Main2") - 0.228949096', '(1223,"Main2") - 0.228949096', '(181,"Main2") - 0.228949096', '(1213,"Main2") - 0.228949096', '(184,"Main2") - 0.248241843', '(11,"Main2") - 0.248241843']
Red Rules #: 24346
SMT Solving time: 0.14097208
Gen Solving time: 0.142757851
SMT Solver calls: 50
General Solver calls: 245
# nrpcs = [2, 0, 0, 0, 0, 1, 1, 3, 2, 4, 3, 1, 5, 2, 6, 2, 7, 4, 3, 4, 4, 5, 5, 6]
# post call args = 7
# func args = 17
# timeouts = 0
# branches = 45


Graph latex for: boyer: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(boyer)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.22, 23) (0.29, 2)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.23, 23) (0.25, 2)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


boyer2
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Checker', '0', '0', '98', '6', '22'), ('Lisplikefns', '0', '0', '196', '14', '38'), ('Main2', '0', '0', '83', '2', '10'), ('Rewritefns', '0', '0', '133', '8', '26'), ('Rulebasetext', '0', '0', '107', '0', '0')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Checker', 0, 0, 98, '6', '22'), ('Lisplikefns', 0, 0, 196, '14', '38'), ('Main2', 0, 0, 83, '2', '10'), ('Rewritefns', 0, 0, 133, '8', '26'), ('Rulebasetext', 0, 0, 107, '0', '0')]
[('Checker', 0, 0, 98, '6', '22'), ('Lisplikefns', 0, 0, 196, '14', '38'), ('Main2', 0, 0, 83, '2', '10'), ('Rewritefns', 0, 0, 133, '8', '26'), ('Rulebasetext', 0, 0, 107, '0', '0')]
[('6', '22'), ('14', '38'), ('2', '10'), ('8', '26'), ('0', '0')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 709
% reached = 0.0
last time = 
all_times = []
Red Rules #: 46520
SMT Solving time: 0.0
Gen Solving time: 0.0
SMT Solver calls: 0
General Solver calls: 0
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 126
NRPC:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Checker', '0', '0', '98', '6', '22'), ('Lisplikefns', '0', '0', '196', '14', '38'), ('Main2', '0', '0', '83', '2', '10'), ('Rewritefns', '0', '0', '133', '8', '26'), ('Rulebasetext', '0', '0', '107', '0', '0')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Checker', 0, 0, 98, '6', '22'), ('Lisplikefns', 0, 0, 196, '14', '38'), ('Main2', 0, 0, 83, '2', '10'), ('Rewritefns', 0, 0, 133, '8', '26'), ('Rulebasetext', 0, 0, 107, '0', '0')]
[('Checker', 0, 0, 98, '6', '22'), ('Lisplikefns', 0, 0, 196, '14', '38'), ('Main2', 0, 0, 83, '2', '10'), ('Rewritefns', 0, 0, 133, '8', '26'), ('Rulebasetext', 0, 0, 107, '0', '0')]
[('6', '22'), ('14', '38'), ('2', '10'), ('8', '26'), ('0', '0')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 709
% reached = 0.0
last time = 
all_times = []
Red Rules #: 41251
SMT Solving time: 0.0
Gen Solving time: 0.0
SMT Solver calls: 0
General Solver calls: 0
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 126


Graph latex for: boyer2: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(boyer2)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0, 0)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


calendar
Baseline:
hpc_exp = [('CallForHPC', '54', '30', '55', '0', '0'), ('Main2', '3', '11', '360', '7', '10')]
calculate hpc converage
[('CallForHPC', 54, 30, 55, '0', '0'), ('Main2', 3, 11, 360, '7', '10')]
[('Main2', 3, 11, 360, '7', '10')]
[('7', '10')]
Last time is: 0.661477519
hpc reached = 3.1
g2 reached = 18
total = 315
% reached = 5.7
last time = 0.661477519
all_times = ['(321,"Main2") - 0.276023946', '(332,"Main2") - 0.276023946', '(315,"Main2") - 0.276023946', '(320,"Main2") - 0.276023946', '(333,"Main2") - 0.276023946', '(304,"Main2") - 0.276023946', '(329,"Main2") - 0.276023946', '(319,"Main2") - 0.276023946', '(328,"Main2") - 0.276023946', '(310,"Main2") - 0.276023946', '(316,"Main2") - 0.276023946', '(317,"Main2") - 0.276023946', '(311,"Main2") - 0.276023946', '(303,"Main2") - 0.276023946', '(302,"Main2") - 0.629712678', '(312,"Main2") - 0.661477519', '(314,"Main2") - 0.661477519', '(313,"Main2") - 0.661477519']
Red Rules #: 12604
SMT Solving time: 0.434230054
Gen Solving time: 0.437457505
SMT Solver calls: 84
General Solver calls: 119
# nrpcs = []
# post call args = 5
# func args = 0
# timeouts = 0
# branches = 17
NRPC:
hpc_exp = [('CallForHPC', '43', '80', '184', '0', '6'), ('Main2', '3', '11', '360', '7', '10')]
calculate hpc converage
[('CallForHPC', 43, 80, 184, '0', '6'), ('Main2', 3, 11, 360, '7', '10')]
[('Main2', 3, 11, 360, '7', '10')]
[('7', '10')]
Last time is: 0.478838292
hpc reached = 3.1
g2 reached = 75
total = 315
% reached = 23.8
last time = 0.478838292
all_times = ['(321,"Main2") - 0.276685073', '(332,"Main2") - 0.276685073', '(315,"Main2") - 0.276685073', '(320,"Main2") - 0.276685073', '(333,"Main2") - 0.276685073', '(304,"Main2") - 0.276685073', '(329,"Main2") - 0.276685073', '(319,"Main2") - 0.276685073', '(328,"Main2") - 0.276685073', '(310,"Main2") - 0.276685073', '(316,"Main2") - 0.276685073', '(317,"Main2") - 0.276685073', '(311,"Main2") - 0.276685073', '(303,"Main2") - 0.276685073', '(301,"Main2") - 0.458133676', '(3,"Main2") - 0.458133676', '(331,"Main2") - 0.458133676', '(17,"Main2") - 0.458133676', '(275,"Main2") - 0.458133676', '(5,"Main2") - 0.458133676', '(306,"Main2") - 0.458133676', '(283,"Main2") - 0.458133676', '(14,"Main2") - 0.458133676', '(282,"Main2") - 0.458133676', '(302,"Main2") - 0.458133676', '(13,"Main2") - 0.458133676', '(318,"Main2") - 0.458133676', '(287,"Main2") - 0.458133676', '(281,"Main2") - 0.458133676', '(272,"Main2") - 0.458133676', '(300,"Main2") - 0.458133676', '(9,"Main2") - 0.458133676', '(189,"Main2") - 0.458133676', '(19,"Main2") - 0.458133676', '(308,"Main2") - 0.458133676', '(324,"Main2") - 0.458133676', '(274,"Main2") - 0.458133676', '(312,"Main2") - 0.458133676', '(27,"Main2") - 0.458133676', '(4,"Main2") - 0.458133676', '(309,"Main2") - 0.458133676', '(26,"Main2") - 0.458133676', '(273,"Main2") - 0.458133676', '(299,"Main2") - 0.458133676', '(15,"Main2") - 0.458133676', '(12,"Main2") - 0.458133676', '(10,"Main2") - 0.458133676', '(298,"Main2") - 0.458133676', '(314,"Main2") - 0.458133676', '(325,"Main2") - 0.458133676', '(280,"Main2") - 0.458133676', '(322,"Main2") - 0.458133676', '(8,"Main2") - 0.458133676', '(18,"Main2") - 0.458133676', '(188,"Main2") - 0.458133676', '(305,"Main2") - 0.458133676', '(288,"Main2") - 0.458133676', '(326,"Main2") - 0.458133676', '(271,"Main2") - 0.458133676', '(16,"Main2") - 0.458133676', '(313,"Main2") - 0.458133676', '(0,"Main2") - 0.458133676', '(295,"Main2") - 0.458133676', '(327,"Main2") - 0.458133676', '(7,"Main2") - 0.458133676', '(11,"Main2") - 0.458133676', '(286,"Main2") - 0.458133676', '(296,"Main2") - 0.466162059', '(291,"Main2") - 0.478838292', '(292,"Main2") - 0.478838292', '(294,"Main2") - 0.478838292', '(297,"Main2") - 0.478838292', '(289,"Main2") - 0.478838292', '(290,"Main2") - 0.478838292', '(293,"Main2") - 0.478838292']
Red Rules #: 10992
SMT Solving time: 0.413997877
Gen Solving time: 0.418830156
SMT Solver calls: 90
General Solver calls: 106
# nrpcs = [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1]
# post call args = 5
# func args = 9
# timeouts = 0
# branches = 17


Graph latex for: calendar: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(calendar)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.28, 14) (0.63, 1) (0.66, 3)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.28, 14) (0.46, 53) (0.47, 1) (0.48, 7)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


cichelli
Baseline:
hpc_exp = [('Auxil', '0', '0', '188', '7', '22'), ('CallForHPC', '66', '2', '3', '0', '0'), ('Key', '0', '0', '23', '0', '0'), ('Main2', '0', '0', '3', '0', '0'), ('Prog', '0', '0', '185', '1', '20')]
calculate hpc converage
[('Auxil', 0, 0, 188, '7', '22'), ('CallForHPC', 66, 2, 3, '0', '0'), ('Key', 0, 0, 23, '0', '0'), ('Main2', 0, 0, 3, '0', '0'), ('Prog', 0, 0, 185, '1', '20')]
[('Auxil', 0, 0, 188, '7', '22'), ('Key', 0, 0, 23, '0', '0'), ('Main2', 0, 0, 3, '0', '0'), ('Prog', 0, 0, 185, '1', '20')]
[('7', '22'), ('0', '0'), ('0', '0'), ('1', '20')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 436
% reached = 0.0
last time = 
all_times = []
Red Rules #: 35569
SMT Solving time: 0.04129614
Gen Solving time: 0.043038632
SMT Solver calls: 16
General Solver calls: 218
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 50
NRPC:
hpc_exp = [('Auxil', '85', '160', '188', '7', '22'), ('CallForHPC', '98', '154', '157', '0', '8'), ('Key', '100', '23', '23', '0', '0'), ('Main2', '100', '3', '3', '0', '0'), ('Prog', '65', '121', '185', '1', '20')]
calculate hpc converage
[('Auxil', 85, 160, 188, '7', '22'), ('CallForHPC', 98, 154, 157, '0', '8'), ('Key', 100, 23, 23, '0', '0'), ('Main2', 100, 3, 3, '0', '0'), ('Prog', 65, 121, 185, '1', '20')]
[('Auxil', 85, 160, 188, '7', '22'), ('Key', 100, 23, 23, '0', '0'), ('Main2', 100, 3, 3, '0', '0'), ('Prog', 65, 121, 185, '1', '20')]
[('7', '22'), ('0', '0'), ('0', '0'), ('1', '20')]
Last time is: 0.381428098
hpc reached = 76.9
g2 reached = 126
total = 436
% reached = 28.9
last time = 0.381428098
all_times = ['(117,"Prog") - 0.238541249', '(132,"Prog") - 0.238541249', '(2,"Main2") - 0.238541249', '(50,"Prog") - 0.238541249', '(3,"Main2") - 0.238541249', '(134,"Prog") - 0.238541249', '(130,"Prog") - 0.238541249', '(22,"Key") - 0.238541249', '(131,"Prog") - 0.238541249', '(224,"Auxil") - 0.238541249', '(46,"Prog") - 0.238541249', '(49,"Prog") - 0.238541249', '(0,"Auxil") - 0.238541249', '(135,"Prog") - 0.238541249', '(179,"Prog") - 0.238541249', '(129,"Prog") - 0.238541249', '(126,"Prog") - 0.238541249', '(51,"Prog") - 0.238541249', '(2,"Auxil") - 0.238541249', '(89,"Auxil") - 0.238541249', '(141,"Prog") - 0.238541249', '(226,"Auxil") - 0.238541249', '(137,"Prog") - 0.238541249', '(92,"Auxil") - 0.238541249', '(90,"Auxil") - 0.238541249', '(45,"Prog") - 0.238541249', '(110,"Prog") - 0.238541249', '(217,"Auxil") - 0.238541249', '(152,"Auxil") - 0.238541249', '(125,"Prog") - 0.238541249', '(93,"Auxil") - 0.238541249', '(127,"Prog") - 0.238541249', '(227,"Auxil") - 0.238541249', '(118,"Prog") - 0.238541249', '(111,"Prog") - 0.238541249', '(1,"Auxil") - 0.238541249', '(139,"Prog") - 0.238541249', '(223,"Auxil") - 0.238541249', '(133,"Prog") - 0.238541249', '(119,"Prog") - 0.238541249', '(23,"Key") - 0.238541249', '(180,"Prog") - 0.238541249', '(140,"Prog") - 0.238541249', '(116,"Prog") - 0.238541249', '(140,"Auxil") - 0.238541249', '(0,"Main2") - 0.238541249', '(91,"Auxil") - 0.238541249', '(136,"Prog") - 0.238541249', '(128,"Prog") - 0.238541249', '(115,"Prog") - 0.244275425', '(44,"Prog") - 0.244275425', '(48,"Prog") - 0.244275425', '(112,"Prog") - 0.246680345', '(113,"Prog") - 0.248397344', '(114,"Prog") - 0.250079271', '(84,"Auxil") - 0.268641845', '(144,"Auxil") - 0.268641845', '(150,"Auxil") - 0.268641845', '(43,"Prog") - 0.268641845', '(147,"Auxil") - 0.268641845', '(141,"Auxil") - 0.268641845', '(142,"Auxil") - 0.268641845', '(148,"Auxil") - 0.268641845', '(83,"Auxil") - 0.268641845', '(149,"Auxil") - 0.268641845', '(145,"Auxil") - 0.268641845', '(151,"Auxil") - 0.268641845', '(0,"Key") - 0.268641845', '(143,"Auxil") - 0.268641845', '(52,"Auxil") - 0.357541751', '(62,"Auxil") - 0.357541751', '(34,"Prog") - 0.357541751', '(43,"Auxil") - 0.357541751', '(167,"Auxil") - 0.357541751', '(87,"Auxil") - 0.357541751', '(39,"Auxil") - 0.357541751', '(85,"Auxil") - 0.357541751', '(42,"Prog") - 0.357541751', '(108,"Prog") - 0.357541751', '(163,"Auxil") - 0.357541751', '(51,"Auxil") - 0.357541751', '(29,"Prog") - 0.357541751', '(80,"Auxil") - 0.357541751', '(41,"Prog") - 0.357541751', '(66,"Auxil") - 0.357541751', '(58,"Auxil") - 0.357541751', '(88,"Auxil") - 0.357541751', '(86,"Auxil") - 0.357541751', '(30,"Auxil") - 0.357541751', '(38,"Auxil") - 0.357541751', '(47,"Prog") - 0.357541751', '(60,"Auxil") - 0.357541751', '(59,"Auxil") - 0.357541751', '(173,"Auxil") - 0.357541751', '(31,"Prog") - 0.357541751', '(61,"Auxil") - 0.357541751', '(50,"Auxil") - 0.357541751', '(81,"Auxil") - 0.357541751', '(164,"Auxil") - 0.357541751', '(64,"Auxil") - 0.357541751', '(49,"Auxil") - 0.357541751', '(27,"Prog") - 0.357541751', '(28,"Prog") - 0.357541751', '(109,"Prog") - 0.357541751', '(172,"Auxil") - 0.357541751', '(30,"Prog") - 0.357541751', '(33,"Prog") - 0.357541751', '(32,"Prog") - 0.357541751', '(69,"Auxil") - 0.357541751', '(25,"Prog") - 0.357541751', '(168,"Auxil") - 0.357541751', '(166,"Auxil") - 0.357541751', '(156,"Auxil") - 0.372704060', '(161,"Auxil") - 0.372704060', '(160,"Auxil") - 0.372704060', '(162,"Auxil") - 0.372704060', '(157,"Auxil") - 0.372704060', '(165,"Auxil") - 0.372704060', '(154,"Auxil") - 0.372704060', '(153,"Auxil") - 0.372704060', '(155,"Auxil") - 0.381428098', '(170,"Auxil") - 0.381428098', '(26,"Prog") - 0.381428098', '(171,"Auxil") - 0.381428098', '(159,"Auxil") - 0.381428098', '(158,"Auxil") - 0.381428098']
Red Rules #: 25840
SMT Solving time: 0.077949515
Gen Solving time: 0.080337239
SMT Solver calls: 36
General Solver calls: 399
# nrpcs = [1, 4, 1, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 7, 1, 3, 1, 1, 4, 1, 3, 4, 1, 3, 1, 2, 4]
# post call args = 7
# func args = 24
# timeouts = 12
# branches = 50


Graph latex for: cichelli: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(cichelli)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.24, 52) (0.25, 3) (0.27, 14) (0.36, 43) (0.37, 8) (0.38, 6)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


circsim
Baseline:
hpc_exp = [('CallForHPC', '64', '11', '17', '0', '0'), ('Main2', '4', '41', '1016', '16', '50')]
calculate hpc converage
[('CallForHPC', 64, 11, 17, '0', '0'), ('Main2', 4, 41, 1016, '16', '50')]
[('Main2', 4, 41, 1016, '16', '50')]
[('16', '50')]
Last time is: 0.682592326
hpc reached = 4.0
g2 reached = 53
total = 1015
% reached = 5.2
last time = 0.682592326
all_times = ['(791,"Main2") - 0.682592326', '(198,"Main2") - 0.682592326', '(1053,"Main2") - 0.682592326', '(244,"Main2") - 0.682592326', '(197,"Main2") - 0.682592326', '(1077,"Main2") - 0.682592326', '(205,"Main2") - 0.682592326', '(195,"Main2") - 0.682592326', '(1049,"Main2") - 0.682592326', '(245,"Main2") - 0.682592326', '(204,"Main2") - 0.682592326', '(1081,"Main2") - 0.682592326', '(1070,"Main2") - 0.682592326', '(799,"Main2") - 0.682592326', '(193,"Main2") - 0.682592326', '(1080,"Main2") - 0.682592326', '(1068,"Main2") - 0.682592326', '(1030,"Main2") - 0.682592326', '(1047,"Main2") - 0.682592326', '(242,"Main2") - 0.682592326', '(1050,"Main2") - 0.682592326', '(1073,"Main2") - 0.682592326', '(196,"Main2") - 0.682592326', '(1083,"Main2") - 0.682592326', '(1046,"Main2") - 0.682592326', '(1067,"Main2") - 0.682592326', '(1051,"Main2") - 0.682592326', '(206,"Main2") - 0.682592326', '(1069,"Main2") - 0.682592326', '(194,"Main2") - 0.682592326', '(1082,"Main2") - 0.682592326', '(1078,"Main2") - 0.682592326', '(1054,"Main2") - 0.682592326', '(1065,"Main2") - 0.682592326', '(608,"Main2") - 0.682592326', '(1071,"Main2") - 0.682592326', '(1048,"Main2") - 0.682592326', '(1031,"Main2") - 0.682592326', '(798,"Main2") - 0.682592326', '(1076,"Main2") - 0.682592326', '(1056,"Main2") - 0.682592326', '(1037,"Main2") - 0.682592326', '(1057,"Main2") - 0.682592326', '(1055,"Main2") - 0.682592326', '(1072,"Main2") - 0.682592326', '(607,"Main2") - 0.682592326', '(1041,"Main2") - 0.682592326', '(609,"Main2") - 0.682592326', '(1075,"Main2") - 0.682592326', '(1042,"Main2") - 0.682592326', '(1028,"Main2") - 0.682592326', '(1045,"Main2") - 0.682592326', '(192,"Main2") - 0.682592326']
Red Rules #: 9902
SMT Solving time: 0.165725754
Gen Solving time: 0.166851619
SMT Solver calls: 47
General Solver calls: 56
# nrpcs = []
# post call args = 3
# func args = 0
# timeouts = 0
# branches = 66
NRPC:
hpc_exp = [('CallForHPC', '64', '11', '17', '0', '0'), ('Main2', '4', '41', '1016', '16', '50')]
calculate hpc converage
[('CallForHPC', 64, 11, 17, '0', '0'), ('Main2', 4, 41, 1016, '16', '50')]
[('Main2', 4, 41, 1016, '16', '50')]
[('16', '50')]
Last time is: 0.692524066
hpc reached = 4.0
g2 reached = 53
total = 1015
% reached = 5.2
last time = 0.692524066
all_times = ['(791,"Main2") - 0.692524066', '(198,"Main2") - 0.692524066', '(1053,"Main2") - 0.692524066', '(244,"Main2") - 0.692524066', '(197,"Main2") - 0.692524066', '(1077,"Main2") - 0.692524066', '(205,"Main2") - 0.692524066', '(195,"Main2") - 0.692524066', '(1049,"Main2") - 0.692524066', '(245,"Main2") - 0.692524066', '(204,"Main2") - 0.692524066', '(1081,"Main2") - 0.692524066', '(1070,"Main2") - 0.692524066', '(799,"Main2") - 0.692524066', '(193,"Main2") - 0.692524066', '(1080,"Main2") - 0.692524066', '(1068,"Main2") - 0.692524066', '(1030,"Main2") - 0.692524066', '(1047,"Main2") - 0.692524066', '(242,"Main2") - 0.692524066', '(1050,"Main2") - 0.692524066', '(1073,"Main2") - 0.692524066', '(196,"Main2") - 0.692524066', '(1083,"Main2") - 0.692524066', '(1046,"Main2") - 0.692524066', '(1067,"Main2") - 0.692524066', '(1051,"Main2") - 0.692524066', '(206,"Main2") - 0.692524066', '(1069,"Main2") - 0.692524066', '(194,"Main2") - 0.692524066', '(1082,"Main2") - 0.692524066', '(1078,"Main2") - 0.692524066', '(1054,"Main2") - 0.692524066', '(1065,"Main2") - 0.692524066', '(608,"Main2") - 0.692524066', '(1071,"Main2") - 0.692524066', '(1048,"Main2") - 0.692524066', '(1031,"Main2") - 0.692524066', '(798,"Main2") - 0.692524066', '(1076,"Main2") - 0.692524066', '(1056,"Main2") - 0.692524066', '(1037,"Main2") - 0.692524066', '(1057,"Main2") - 0.692524066', '(1055,"Main2") - 0.692524066', '(1072,"Main2") - 0.692524066', '(607,"Main2") - 0.692524066', '(1041,"Main2") - 0.692524066', '(609,"Main2") - 0.692524066', '(1075,"Main2") - 0.692524066', '(1042,"Main2") - 0.692524066', '(1028,"Main2") - 0.692524066', '(1045,"Main2") - 0.692524066', '(192,"Main2") - 0.692524066']
Red Rules #: 9466
SMT Solving time: 0.162767186
Gen Solving time: 0.163904141
SMT Solver calls: 46
General Solver calls: 55
# nrpcs = [0, 0]
# post call args = 2
# func args = 0
# timeouts = 0
# branches = 66


Graph latex for: circsim: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(circsim)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.68, 53)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.69, 53)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


clausify
Baseline:
hpc_exp = []
calculate hpc converage
[]
[]
[]
Last time is: 0.586345142
hpc reached = 0
g2 reached = 123
total = 369
% reached = 33.3
last time = 0.586345142
all_times = ['(368,"Main2") - 0.352571338', '(362,"Main2") - 0.352571338', '(363,"Main2") - 0.352571338', '(354,"Main2") - 0.352571338', '(358,"Main2") - 0.352571338', '(367,"Main2") - 0.352571338', '(366,"Main2") - 0.352571338', '(361,"Main2") - 0.352571338', '(364,"Main2") - 0.352571338', '(357,"Main2") - 0.352571338', '(339,"Main2") - 0.425933378', '(321,"Main2") - 0.425933378', '(349,"Main2") - 0.425933378', '(342,"Main2") - 0.425933378', '(332,"Main2") - 0.425933378', '(30,"Main2") - 0.425933378', '(320,"Main2") - 0.425933378', '(356,"Main2") - 0.425933378', '(331,"Main2") - 0.425933378', '(330,"Main2") - 0.425933378', '(359,"Main2") - 0.425933378', '(22,"Main2") - 0.425933378', '(343,"Main2") - 0.425933378', '(31,"Main2") - 0.425933378', '(319,"Main2") - 0.425933378', '(318,"Main2") - 0.425933378', '(360,"Main2") - 0.425933378', '(335,"Main2") - 0.425933378', '(312,"Main2") - 0.425933378', '(34,"Main2") - 0.425933378', '(336,"Main2") - 0.425933378', '(28,"Main2") - 0.425933378', '(341,"Main2") - 0.425933378', '(348,"Main2") - 0.425933378', '(350,"Main2") - 0.425933378', '(347,"Main2") - 0.425933378', '(32,"Main2") - 0.425933378', '(365,"Main2") - 0.425933378', '(325,"Main2") - 0.425933378', '(317,"Main2") - 0.425933378', '(296,"Main2") - 0.425933378', '(353,"Main2") - 0.425933378', '(351,"Main2") - 0.425933378', '(352,"Main2") - 0.425933378', '(334,"Main2") - 0.425933378', '(322,"Main2") - 0.425933378', '(337,"Main2") - 0.425933378', '(340,"Main2") - 0.425933378', '(35,"Main2") - 0.425933378', '(313,"Main2") - 0.425933378', '(295,"Main2") - 0.425933378', '(291,"Main2") - 0.547499275', '(27,"Main2") - 0.547499275', '(294,"Main2") - 0.547499275', '(290,"Main2") - 0.547499275', '(23,"Main2") - 0.547499275', '(92,"Main2") - 0.586345142', '(100,"Main2") - 0.586345142', '(90,"Main2") - 0.586345142', '(117,"Main2") - 0.586345142', '(2,"Main2") - 0.586345142', '(119,"Main2") - 0.586345142', '(116,"Main2") - 0.586345142', '(124,"Main2") - 0.586345142', '(3,"Main2") - 0.586345142', '(138,"Main2") - 0.586345142', '(109,"Main2") - 0.586345142', '(111,"Main2") - 0.586345142', '(141,"Main2") - 0.586345142', '(103,"Main2") - 0.586345142', '(115,"Main2") - 0.586345142', '(235,"Main2") - 0.586345142', '(101,"Main2") - 0.586345142', '(139,"Main2") - 0.586345142', '(86,"Main2") - 0.586345142', '(120,"Main2") - 0.586345142', '(85,"Main2") - 0.586345142', '(96,"Main2") - 0.586345142', '(112,"Main2") - 0.586345142', '(118,"Main2") - 0.586345142', '(69,"Main2") - 0.586345142', '(346,"Main2") - 0.586345142', '(122,"Main2") - 0.586345142', '(140,"Main2") - 0.586345142', '(355,"Main2") - 0.586345142', '(108,"Main2") - 0.586345142', '(9,"Main2") - 0.586345142', '(344,"Main2") - 0.586345142', '(105,"Main2") - 0.586345142', '(137,"Main2") - 0.586345142', '(89,"Main2") - 0.586345142', '(110,"Main2") - 0.586345142', '(345,"Main2") - 0.586345142', '(136,"Main2") - 0.586345142', '(94,"Main2") - 0.586345142', '(75,"Main2") - 0.586345142', '(77,"Main2") - 0.586345142', '(145,"Main2") - 0.586345142', '(107,"Main2") - 0.586345142', '(79,"Main2") - 0.586345142', '(10,"Main2") - 0.586345142', '(97,"Main2") - 0.586345142', '(106,"Main2") - 0.586345142', '(132,"Main2") - 0.586345142', '(76,"Main2") - 0.586345142', '(91,"Main2") - 0.586345142', '(133,"Main2") - 0.586345142', '(98,"Main2") - 0.586345142', '(82,"Main2") - 0.586345142', '(144,"Main2") - 0.586345142', '(83,"Main2") - 0.586345142', '(134,"Main2") - 0.586345142', '(121,"Main2") - 0.586345142', '(104,"Main2") - 0.586345142', '(125,"Main2") - 0.586345142', '(81,"Main2") - 0.586345142', '(93,"Main2") - 0.586345142', '(70,"Main2") - 0.586345142', '(99,"Main2") - 0.586345142', '(143,"Main2") - 0.586345142', '(0,"Main2") - 0.586345142', '(80,"Main2") - 0.586345142', '(11,"Main2") - 0.586345142']
Red Rules #: 17761
SMT Solving time: 0.304792592
Gen Solving time: 0.307980405
SMT Solver calls: 11
General Solver calls: 607
# nrpcs = []
# post call args = 5
# func args = 0
# timeouts = 0
# branches = 0
NRPC:
hpc_exp = []
calculate hpc converage
[]
[]
[]
Last time is: 0.673456543
hpc reached = 0
g2 reached = 123
total = 369
% reached = 33.3
last time = 0.673456543
all_times = ['(368,"Main2") - 0.346872820', '(339,"Main2") - 0.346872820', '(349,"Main2") - 0.346872820', '(362,"Main2") - 0.346872820', '(342,"Main2") - 0.346872820', '(356,"Main2") - 0.346872820', '(363,"Main2") - 0.346872820', '(359,"Main2") - 0.346872820', '(343,"Main2") - 0.346872820', '(354,"Main2") - 0.346872820', '(31,"Main2") - 0.346872820', '(360,"Main2") - 0.346872820', '(335,"Main2") - 0.346872820', '(358,"Main2") - 0.346872820', '(367,"Main2") - 0.346872820', '(34,"Main2") - 0.346872820', '(366,"Main2") - 0.346872820', '(336,"Main2") - 0.346872820', '(361,"Main2") - 0.346872820', '(341,"Main2") - 0.346872820', '(348,"Main2") - 0.346872820', '(350,"Main2") - 0.346872820', '(347,"Main2") - 0.346872820', '(32,"Main2") - 0.346872820', '(365,"Main2") - 0.346872820', '(296,"Main2") - 0.346872820', '(353,"Main2") - 0.346872820', '(364,"Main2") - 0.346872820', '(351,"Main2") - 0.346872820', '(352,"Main2") - 0.346872820', '(334,"Main2") - 0.346872820', '(337,"Main2") - 0.346872820', '(340,"Main2") - 0.346872820', '(357,"Main2") - 0.346872820', '(35,"Main2") - 0.346872820', '(321,"Main2") - 0.439327477', '(332,"Main2") - 0.439327477', '(30,"Main2") - 0.439327477', '(320,"Main2") - 0.439327477', '(331,"Main2") - 0.439327477', '(330,"Main2") - 0.439327477', '(22,"Main2") - 0.439327477', '(319,"Main2") - 0.439327477', '(318,"Main2") - 0.439327477', '(312,"Main2") - 0.439327477', '(28,"Main2") - 0.439327477', '(325,"Main2") - 0.439327477', '(317,"Main2") - 0.439327477', '(322,"Main2") - 0.439327477', '(313,"Main2") - 0.439327477', '(295,"Main2") - 0.439327477', '(291,"Main2") - 0.633286304', '(27,"Main2") - 0.633286304', '(294,"Main2") - 0.633286304', '(290,"Main2") - 0.633286304', '(23,"Main2") - 0.633286304', '(92,"Main2") - 0.673456543', '(100,"Main2") - 0.673456543', '(90,"Main2") - 0.673456543', '(117,"Main2") - 0.673456543', '(2,"Main2") - 0.673456543', '(119,"Main2") - 0.673456543', '(116,"Main2") - 0.673456543', '(124,"Main2") - 0.673456543', '(3,"Main2") - 0.673456543', '(138,"Main2") - 0.673456543', '(109,"Main2") - 0.673456543', '(111,"Main2") - 0.673456543', '(141,"Main2") - 0.673456543', '(103,"Main2") - 0.673456543', '(115,"Main2") - 0.673456543', '(235,"Main2") - 0.673456543', '(101,"Main2") - 0.673456543', '(139,"Main2") - 0.673456543', '(86,"Main2") - 0.673456543', '(120,"Main2") - 0.673456543', '(85,"Main2") - 0.673456543', '(96,"Main2") - 0.673456543', '(112,"Main2") - 0.673456543', '(118,"Main2") - 0.673456543', '(69,"Main2") - 0.673456543', '(346,"Main2") - 0.673456543', '(122,"Main2") - 0.673456543', '(140,"Main2") - 0.673456543', '(355,"Main2") - 0.673456543', '(108,"Main2") - 0.673456543', '(9,"Main2") - 0.673456543', '(344,"Main2") - 0.673456543', '(105,"Main2") - 0.673456543', '(137,"Main2") - 0.673456543', '(89,"Main2") - 0.673456543', '(110,"Main2") - 0.673456543', '(345,"Main2") - 0.673456543', '(136,"Main2") - 0.673456543', '(94,"Main2") - 0.673456543', '(75,"Main2") - 0.673456543', '(77,"Main2") - 0.673456543', '(145,"Main2") - 0.673456543', '(107,"Main2") - 0.673456543', '(79,"Main2") - 0.673456543', '(10,"Main2") - 0.673456543', '(97,"Main2") - 0.673456543', '(106,"Main2") - 0.673456543', '(132,"Main2") - 0.673456543', '(76,"Main2") - 0.673456543', '(91,"Main2") - 0.673456543', '(133,"Main2") - 0.673456543', '(98,"Main2") - 0.673456543', '(82,"Main2") - 0.673456543', '(144,"Main2") - 0.673456543', '(83,"Main2") - 0.673456543', '(134,"Main2") - 0.673456543', '(121,"Main2") - 0.673456543', '(104,"Main2") - 0.673456543', '(125,"Main2") - 0.673456543', '(81,"Main2") - 0.673456543', '(93,"Main2") - 0.673456543', '(70,"Main2") - 0.673456543', '(99,"Main2") - 0.673456543', '(143,"Main2") - 0.673456543', '(0,"Main2") - 0.673456543', '(80,"Main2") - 0.673456543', '(11,"Main2") - 0.673456543']
Red Rules #: 17874
SMT Solving time: 0.299610822
Gen Solving time: 0.302419237
SMT Solver calls: 12
General Solver calls: 612
# nrpcs = [0, 0, 1, 1, 0, 1]
# post call args = 5
# func args = 1
# timeouts = 0
# branches = 0


Graph latex for: clausify: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(clausify)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.35, 10) (0.43, 41) (0.55, 5) (0.59, 67)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.35, 35) (0.44, 16) (0.63, 5) (0.67, 67)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


constraints
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '502', '11', '42')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 502, '11', '42')]
[('Main2', 0, 0, 502, '11', '42')]
[('11', '42')]
Last time is: 0.918540348
hpc reached = 0.0
g2 reached = 199
total = 604
% reached = 32.9
last time = 0.918540348
all_times = ['(423,"Main2") - 0.457639898', '(445,"Main2") - 0.457639898', '(416,"Main2") - 0.457639898', '(159,"Main2") - 0.457639898', '(173,"Main2") - 0.457639898', '(401,"Main2") - 0.457639898', '(315,"Main2") - 0.457639898', '(436,"Main2") - 0.457639898', '(198,"Main2") - 0.457639898', '(185,"Main2") - 0.457639898', '(48,"Main2") - 0.457639898', '(215,"Main2") - 0.457639898', '(441,"Main2") - 0.457639898', '(589,"Main2") - 0.457639898', '(579,"Main2") - 0.457639898', '(275,"Main2") - 0.457639898', '(278,"Main2") - 0.457639898', '(197,"Main2") - 0.457639898', '(191,"Main2") - 0.457639898', '(214,"Main2") - 0.457639898', '(422,"Main2") - 0.457639898', '(205,"Main2") - 0.457639898', '(56,"Main2") - 0.457639898', '(195,"Main2") - 0.457639898', '(306,"Main2") - 0.457639898', '(55,"Main2") - 0.457639898', '(444,"Main2") - 0.457639898', '(166,"Main2") - 0.457639898', '(59,"Main2") - 0.457639898', '(234,"Main2") - 0.457639898', '(165,"Main2") - 0.457639898', '(204,"Main2") - 0.457639898', '(291,"Main2") - 0.457639898', '(578,"Main2") - 0.457639898', '(201,"Main2") - 0.457639898', '(304,"Main2") - 0.457639898', '(283,"Main2") - 0.457639898', '(388,"Main2") - 0.457639898', '(389,"Main2") - 0.457639898', '(282,"Main2") - 0.457639898', '(218,"Main2") - 0.457639898', '(170,"Main2") - 0.457639898', '(69,"Main2") - 0.457639898', '(202,"Main2") - 0.457639898', '(211,"Main2") - 0.457639898', '(576,"Main2") - 0.457639898', '(53,"Main2") - 0.457639898', '(318,"Main2") - 0.457639898', '(281,"Main2") - 0.457639898', '(157,"Main2") - 0.457639898', '(412,"Main2") - 0.457639898', '(438,"Main2") - 0.457639898', '(172,"Main2") - 0.457639898', '(52,"Main2") - 0.457639898', '(591,"Main2") - 0.457639898', '(417,"Main2") - 0.457639898', '(196,"Main2") - 0.457639898', '(277,"Main2") - 0.457639898', '(440,"Main2") - 0.457639898', '(46,"Main2") - 0.457639898', '(418,"Main2") - 0.457639898', '(54,"Main2") - 0.457639898', '(443,"Main2") - 0.457639898', '(292,"Main2") - 0.457639898', '(308,"Main2") - 0.457639898', '(590,"Main2") - 0.457639898', '(150,"Main2") - 0.457639898', '(415,"Main2") - 0.457639898', '(57,"Main2") - 0.457639898', '(312,"Main2") - 0.457639898', '(310,"Main2") - 0.457639898', '(146,"Main2") - 0.457639898', '(200,"Main2") - 0.457639898', '(209,"Main2") - 0.457639898', '(575,"Main2") - 0.457639898', '(147,"Main2") - 0.457639898', '(148,"Main2") - 0.457639898', '(309,"Main2") - 0.457639898', '(419,"Main2") - 0.457639898', '(160,"Main2") - 0.457639898', '(206,"Main2") - 0.457639898', '(421,"Main2") - 0.457639898', '(163,"Main2") - 0.457639898', '(194,"Main2") - 0.457639898', '(58,"Main2") - 0.457639898', '(199,"Main2") - 0.457639898', '(276,"Main2") - 0.457639898', '(237,"Main2") - 0.457639898', '(257,"Main2") - 0.457639898', '(168,"Main2") - 0.457639898', '(50,"Main2") - 0.457639898', '(299,"Main2") - 0.457639898', '(145,"Main2") - 0.457639898', '(599,"Main2") - 0.457639898', '(407,"Main2") - 0.457639898', '(398,"Main2") - 0.457639898', '(169,"Main2") - 0.457639898', '(396,"Main2") - 0.457639898', '(294,"Main2") - 0.457639898', '(297,"Main2") - 0.457639898', '(289,"Main2") - 0.457639898', '(217,"Main2") - 0.457639898', '(207,"Main2") - 0.457639898', '(158,"Main2") - 0.457639898', '(402,"Main2") - 0.457639898', '(203,"Main2") - 0.457639898', '(182,"Main2") - 0.457639898', '(167,"Main2") - 0.457639898', '(6,"Main2") - 0.457639898', '(413,"Main2") - 0.457639898', '(71,"Main2") - 0.457639898', '(186,"Main2") - 0.457639898', '(314,"Main2") - 0.457639898', '(47,"Main2") - 0.457639898', '(63,"Main2") - 0.457639898', '(183,"Main2") - 0.457639898', '(442,"Main2") - 0.457639898', '(397,"Main2") - 0.457639898', '(142,"Main2") - 0.457639898', '(162,"Main2") - 0.457639898', '(180,"Main2") - 0.457639898', '(45,"Main2") - 0.457639898', '(208,"Main2") - 0.457639898', '(233,"Main2") - 0.457639898', '(316,"Main2") - 0.457639898', '(420,"Main2") - 0.457639898', '(317,"Main2") - 0.457639898', '(296,"Main2") - 0.457639898', '(399,"Main2") - 0.457639898', '(213,"Main2") - 0.457639898', '(280,"Main2") - 0.457639898', '(259,"Main2") - 0.457639898', '(307,"Main2") - 0.457639898', '(161,"Main2") - 0.457639898', '(61,"Main2") - 0.457639898', '(171,"Main2") - 0.457639898', '(435,"Main2") - 0.457639898', '(236,"Main2") - 0.457639898', '(400,"Main2") - 0.457639898', '(592,"Main2") - 0.457639898', '(212,"Main2") - 0.457639898', '(293,"Main2") - 0.457639898', '(149,"Main2") - 0.457639898', '(403,"Main2") - 0.457639898', '(305,"Main2") - 0.457639898', '(62,"Main2") - 0.457639898', '(70,"Main2") - 0.457639898', '(288,"Main2") - 0.457639898', '(580,"Main2") - 0.457639898', '(577,"Main2") - 0.457639898', '(216,"Main2") - 0.457639898', '(181,"Main2") - 0.457639898', '(313,"Main2") - 0.457639898', '(143,"Main2") - 0.457639898', '(295,"Main2") - 0.457639898', '(311,"Main2") - 0.457639898', '(303,"Main2") - 0.457639898', '(192,"Main2") - 0.457639898', '(581,"Main2") - 0.457639898', '(395,"Main2") - 0.457639898', '(164,"Main2") - 0.457639898', '(210,"Main2") - 0.457639898', '(184,"Main2") - 0.890459256', '(68,"Main2") - 0.890459256', '(30,"Main2") - 0.890459256', '(141,"Main2") - 0.890459256', '(179,"Main2") - 0.890459256', '(5,"Main2") - 0.890459256', '(176,"Main2") - 0.890459256', '(66,"Main2") - 0.890459256', '(190,"Main2") - 0.890459256', '(155,"Main2") - 0.890459256', '(258,"Main2") - 0.890459256', '(44,"Main2") - 0.890459256', '(287,"Main2") - 0.890459256', '(189,"Main2") - 0.890459256', '(154,"Main2") - 0.890459256', '(65,"Main2") - 0.890459256', '(284,"Main2") - 0.890459256', '(187,"Main2") - 0.890459256', '(178,"Main2") - 0.890459256', '(51,"Main2") - 0.890459256', '(156,"Main2") - 0.890459256', '(49,"Main2") - 0.890459256', '(153,"Main2") - 0.890459256', '(144,"Main2") - 0.890459256', '(64,"Main2") - 0.890459256', '(175,"Main2") - 0.890459256', '(188,"Main2") - 0.890459256', '(439,"Main2") - 0.890459256', '(0,"Main2") - 0.890459256', '(285,"Main2") - 0.890459256', '(286,"Main2") - 0.890459256', '(31,"Main2") - 0.918540348', '(34,"Main2") - 0.918540348', '(32,"Main2") - 0.918540348', '(35,"Main2") - 0.918540348', '(33,"Main2") - 0.918540348', '(43,"Main2") - 0.918540348']
Red Rules #: 31562
SMT Solving time: 0.071834162
Gen Solving time: 0.074728021
SMT Solver calls: 30
General Solver calls: 688
# nrpcs = []
# post call args = 3
# func args = 0
# timeouts = 0
# branches = 53
NRPC:
hpc_exp = [('CallForHPC', '89', '594', '663', '0', '50'), ('Main2', '70', '354', '502', '11', '42')]
calculate hpc converage
[('CallForHPC', 89, 594, 663, '0', '50'), ('Main2', 70, 354, 502, '11', '42')]
[('Main2', 70, 354, 502, '11', '42')]
[('11', '42')]
Last time is: 0.886515269
hpc reached = 70.5
g2 reached = 281
total = 604
% reached = 46.5
last time = 0.886515269
all_times = ['(152,"Main2") - 0.290275650', '(587,"Main2") - 0.290275650', '(423,"Main2") - 0.290275650', '(445,"Main2") - 0.290275650', '(301,"Main2") - 0.290275650', '(184,"Main2") - 0.290275650', '(173,"Main2") - 0.290275650', '(385,"Main2") - 0.290275650', '(315,"Main2") - 0.290275650', '(436,"Main2") - 0.290275650', '(198,"Main2") - 0.290275650', '(548,"Main2") - 0.290275650', '(185,"Main2") - 0.290275650', '(48,"Main2") - 0.290275650', '(569,"Main2") - 0.290275650', '(441,"Main2") - 0.290275650', '(589,"Main2") - 0.290275650', '(179,"Main2") - 0.290275650', '(579,"Main2") - 0.290275650', '(275,"Main2") - 0.290275650', '(278,"Main2") - 0.290275650', '(197,"Main2") - 0.290275650', '(191,"Main2") - 0.290275650', '(5,"Main2") - 0.290275650', '(422,"Main2") - 0.290275650', '(151,"Main2") - 0.290275650', '(139,"Main2") - 0.290275650', '(56,"Main2") - 0.290275650', '(176,"Main2") - 0.290275650', '(195,"Main2") - 0.290275650', '(544,"Main2") - 0.290275650', '(444,"Main2") - 0.290275650', '(166,"Main2") - 0.290275650', '(59,"Main2") - 0.290275650', '(234,"Main2") - 0.290275650', '(165,"Main2") - 0.290275650', '(578,"Main2") - 0.290275650', '(304,"Main2") - 0.290275650', '(283,"Main2") - 0.290275650', '(570,"Main2") - 0.290275650', '(574,"Main2") - 0.290275650', '(190,"Main2") - 0.290275650', '(282,"Main2") - 0.290275650', '(218,"Main2") - 0.290275650', '(170,"Main2") - 0.290275650', '(549,"Main2") - 0.290275650', '(211,"Main2") - 0.290275650', '(576,"Main2") - 0.290275650', '(302,"Main2") - 0.290275650', '(318,"Main2") - 0.290275650', '(281,"Main2") - 0.290275650', '(157,"Main2") - 0.290275650', '(438,"Main2") - 0.290275650', '(172,"Main2") - 0.290275650', '(539,"Main2") - 0.290275650', '(300,"Main2") - 0.290275650', '(591,"Main2") - 0.290275650', '(196,"Main2") - 0.290275650', '(545,"Main2") - 0.290275650', '(277,"Main2") - 0.290275650', '(440,"Main2") - 0.290275650', '(46,"Main2") - 0.290275650', '(443,"Main2") - 0.290275650', '(571,"Main2") - 0.290275650', '(292,"Main2") - 0.290275650', '(189,"Main2") - 0.290275650', '(308,"Main2") - 0.290275650', '(590,"Main2") - 0.290275650', '(150,"Main2") - 0.290275650', '(57,"Main2") - 0.290275650', '(312,"Main2") - 0.290275650', '(310,"Main2") - 0.290275650', '(146,"Main2") - 0.290275650', '(200,"Main2") - 0.290275650', '(209,"Main2") - 0.290275650', '(137,"Main2") - 0.290275650', '(60,"Main2") - 0.290275650', '(575,"Main2") - 0.290275650', '(147,"Main2") - 0.290275650', '(386,"Main2") - 0.290275650', '(148,"Main2") - 0.290275650', '(309,"Main2") - 0.290275650', '(419,"Main2") - 0.290275650', '(421,"Main2") - 0.290275650', '(535,"Main2") - 0.290275650', '(163,"Main2") - 0.290275650', '(194,"Main2") - 0.290275650', '(58,"Main2") - 0.290275650', '(187,"Main2") - 0.290275650', '(199,"Main2") - 0.290275650', '(276,"Main2") - 0.290275650', '(237,"Main2") - 0.290275650', '(257,"Main2") - 0.290275650', '(387,"Main2") - 0.290275650', '(299,"Main2") - 0.290275650', '(169,"Main2") - 0.290275650', '(294,"Main2") - 0.290275650', '(297,"Main2") - 0.290275650', '(536,"Main2") - 0.290275650', '(178,"Main2") - 0.290275650', '(217,"Main2") - 0.290275650', '(207,"Main2") - 0.290275650', '(158,"Main2") - 0.290275650', '(203,"Main2") - 0.290275650', '(392,"Main2") - 0.290275650', '(182,"Main2") - 0.290275650', '(572,"Main2") - 0.290275650', '(71,"Main2") - 0.290275650', '(314,"Main2") - 0.290275650', '(47,"Main2") - 0.290275650', '(442,"Main2") - 0.290275650', '(393,"Main2") - 0.290275650', '(162,"Main2") - 0.290275650', '(180,"Main2") - 0.290275650', '(573,"Main2") - 0.290275650', '(208,"Main2") - 0.290275650', '(233,"Main2") - 0.290275650', '(316,"Main2") - 0.290275650', '(384,"Main2") - 0.290275650', '(420,"Main2") - 0.290275650', '(317,"Main2") - 0.290275650', '(394,"Main2") - 0.290275650', '(296,"Main2") - 0.290275650', '(534,"Main2") - 0.290275650', '(213,"Main2") - 0.290275650', '(547,"Main2") - 0.290275650', '(175,"Main2") - 0.290275650', '(280,"Main2") - 0.290275650', '(259,"Main2") - 0.290275650', '(161,"Main2") - 0.290275650', '(501,"Main2") - 0.290275650', '(171,"Main2") - 0.290275650', '(435,"Main2") - 0.290275650', '(236,"Main2") - 0.290275650', '(592,"Main2") - 0.290275650', '(212,"Main2") - 0.290275650', '(293,"Main2") - 0.290275650', '(149,"Main2") - 0.290275650', '(485,"Main2") - 0.290275650', '(188,"Main2") - 0.290275650', '(588,"Main2") - 0.290275650', '(70,"Main2") - 0.290275650', '(580,"Main2") - 0.290275650', '(546,"Main2") - 0.290275650', '(577,"Main2") - 0.290275650', '(181,"Main2") - 0.290275650', '(313,"Main2") - 0.290275650', '(143,"Main2") - 0.290275650', '(0,"Main2") - 0.290275650', '(295,"Main2") - 0.290275650', '(311,"Main2") - 0.290275650', '(303,"Main2") - 0.290275650', '(192,"Main2") - 0.290275650', '(581,"Main2") - 0.290275650', '(164,"Main2") - 0.290275650', '(210,"Main2") - 0.290275650', '(537,"Main2") - 0.296735315', '(231,"Main2") - 0.300036142', '(235,"Main2") - 0.300036142', '(219,"Main2") - 0.300036142', '(221,"Main2") - 0.300036142', '(232,"Main2") - 0.300036142', '(220,"Main2") - 0.300036142', '(538,"Main2") - 0.320375288', '(223,"Main2") - 0.325410377', '(230,"Main2") - 0.325410377', '(225,"Main2") - 0.325410377', '(222,"Main2") - 0.325410377', '(224,"Main2") - 0.325410377', '(226,"Main2") - 0.325410377', '(229,"Main2") - 0.325410377', '(227,"Main2") - 0.325410377', '(228,"Main2") - 0.325410377', '(368,"Main2") - 0.358339104', '(159,"Main2") - 0.358339104', '(362,"Main2") - 0.358339104', '(363,"Main2") - 0.358339104', '(493,"Main2") - 0.358339104', '(333,"Main2") - 0.358339104', '(383,"Main2") - 0.358339104', '(291,"Main2") - 0.358339104', '(202,"Main2") - 0.358339104', '(367,"Main2") - 0.358339104', '(160,"Main2") - 0.358339104', '(366,"Main2") - 0.358339104', '(369,"Main2") - 0.358339104', '(168,"Main2") - 0.358339104', '(145,"Main2") - 0.358339104', '(167,"Main2") - 0.358339104', '(492,"Main2") - 0.358339104', '(142,"Main2") - 0.358339104', '(290,"Main2") - 0.358339104', '(364,"Main2") - 0.358339104', '(372,"Main2") - 0.358339104', '(500,"Main2") - 0.358339104', '(491,"Main2") - 0.358339104', '(490,"Main2") - 0.358339104', '(289,"Main2") - 0.376579372', '(288,"Main2") - 0.381863454', '(287,"Main2") - 0.388623325', '(284,"Main2") - 0.388623325', '(285,"Main2") - 0.388623325', '(286,"Main2") - 0.388623325', '(321,"Main2") - 0.441441556', '(332,"Main2") - 0.441441556', '(320,"Main2") - 0.441441556', '(356,"Main2") - 0.441441556', '(331,"Main2") - 0.441441556', '(359,"Main2") - 0.441441556', '(201,"Main2") - 0.441441556', '(258,"Main2") - 0.441441556', '(358,"Main2") - 0.441441556', '(324,"Main2") - 0.441441556', '(533,"Main2") - 0.441441556', '(361,"Main2") - 0.441441556', '(325,"Main2") - 0.441441556', '(322,"Main2") - 0.441441556', '(357,"Main2") - 0.441441556', '(327,"Main2") - 0.441441556', '(279,"Main2") - 0.498938940', '(416,"Main2") - 0.525741299', '(401,"Main2") - 0.525741299', '(215,"Main2") - 0.525741299', '(214,"Main2") - 0.525741299', '(205,"Main2") - 0.525741299', '(306,"Main2") - 0.525741299', '(55,"Main2") - 0.525741299', '(204,"Main2") - 0.525741299', '(388,"Main2") - 0.525741299', '(389,"Main2") - 0.525741299', '(69,"Main2") - 0.525741299', '(53,"Main2") - 0.525741299', '(412,"Main2") - 0.525741299', '(52,"Main2") - 0.525741299', '(417,"Main2") - 0.525741299', '(418,"Main2") - 0.525741299', '(54,"Main2") - 0.525741299', '(415,"Main2") - 0.525741299', '(206,"Main2") - 0.525741299', '(50,"Main2") - 0.525741299', '(599,"Main2") - 0.525741299', '(407,"Main2") - 0.525741299', '(398,"Main2") - 0.525741299', '(396,"Main2") - 0.525741299', '(402,"Main2") - 0.525741299', '(6,"Main2") - 0.525741299', '(413,"Main2") - 0.525741299', '(186,"Main2") - 0.525741299', '(63,"Main2") - 0.525741299', '(183,"Main2") - 0.525741299', '(397,"Main2") - 0.525741299', '(45,"Main2") - 0.525741299', '(399,"Main2") - 0.525741299', '(307,"Main2") - 0.525741299', '(61,"Main2") - 0.525741299', '(400,"Main2") - 0.525741299', '(403,"Main2") - 0.525741299', '(305,"Main2") - 0.525741299', '(62,"Main2") - 0.525741299', '(216,"Main2") - 0.525741299', '(395,"Main2") - 0.525741299', '(141,"Main2") - 0.640203734', '(382,"Main2") - 0.640203734', '(323,"Main2") - 0.640203734', '(381,"Main2") - 0.640203734', '(371,"Main2") - 0.640203734', '(326,"Main2") - 0.640203734', '(140,"Main2") - 0.719340925', '(564,"Main2") - 0.886515269', '(354,"Main2") - 0.886515269', '(586,"Main2") - 0.886515269', '(567,"Main2") - 0.886515269', '(355,"Main2") - 0.886515269', '(360,"Main2") - 0.886515269', '(585,"Main2") - 0.886515269', '(565,"Main2") - 0.886515269', '(566,"Main2") - 0.886515269', '(562,"Main2") - 0.886515269', '(353,"Main2") - 0.886515269', '(352,"Main2") - 0.886515269', '(563,"Main2") - 0.886515269']
Red Rules #: 23000
SMT Solving time: 0.122526036
Gen Solving time: 0.125514109
SMT Solver calls: 58
General Solver calls: 304
# nrpcs = [0, 3, 0, 1, 0, 1, 0, 0, 0, 0, 1, 6, 3, 3, 2, 1, 2, 1, 1, 1, 1, 2, 0, 3, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 2, 4, 3, 0, 0, 3, 1, 1, 1]
# post call args = 1
# func args = 42
# timeouts = 0
# branches = 53


Graph latex for: constraints: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(constraints)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.46, 162) (0.89, 31) (0.92, 6)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.29, 156) (0.3, 7) (0.32, 1) (0.33, 9) (0.36, 24) (0.38, 2) (0.39, 4) (0.44, 16) (0.5, 1) (0.53, 41) (0.64, 6) (0.72, 1) (0.89, 13)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


cryptarithm1
Baseline:
hpc_exp = [('CallForHPC', '96', '636', '658', '0', '146'), ('Main2', '42', '40', '94', '1', '6')]
calculate hpc converage
[('CallForHPC', 96, 636, 658, '0', '146'), ('Main2', 42, 40, 94, '1', '6')]
[('Main2', 42, 40, 94, '1', '6')]
[('1', '6')]
Last time is: 0.288920916
hpc reached = 42.6
g2 reached = 47
total = 102
% reached = 46.1
last time = 0.288920916
all_times = ['(92,"Main2") - 0.197591015', '(100,"Main2") - 0.197591015', '(90,"Main2") - 0.197591015', '(3,"Main2") - 0.197591015', '(87,"Main2") - 0.197591015', '(101,"Main2") - 0.197591015', '(86,"Main2") - 0.197591015', '(31,"Main2") - 0.197591015', '(96,"Main2") - 0.197591015', '(1,"Main2") - 0.197591015', '(89,"Main2") - 0.197591015', '(4,"Main2") - 0.197591015', '(34,"Main2") - 0.197591015', '(38,"Main2") - 0.197591015', '(94,"Main2") - 0.197591015', '(95,"Main2") - 0.197591015', '(36,"Main2") - 0.197591015', '(32,"Main2") - 0.197591015', '(37,"Main2") - 0.197591015', '(91,"Main2") - 0.197591015', '(98,"Main2") - 0.197591015', '(88,"Main2") - 0.197591015', '(29,"Main2") - 0.197591015', '(93,"Main2") - 0.197591015', '(35,"Main2") - 0.197591015', '(99,"Main2") - 0.197591015', '(0,"Main2") - 0.197591015', '(17,"Main2") - 0.217465345', '(19,"Main2") - 0.217465345', '(27,"Main2") - 0.217465345', '(28,"Main2") - 0.217465345', '(10,"Main2") - 0.217465345', '(97,"Main2") - 0.217465345', '(6,"Main2") - 0.217465345', '(8,"Main2") - 0.217465345', '(18,"Main2") - 0.217465345', '(33,"Main2") - 0.217465345', '(11,"Main2") - 0.217465345', '(14,"Main2") - 0.222385061', '(13,"Main2") - 0.222385061', '(9,"Main2") - 0.222385061', '(2,"Main2") - 0.227161797', '(5,"Main2") - 0.227161797', '(7,"Main2") - 0.227161797', '(30,"Main2") - 0.277874778', '(15,"Main2") - 0.277874778', '(12,"Main2") - 0.288920916']
Red Rules #: 20255
SMT Solving time: 0.227056578
Gen Solving time: 0.230728085
SMT Solver calls: 124
General Solver calls: 281
# nrpcs = []
# post call args = 37
# func args = 0
# timeouts = 1
# branches = 7
NRPC:
hpc_exp = [('CallForHPC', '99', '398', '402', '0', '28'), ('Main2', '42', '40', '94', '1', '6')]
calculate hpc converage
[('CallForHPC', 99, 398, 402, '0', '28'), ('Main2', 42, 40, 94, '1', '6')]
[('Main2', 42, 40, 94, '1', '6')]
[('1', '6')]
Last time is: 0.282389206
hpc reached = 42.6
g2 reached = 47
total = 102
% reached = 46.1
last time = 0.282389206
all_times = ['(92,"Main2") - 0.198582016', '(100,"Main2") - 0.198582016', '(90,"Main2") - 0.198582016', '(3,"Main2") - 0.198582016', '(87,"Main2") - 0.198582016', '(101,"Main2") - 0.198582016', '(86,"Main2") - 0.198582016', '(31,"Main2") - 0.198582016', '(96,"Main2") - 0.198582016', '(1,"Main2") - 0.198582016', '(89,"Main2") - 0.198582016', '(4,"Main2") - 0.198582016', '(34,"Main2") - 0.198582016', '(38,"Main2") - 0.198582016', '(94,"Main2") - 0.198582016', '(95,"Main2") - 0.198582016', '(36,"Main2") - 0.198582016', '(32,"Main2") - 0.198582016', '(37,"Main2") - 0.198582016', '(91,"Main2") - 0.198582016', '(98,"Main2") - 0.198582016', '(88,"Main2") - 0.198582016', '(29,"Main2") - 0.198582016', '(93,"Main2") - 0.198582016', '(35,"Main2") - 0.198582016', '(99,"Main2") - 0.198582016', '(0,"Main2") - 0.198582016', '(17,"Main2") - 0.219639387', '(19,"Main2") - 0.219639387', '(27,"Main2") - 0.219639387', '(28,"Main2") - 0.219639387', '(10,"Main2") - 0.219639387', '(97,"Main2") - 0.219639387', '(6,"Main2") - 0.219639387', '(8,"Main2") - 0.219639387', '(18,"Main2") - 0.219639387', '(33,"Main2") - 0.219639387', '(11,"Main2") - 0.219639387', '(14,"Main2") - 0.226644165', '(13,"Main2") - 0.226644165', '(9,"Main2") - 0.226644165', '(2,"Main2") - 0.231804308', '(5,"Main2") - 0.231804308', '(7,"Main2") - 0.231804308', '(30,"Main2") - 0.264137407', '(15,"Main2") - 0.271852799', '(12,"Main2") - 0.282389206']
Red Rules #: 22216
SMT Solving time: 0.16788761
Gen Solving time: 0.173550705
SMT Solver calls: 84
General Solver calls: 523
# nrpcs = [0, 0, 2, 2, 1, 3, 0, 1, 2, 4, 4, 1, 3, 2, 3, 3, 0, 3, 3, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 2, 2, 2, 2, 3, 3]
# post call args = 4
# func args = 36
# timeouts = 5
# branches = 7


Graph latex for: cryptarithm1: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(cryptarithm1)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 27) (0.22, 14) (0.23, 3) (0.28, 2) (0.29, 1)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.2, 27) (0.22, 11) (0.23, 6) (0.26, 1) (0.27, 1) (0.28, 1)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


cse
Baseline:
hpc_exp = [('CallForHPC', '92', '86', '93', '0', '16'), ('Main2', '28', '108', '381', '9', '17'), ('StateMonad', '34', '36', '105', '1', '10')]
calculate hpc converage
[('CallForHPC', 92, 86, 93, '0', '16'), ('Main2', 28, 108, 381, '9', '17'), ('StateMonad', 34, 36, 105, '1', '10')]
[('Main2', 28, 108, 381, '9', '17'), ('StateMonad', 34, 36, 105, '1', '10')]
[('9', '17'), ('1', '10')]
Last time is: 0.407528863
hpc reached = 29.6
g2 reached = 174
total = 243
% reached = 71.6
last time = 0.407528863
all_times = ['(385,"Main2") - 0.194658929', '(388,"Main2") - 0.194658929', '(389,"Main2") - 0.194658929', '(386,"Main2") - 0.194658929', '(390,"Main2") - 0.194658929', '(384,"Main2") - 0.194658929', '(368,"Main2") - 0.227569305', '(247,"Main2") - 0.227569305', '(14,"StateMonad") - 0.227569305', '(10,"StateMonad") - 0.227569305', '(362,"Main2") - 0.227569305', '(87,"Main2") - 0.227569305', '(64,"StateMonad") - 0.227569305', '(17,"Main2") - 0.227569305', '(363,"Main2") - 0.227569305', '(219,"Main2") - 0.227569305', '(28,"StateMonad") - 0.227569305', '(359,"Main2") - 0.227569305', '(7,"StateMonad") - 0.227569305', '(343,"Main2") - 0.227569305', '(223,"Main2") - 0.227569305', '(245,"Main2") - 0.227569305', '(383,"Main2") - 0.227569305', '(86,"Main2") - 0.227569305', '(354,"Main2") - 0.227569305', '(376,"Main2") - 0.227569305', '(380,"Main2") - 0.227569305', '(270,"Main2") - 0.227569305', '(14,"Main2") - 0.227569305', '(81,"StateMonad") - 0.227569305', '(46,"StateMonad") - 0.227569305', '(251,"Main2") - 0.227569305', '(377,"Main2") - 0.227569305', '(346,"Main2") - 0.227569305', '(13,"Main2") - 0.227569305', '(260,"Main2") - 0.227569305', '(355,"Main2") - 0.227569305', '(360,"Main2") - 0.227569305', '(344,"Main2") - 0.227569305', '(358,"Main2") - 0.227569305', '(367,"Main2") - 0.227569305', '(63,"StateMonad") - 0.227569305', '(239,"Main2") - 0.227569305', '(266,"Main2") - 0.227569305', '(66,"StateMonad") - 0.227569305', '(49,"StateMonad") - 0.227569305', '(366,"Main2") - 0.227569305', '(243,"Main2") - 0.227569305', '(369,"Main2") - 0.227569305', '(238,"Main2") - 0.227569305', '(361,"Main2") - 0.227569305', '(221,"Main2") - 0.227569305', '(268,"Main2") - 0.227569305', '(29,"StateMonad") - 0.227569305', '(62,"StateMonad") - 0.227569305', '(225,"Main2") - 0.227569305', '(387,"Main2") - 0.227569305', '(374,"Main2") - 0.227569305', '(224,"Main2") - 0.227569305', '(264,"Main2") - 0.227569305', '(15,"Main2") - 0.227569305', '(348,"Main2") - 0.227569305', '(350,"Main2") - 0.227569305', '(13,"StateMonad") - 0.227569305', '(12,"Main2") - 0.227569305', '(226,"Main2") - 0.227569305', '(381,"Main2") - 0.227569305', '(249,"Main2") - 0.227569305', '(347,"Main2") - 0.227569305', '(8,"StateMonad") - 0.227569305', '(241,"Main2") - 0.227569305', '(27,"StateMonad") - 0.227569305', '(9,"StateMonad") - 0.227569305', '(365,"Main2") - 0.227569305', '(48,"StateMonad") - 0.227569305', '(67,"StateMonad") - 0.227569305', '(246,"Main2") - 0.227569305', '(267,"Main2") - 0.227569305', '(269,"Main2") - 0.227569305', '(45,"StateMonad") - 0.227569305', '(44,"StateMonad") - 0.227569305', '(252,"Main2") - 0.227569305', '(353,"Main2") - 0.227569305', '(373,"Main2") - 0.227569305', '(364,"Main2") - 0.227569305', '(26,"StateMonad") - 0.227569305', '(378,"Main2") - 0.227569305', '(351,"Main2") - 0.227569305', '(65,"StateMonad") - 0.227569305', '(352,"Main2") - 0.227569305', '(240,"Main2") - 0.227569305', '(371,"Main2") - 0.227569305', '(372,"Main2") - 0.227569305', '(248,"Main2") - 0.227569305', '(379,"Main2") - 0.227569305', '(50,"StateMonad") - 0.227569305', '(370,"Main2") - 0.227569305', '(261,"Main2") - 0.227569305', '(262,"Main2") - 0.227569305', '(16,"Main2") - 0.227569305', '(357,"Main2") - 0.227569305', '(220,"Main2") - 0.227569305', '(250,"Main2") - 0.227569305', '(80,"Main2") - 0.227569305', '(231,"Main2") - 0.372609231', '(349,"Main2") - 0.372609231', '(75,"StateMonad") - 0.372609231', '(79,"StateMonad") - 0.372609231', '(215,"Main2") - 0.372609231', '(80,"StateMonad") - 0.372609231', '(356,"Main2") - 0.372609231', '(256,"Main2") - 0.372609231', '(382,"Main2") - 0.372609231', '(244,"Main2") - 0.372609231', '(11,"StateMonad") - 0.372609231', '(214,"Main2") - 0.372609231', '(234,"Main2") - 0.372609231', '(77,"StateMonad") - 0.372609231', '(74,"StateMonad") - 0.372609231', '(375,"Main2") - 0.372609231', '(230,"Main2") - 0.372609231', '(61,"StateMonad") - 0.372609231', '(218,"Main2") - 0.372609231', '(211,"Main2") - 0.372609231', '(258,"Main2") - 0.372609231', '(242,"Main2") - 0.372609231', '(78,"StateMonad") - 0.372609231', '(209,"Main2") - 0.372609231', '(76,"StateMonad") - 0.372609231', '(34,"Main2") - 0.372609231', '(265,"Main2") - 0.372609231', '(38,"Main2") - 0.372609231', '(6,"StateMonad") - 0.372609231', '(232,"Main2") - 0.372609231', '(257,"Main2") - 0.372609231', '(222,"Main2") - 0.372609231', '(71,"StateMonad") - 0.372609231', '(36,"Main2") - 0.372609231', '(39,"Main2") - 0.372609231', '(5,"StateMonad") - 0.372609231', '(69,"StateMonad") - 0.372609231', '(217,"Main2") - 0.372609231', '(263,"Main2") - 0.372609231', '(70,"StateMonad") - 0.372609231', '(229,"Main2") - 0.372609231', '(227,"Main2") - 0.372609231', '(32,"Main2") - 0.372609231', '(37,"Main2") - 0.372609231', '(47,"StateMonad") - 0.372609231', '(12,"StateMonad") - 0.372609231', '(228,"Main2") - 0.372609231', '(253,"Main2") - 0.372609231', '(208,"Main2") - 0.372609231', '(233,"Main2") - 0.372609231', '(40,"Main2") - 0.372609231', '(259,"Main2") - 0.372609231', '(236,"Main2") - 0.372609231', '(212,"Main2") - 0.372609231', '(73,"StateMonad") - 0.372609231', '(81,"Main2") - 0.372609231', '(41,"Main2") - 0.372609231', '(216,"Main2") - 0.372609231', '(35,"Main2") - 0.372609231', '(33,"Main2") - 0.372609231', '(68,"StateMonad") - 0.372609231', '(72,"StateMonad") - 0.372609231', '(342,"Main2") - 0.407528863', '(255,"Main2") - 0.407528863', '(345,"Main2") - 0.407528863', '(237,"Main2") - 0.407528863', '(341,"Main2") - 0.407528863', '(213,"Main2") - 0.407528863', '(254,"Main2") - 0.407528863', '(210,"Main2") - 0.407528863']
Red Rules #: 36025
SMT Solving time: 0.107932371
Gen Solving time: 0.109490866
SMT Solver calls: 50
General Solver calls: 96
# nrpcs = []
# post call args = 8
# func args = 0
# timeouts = 0
# branches = 37
NRPC:
hpc_exp = [('CallForHPC', '96', '74', '77', '0', '4'), ('Main2', '28', '108', '381', '9', '17'), ('StateMonad', '34', '36', '105', '1', '10')]
calculate hpc converage
[('CallForHPC', 96, 74, 77, '0', '4'), ('Main2', 28, 108, 381, '9', '17'), ('StateMonad', 34, 36, 105, '1', '10')]
[('Main2', 28, 108, 381, '9', '17'), ('StateMonad', 34, 36, 105, '1', '10')]
[('9', '17'), ('1', '10')]
Last time is: 0.351660183
hpc reached = 29.6
g2 reached = 174
total = 243
% reached = 71.6
last time = 0.351660183
all_times = ['(385,"Main2") - 0.213422081', '(388,"Main2") - 0.213422081', '(389,"Main2") - 0.213422081', '(386,"Main2") - 0.213422081', '(390,"Main2") - 0.213422081', '(384,"Main2") - 0.213422081', '(368,"Main2") - 0.250751764', '(247,"Main2") - 0.250751764', '(14,"StateMonad") - 0.250751764', '(10,"StateMonad") - 0.250751764', '(362,"Main2") - 0.250751764', '(87,"Main2") - 0.250751764', '(64,"StateMonad") - 0.250751764', '(17,"Main2") - 0.250751764', '(363,"Main2") - 0.250751764', '(219,"Main2") - 0.250751764', '(28,"StateMonad") - 0.250751764', '(359,"Main2") - 0.250751764', '(7,"StateMonad") - 0.250751764', '(343,"Main2") - 0.250751764', '(223,"Main2") - 0.250751764', '(245,"Main2") - 0.250751764', '(383,"Main2") - 0.250751764', '(86,"Main2") - 0.250751764', '(354,"Main2") - 0.250751764', '(376,"Main2") - 0.250751764', '(380,"Main2") - 0.250751764', '(270,"Main2") - 0.250751764', '(14,"Main2") - 0.250751764', '(81,"StateMonad") - 0.250751764', '(46,"StateMonad") - 0.250751764', '(251,"Main2") - 0.250751764', '(377,"Main2") - 0.250751764', '(346,"Main2") - 0.250751764', '(13,"Main2") - 0.250751764', '(260,"Main2") - 0.250751764', '(355,"Main2") - 0.250751764', '(360,"Main2") - 0.250751764', '(344,"Main2") - 0.250751764', '(358,"Main2") - 0.250751764', '(367,"Main2") - 0.250751764', '(63,"StateMonad") - 0.250751764', '(239,"Main2") - 0.250751764', '(266,"Main2") - 0.250751764', '(66,"StateMonad") - 0.250751764', '(49,"StateMonad") - 0.250751764', '(366,"Main2") - 0.250751764', '(243,"Main2") - 0.250751764', '(369,"Main2") - 0.250751764', '(238,"Main2") - 0.250751764', '(361,"Main2") - 0.250751764', '(221,"Main2") - 0.250751764', '(268,"Main2") - 0.250751764', '(29,"StateMonad") - 0.250751764', '(62,"StateMonad") - 0.250751764', '(225,"Main2") - 0.250751764', '(387,"Main2") - 0.250751764', '(374,"Main2") - 0.250751764', '(224,"Main2") - 0.250751764', '(264,"Main2") - 0.250751764', '(15,"Main2") - 0.250751764', '(348,"Main2") - 0.250751764', '(350,"Main2") - 0.250751764', '(13,"StateMonad") - 0.250751764', '(12,"Main2") - 0.250751764', '(226,"Main2") - 0.250751764', '(381,"Main2") - 0.250751764', '(249,"Main2") - 0.250751764', '(347,"Main2") - 0.250751764', '(8,"StateMonad") - 0.250751764', '(241,"Main2") - 0.250751764', '(27,"StateMonad") - 0.250751764', '(9,"StateMonad") - 0.250751764', '(365,"Main2") - 0.250751764', '(48,"StateMonad") - 0.250751764', '(67,"StateMonad") - 0.250751764', '(246,"Main2") - 0.250751764', '(267,"Main2") - 0.250751764', '(269,"Main2") - 0.250751764', '(45,"StateMonad") - 0.250751764', '(44,"StateMonad") - 0.250751764', '(252,"Main2") - 0.250751764', '(353,"Main2") - 0.250751764', '(373,"Main2") - 0.250751764', '(364,"Main2") - 0.250751764', '(26,"StateMonad") - 0.250751764', '(378,"Main2") - 0.250751764', '(351,"Main2") - 0.250751764', '(65,"StateMonad") - 0.250751764', '(352,"Main2") - 0.250751764', '(240,"Main2") - 0.250751764', '(371,"Main2") - 0.250751764', '(372,"Main2") - 0.250751764', '(248,"Main2") - 0.250751764', '(379,"Main2") - 0.250751764', '(50,"StateMonad") - 0.250751764', '(370,"Main2") - 0.250751764', '(261,"Main2") - 0.250751764', '(262,"Main2") - 0.250751764', '(16,"Main2") - 0.250751764', '(357,"Main2") - 0.250751764', '(220,"Main2") - 0.250751764', '(250,"Main2") - 0.250751764', '(80,"Main2") - 0.250751764', '(231,"Main2") - 0.334182081', '(349,"Main2") - 0.334182081', '(75,"StateMonad") - 0.334182081', '(79,"StateMonad") - 0.334182081', '(215,"Main2") - 0.334182081', '(80,"StateMonad") - 0.334182081', '(356,"Main2") - 0.334182081', '(256,"Main2") - 0.334182081', '(382,"Main2") - 0.334182081', '(244,"Main2") - 0.334182081', '(11,"StateMonad") - 0.334182081', '(214,"Main2") - 0.334182081', '(234,"Main2") - 0.334182081', '(77,"StateMonad") - 0.334182081', '(74,"StateMonad") - 0.334182081', '(375,"Main2") - 0.334182081', '(230,"Main2") - 0.334182081', '(61,"StateMonad") - 0.334182081', '(218,"Main2") - 0.334182081', '(211,"Main2") - 0.334182081', '(258,"Main2") - 0.334182081', '(242,"Main2") - 0.334182081', '(78,"StateMonad") - 0.334182081', '(209,"Main2") - 0.334182081', '(76,"StateMonad") - 0.334182081', '(34,"Main2") - 0.334182081', '(265,"Main2") - 0.334182081', '(38,"Main2") - 0.334182081', '(6,"StateMonad") - 0.334182081', '(232,"Main2") - 0.334182081', '(257,"Main2") - 0.334182081', '(222,"Main2") - 0.334182081', '(71,"StateMonad") - 0.334182081', '(36,"Main2") - 0.334182081', '(39,"Main2") - 0.334182081', '(5,"StateMonad") - 0.334182081', '(69,"StateMonad") - 0.334182081', '(217,"Main2") - 0.334182081', '(263,"Main2") - 0.334182081', '(70,"StateMonad") - 0.334182081', '(229,"Main2") - 0.334182081', '(227,"Main2") - 0.334182081', '(32,"Main2") - 0.334182081', '(37,"Main2") - 0.334182081', '(47,"StateMonad") - 0.334182081', '(12,"StateMonad") - 0.334182081', '(228,"Main2") - 0.334182081', '(253,"Main2") - 0.334182081', '(208,"Main2") - 0.334182081', '(233,"Main2") - 0.334182081', '(40,"Main2") - 0.334182081', '(259,"Main2") - 0.334182081', '(236,"Main2") - 0.334182081', '(212,"Main2") - 0.334182081', '(73,"StateMonad") - 0.334182081', '(81,"Main2") - 0.334182081', '(41,"Main2") - 0.334182081', '(216,"Main2") - 0.334182081', '(35,"Main2") - 0.334182081', '(33,"Main2") - 0.334182081', '(68,"StateMonad") - 0.334182081', '(72,"StateMonad") - 0.334182081', '(342,"Main2") - 0.343671720', '(345,"Main2") - 0.343671720', '(341,"Main2") - 0.343671720', '(255,"Main2") - 0.351660183', '(237,"Main2") - 0.351660183', '(213,"Main2") - 0.351660183', '(254,"Main2") - 0.351660183', '(210,"Main2") - 0.351660183']
Red Rules #: 31330
SMT Solving time: 0.090603301
Gen Solving time: 0.094059802
SMT Solver calls: 41
General Solver calls: 220
# nrpcs = [0, 0, 1, 2, 1, 0, 1, 2, 2]
# post call args = 3
# func args = 6
# timeouts = 0
# branches = 37


Graph latex for: cse: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(cse)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.19, 6) (0.23, 98) (0.37, 62) (0.41, 8)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.21, 6) (0.25, 98) (0.33, 62) (0.34, 3) (0.35, 5)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


eliza
Baseline:
hpc_exp = [('CallForHPC', '76', '98', '128', '0', '0'), ('Main2', '6', '33', '524', '10', '18')]
calculate hpc converage
[('CallForHPC', 76, 98, 128, '0', '0'), ('Main2', 6, 33, 524, '10', '18')]
[('Main2', 6, 33, 524, '10', '18')]
[('10', '18')]
Last time is: 0.445588121
hpc reached = 6.3
g2 reached = 37
total = 599
% reached = 6.2
last time = 0.445588121
all_times = ['(589,"Main2") - 0.222677112', '(539,"Main2") - 0.222677112', '(591,"Main2") - 0.222677112', '(597,"Main2") - 0.222677112', '(590,"Main2") - 0.222677112', '(585,"Main2") - 0.222677112', '(595,"Main2") - 0.222677112', '(599,"Main2") - 0.222677112', '(602,"Main2") - 0.222677112', '(598,"Main2") - 0.222677112', '(601,"Main2") - 0.222677112', '(594,"Main2") - 0.222677112', '(515,"Main2") - 0.222677112', '(596,"Main2") - 0.222677112', '(593,"Main2") - 0.222677112', '(600,"Main2") - 0.222677112', '(592,"Main2") - 0.222677112', '(577,"Main2") - 0.222677112', '(581,"Main2") - 0.222677112', '(587,"Main2") - 0.382299447', '(584,"Main2") - 0.382299447', '(569,"Main2") - 0.382299447', '(564,"Main2") - 0.382299447', '(586,"Main2") - 0.382299447', '(570,"Main2") - 0.382299447', '(582,"Main2") - 0.382299447', '(571,"Main2") - 0.382299447', '(565,"Main2") - 0.382299447', '(583,"Main2") - 0.382299447', '(588,"Main2") - 0.382299447', '(540,"Main2") - 0.445588121', '(567,"Main2") - 0.445588121', '(545,"Main2") - 0.445588121', '(568,"Main2") - 0.445588121', '(566,"Main2") - 0.445588121', '(541,"Main2") - 0.445588121', '(546,"Main2") - 0.445588121']
Red Rules #: 18527
SMT Solving time: 0.298392521
Gen Solving time: 0.304558858
SMT Solver calls: 171
General Solver calls: 177
# nrpcs = []
# post call args = 14
# func args = 0
# timeouts = 0
# branches = 28
NRPC:
hpc_exp = [('CallForHPC', '76', '89', '117', '0', '0'), ('Main2', '6', '33', '524', '10', '18')]
calculate hpc converage
[('CallForHPC', 76, 89, 117, '0', '0'), ('Main2', 6, 33, 524, '10', '18')]
[('Main2', 6, 33, 524, '10', '18')]
[('10', '18')]
Last time is: 0.458952415
hpc reached = 6.3
g2 reached = 37
total = 599
% reached = 6.2
last time = 0.458952415
all_times = ['(589,"Main2") - 0.225400513', '(539,"Main2") - 0.225400513', '(591,"Main2") - 0.225400513', '(597,"Main2") - 0.225400513', '(590,"Main2") - 0.225400513', '(585,"Main2") - 0.225400513', '(595,"Main2") - 0.225400513', '(599,"Main2") - 0.225400513', '(602,"Main2") - 0.225400513', '(598,"Main2") - 0.225400513', '(601,"Main2") - 0.225400513', '(594,"Main2") - 0.225400513', '(515,"Main2") - 0.225400513', '(596,"Main2") - 0.225400513', '(593,"Main2") - 0.225400513', '(600,"Main2") - 0.225400513', '(592,"Main2") - 0.225400513', '(577,"Main2") - 0.225400513', '(581,"Main2") - 0.225400513', '(587,"Main2") - 0.393208078', '(584,"Main2") - 0.393208078', '(569,"Main2") - 0.393208078', '(564,"Main2") - 0.393208078', '(586,"Main2") - 0.393208078', '(570,"Main2") - 0.393208078', '(582,"Main2") - 0.393208078', '(571,"Main2") - 0.393208078', '(565,"Main2") - 0.393208078', '(583,"Main2") - 0.393208078', '(588,"Main2") - 0.393208078', '(540,"Main2") - 0.458952415', '(567,"Main2") - 0.458952415', '(545,"Main2") - 0.458952415', '(568,"Main2") - 0.458952415', '(566,"Main2") - 0.458952415', '(541,"Main2") - 0.458952415', '(546,"Main2") - 0.458952415']
Red Rules #: 18329
SMT Solving time: 0.281490124
Gen Solving time: 0.286597531
SMT Solver calls: 167
General Solver calls: 174
# nrpcs = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# post call args = 13
# func args = 0
# timeouts = 0
# branches = 28


Graph latex for: eliza: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(eliza)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.22, 19) (0.38, 11) (0.45, 7)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.23, 19) (0.39, 11) (0.46, 7)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


expert
Baseline:
hpc_exp = [('CallForHPC', '63', '48', '76', '0', '0'), ('Knowledge', '25', '37', '145', '8', '13'), ('Main2', '7', '12', '154', '3', '11'), ('Match', '0', '0', '92', '8', '18'), ('Result', '0', '0', '14', '0', '4'), ('Search', '0', '0', '116', '3', '10'), ('Table', '0', '0', '310', '21', '39')]
calculate hpc converage
[('CallForHPC', 63, 48, 76, '0', '0'), ('Knowledge', 25, 37, 145, '8', '13'), ('Main2', 7, 12, 154, '3', '11'), ('Match', 0, 0, 92, '8', '18'), ('Result', 0, 0, 14, '0', '4'), ('Search', 0, 0, 116, '3', '10'), ('Table', 0, 0, 310, '21', '39')]
[('Knowledge', 25, 37, 145, '8', '13'), ('Main2', 7, 12, 154, '3', '11'), ('Match', 0, 0, 92, '8', '18'), ('Result', 0, 0, 14, '0', '4'), ('Search', 0, 0, 116, '3', '10'), ('Table', 0, 0, 310, '21', '39')]
[('8', '13'), ('3', '11'), ('8', '18'), ('0', '4'), ('3', '10'), ('21', '39')]
Last time is: 0.262783257
hpc reached = 5.9
g2 reached = 43
total = 889
% reached = 4.8
last time = 0.262783257
all_times = ['(159,"Main2") - 0.203249288', '(170,"Main2") - 0.203249288', '(93,"Knowledge") - 0.203249288', '(114,"Knowledge") - 0.203249288', '(172,"Main2") - 0.203249288', '(160,"Main2") - 0.203249288', '(167,"Knowledge") - 0.203249288', '(168,"Main2") - 0.203249288', '(131,"Main2") - 0.203249288', '(90,"Knowledge") - 0.203249288', '(169,"Main2") - 0.203249288', '(158,"Main2") - 0.203249288', '(132,"Main2") - 0.203249288', '(133,"Main2") - 0.203249288', '(134,"Main2") - 0.203249288', '(175,"Main2") - 0.203249288', '(174,"Main2") - 0.203249288', '(130,"Main2") - 0.203249288', '(135,"Main2") - 0.203249288', '(25,"Knowledge") - 0.262783257', '(102,"Knowledge") - 0.262783257', '(103,"Knowledge") - 0.262783257', '(92,"Knowledge") - 0.262783257', '(100,"Knowledge") - 0.262783257', '(157,"Knowledge") - 0.262783257', '(84,"Knowledge") - 0.262783257', '(33,"Knowledge") - 0.262783257', '(156,"Knowledge") - 0.262783257', '(113,"Knowledge") - 0.262783257', '(109,"Knowledge") - 0.262783257', '(23,"Knowledge") - 0.262783257', '(83,"Knowledge") - 0.262783257', '(87,"Knowledge") - 0.262783257', '(28,"Knowledge") - 0.262783257', '(111,"Knowledge") - 0.262783257', '(112,"Knowledge") - 0.262783257', '(65,"Knowledge") - 0.262783257', '(27,"Knowledge") - 0.262783257', '(166,"Knowledge") - 0.262783257', '(88,"Knowledge") - 0.262783257', '(31,"Knowledge") - 0.262783257', '(24,"Knowledge") - 0.262783257', '(32,"Knowledge") - 0.262783257']
Red Rules #: 11365
SMT Solving time: 0.497968615
Gen Solving time: 0.500403335
SMT Solver calls: 83
General Solver calls: 89
# nrpcs = []
# post call args = 9
# func args = 0
# timeouts = 0
# branches = 138
NRPC:
hpc_exp = [('CallForHPC', '63', '48', '76', '0', '0'), ('Knowledge', '25', '37', '145', '8', '13'), ('Main2', '7', '12', '154', '3', '11'), ('Match', '0', '0', '92', '8', '18'), ('Result', '0', '0', '14', '0', '4'), ('Search', '0', '0', '116', '3', '10'), ('Table', '0', '0', '310', '21', '39')]
calculate hpc converage
[('CallForHPC', 63, 48, 76, '0', '0'), ('Knowledge', 25, 37, 145, '8', '13'), ('Main2', 7, 12, 154, '3', '11'), ('Match', 0, 0, 92, '8', '18'), ('Result', 0, 0, 14, '0', '4'), ('Search', 0, 0, 116, '3', '10'), ('Table', 0, 0, 310, '21', '39')]
[('Knowledge', 25, 37, 145, '8', '13'), ('Main2', 7, 12, 154, '3', '11'), ('Match', 0, 0, 92, '8', '18'), ('Result', 0, 0, 14, '0', '4'), ('Search', 0, 0, 116, '3', '10'), ('Table', 0, 0, 310, '21', '39')]
[('8', '13'), ('3', '11'), ('8', '18'), ('0', '4'), ('3', '10'), ('21', '39')]
Last time is: 0.273918697
hpc reached = 5.9
g2 reached = 43
total = 889
% reached = 4.8
last time = 0.273918697
all_times = ['(159,"Main2") - 0.210566032', '(170,"Main2") - 0.210566032', '(93,"Knowledge") - 0.210566032', '(114,"Knowledge") - 0.210566032', '(172,"Main2") - 0.210566032', '(160,"Main2") - 0.210566032', '(167,"Knowledge") - 0.210566032', '(168,"Main2") - 0.210566032', '(131,"Main2") - 0.210566032', '(90,"Knowledge") - 0.210566032', '(169,"Main2") - 0.210566032', '(158,"Main2") - 0.210566032', '(132,"Main2") - 0.210566032', '(133,"Main2") - 0.210566032', '(134,"Main2") - 0.210566032', '(175,"Main2") - 0.210566032', '(174,"Main2") - 0.210566032', '(130,"Main2") - 0.210566032', '(135,"Main2") - 0.210566032', '(25,"Knowledge") - 0.273918697', '(102,"Knowledge") - 0.273918697', '(103,"Knowledge") - 0.273918697', '(92,"Knowledge") - 0.273918697', '(100,"Knowledge") - 0.273918697', '(157,"Knowledge") - 0.273918697', '(84,"Knowledge") - 0.273918697', '(33,"Knowledge") - 0.273918697', '(156,"Knowledge") - 0.273918697', '(113,"Knowledge") - 0.273918697', '(109,"Knowledge") - 0.273918697', '(23,"Knowledge") - 0.273918697', '(83,"Knowledge") - 0.273918697', '(87,"Knowledge") - 0.273918697', '(28,"Knowledge") - 0.273918697', '(111,"Knowledge") - 0.273918697', '(112,"Knowledge") - 0.273918697', '(65,"Knowledge") - 0.273918697', '(27,"Knowledge") - 0.273918697', '(166,"Knowledge") - 0.273918697', '(88,"Knowledge") - 0.273918697', '(31,"Knowledge") - 0.273918697', '(24,"Knowledge") - 0.273918697', '(32,"Knowledge") - 0.273918697']
Red Rules #: 11516
SMT Solving time: 0.471896057
Gen Solving time: 0.474296269
SMT Solver calls: 85
General Solver calls: 91
# nrpcs = [0, 0, 0, 0, 0, 0, 0, 0, 0]
# post call args = 9
# func args = 0
# timeouts = 0
# branches = 138


Graph latex for: expert: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(expert)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 19) (0.26, 24)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.21, 19) (0.27, 24)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


gcd
Baseline:
hpc_exp = [('CallForHPC', '90', '10', '11', '0', '0'), ('Main2', '76', '93', '121', '3', '10')]
calculate hpc converage
[('CallForHPC', 90, 10, 11, '0', '0'), ('Main2', 76, 93, 121, '3', '10')]
[('Main2', 76, 93, 121, '3', '10')]
[('3', '10')]
Last time is: 0.700678898
hpc reached = 76.9
g2 reached = 108
total = 123
% reached = 87.8
last time = 0.700678898
all_times = ['(138,"Main2") - 0.191724868', '(87,"Main2") - 0.191724868', '(111,"Main2") - 0.191724868', '(101,"Main2") - 0.191724868', '(86,"Main2") - 0.191724868', '(85,"Main2") - 0.191724868', '(96,"Main2") - 0.191724868', '(112,"Main2") - 0.191724868', '(137,"Main2") - 0.191724868', '(89,"Main2") - 0.191724868', '(110,"Main2") - 0.191724868', '(84,"Main2") - 0.191724868', '(136,"Main2") - 0.191724868', '(77,"Main2") - 0.191724868', '(78,"Main2") - 0.191724868', '(133,"Main2") - 0.191724868', '(82,"Main2") - 0.191724868', '(83,"Main2") - 0.191724868', '(134,"Main2") - 0.191724868', '(88,"Main2") - 0.191724868', '(135,"Main2") - 0.191724868', '(81,"Main2") - 0.191724868', '(80,"Main2") - 0.191724868', '(102,"Main2") - 0.191724868', '(92,"Main2") - 0.223230411', '(90,"Main2") - 0.223230411', '(94,"Main2") - 0.223230411', '(95,"Main2") - 0.223230411', '(79,"Main2") - 0.223230411', '(97,"Main2") - 0.223230411', '(91,"Main2") - 0.223230411', '(93,"Main2") - 0.223230411', '(73,"Main2") - 0.700678898', '(100,"Main2") - 0.700678898', '(117,"Main2") - 0.700678898', '(74,"Main2") - 0.700678898', '(119,"Main2") - 0.700678898', '(116,"Main2") - 0.700678898', '(30,"Main2") - 0.700678898', '(126,"Main2") - 0.700678898', '(109,"Main2") - 0.700678898', '(25,"Main2") - 0.700678898', '(115,"Main2") - 0.700678898', '(17,"Main2") - 0.700678898', '(5,"Main2") - 0.700678898', '(22,"Main2") - 0.700678898', '(31,"Main2") - 0.700678898', '(129,"Main2") - 0.700678898', '(14,"Main2") - 0.700678898', '(66,"Main2") - 0.700678898', '(20,"Main2") - 0.700678898', '(118,"Main2") - 0.700678898', '(113,"Main2") - 0.700678898', '(13,"Main2") - 0.700678898', '(44,"Main2") - 0.700678898', '(108,"Main2") - 0.700678898', '(123,"Main2") - 0.700678898', '(128,"Main2") - 0.700678898', '(9,"Main2") - 0.700678898', '(105,"Main2") - 0.700678898', '(19,"Main2") - 0.700678898', '(27,"Main2") - 0.700678898', '(4,"Main2") - 0.700678898', '(34,"Main2") - 0.700678898', '(38,"Main2") - 0.700678898', '(26,"Main2") - 0.700678898', '(75,"Main2") - 0.700678898', '(131,"Main2") - 0.700678898', '(28,"Main2") - 0.700678898', '(67,"Main2") - 0.700678898', '(15,"Main2") - 0.700678898', '(107,"Main2") - 0.700678898', '(36,"Main2") - 0.700678898', '(12,"Main2") - 0.700678898', '(39,"Main2") - 0.700678898', '(72,"Main2") - 0.700678898', '(42,"Main2") - 0.700678898', '(10,"Main2") - 0.700678898', '(106,"Main2") - 0.700678898', '(132,"Main2") - 0.700678898', '(24,"Main2") - 0.700678898', '(32,"Main2") - 0.700678898', '(6,"Main2") - 0.700678898', '(37,"Main2") - 0.700678898', '(63,"Main2") - 0.700678898', '(114,"Main2") - 0.700678898', '(76,"Main2") - 0.700678898', '(98,"Main2") - 0.700678898', '(45,"Main2") - 0.700678898', '(40,"Main2") - 0.700678898', '(64,"Main2") - 0.700678898', '(23,"Main2") - 0.700678898', '(121,"Main2") - 0.700678898', '(125,"Main2") - 0.700678898', '(21,"Main2") - 0.700678898', '(29,"Main2") - 0.700678898', '(8,"Main2") - 0.700678898', '(18,"Main2") - 0.700678898', '(130,"Main2") - 0.700678898', '(62,"Main2") - 0.700678898', '(41,"Main2") - 0.700678898', '(16,"Main2") - 0.700678898', '(35,"Main2") - 0.700678898', '(33,"Main2") - 0.700678898', '(99,"Main2") - 0.700678898', '(7,"Main2") - 0.700678898', '(43,"Main2") - 0.700678898', '(11,"Main2") - 0.700678898']
Red Rules #: 30302
SMT Solving time: 0.169704236
Gen Solving time: 0.173875732
SMT Solver calls: 64
General Solver calls: 95
# nrpcs = []
# post call args = 16
# func args = 0
# timeouts = 0
# branches = 13
NRPC:
hpc_exp = [('CallForHPC', '99', '133', '134', '0', '6'), ('Main2', '79', '96', '121', '3', '10')]
calculate hpc converage
[('CallForHPC', 99, 133, 134, '0', '6'), ('Main2', 79, 96, 121, '3', '10')]
[('Main2', 79, 96, 121, '3', '10')]
[('3', '10')]
Last time is: 0.904386662
hpc reached = 79.3
g2 reached = 107
total = 123
% reached = 87.0
last time = 0.904386662
all_times = ['(138,"Main2") - 0.194025237', '(87,"Main2") - 0.194025237', '(111,"Main2") - 0.194025237', '(101,"Main2") - 0.194025237', '(86,"Main2") - 0.194025237', '(85,"Main2") - 0.194025237', '(96,"Main2") - 0.194025237', '(112,"Main2") - 0.194025237', '(137,"Main2") - 0.194025237', '(89,"Main2") - 0.194025237', '(110,"Main2") - 0.194025237', '(84,"Main2") - 0.194025237', '(136,"Main2") - 0.194025237', '(77,"Main2") - 0.194025237', '(78,"Main2") - 0.194025237', '(133,"Main2") - 0.194025237', '(82,"Main2") - 0.194025237', '(83,"Main2") - 0.194025237', '(134,"Main2") - 0.194025237', '(88,"Main2") - 0.194025237', '(135,"Main2") - 0.194025237', '(81,"Main2") - 0.194025237', '(80,"Main2") - 0.194025237', '(102,"Main2") - 0.194025237', '(92,"Main2") - 0.224980751', '(90,"Main2") - 0.224980751', '(94,"Main2") - 0.224980751', '(95,"Main2") - 0.224980751', '(79,"Main2") - 0.224980751', '(97,"Main2") - 0.224980751', '(91,"Main2") - 0.224980751', '(93,"Main2") - 0.224980751', '(100,"Main2") - 0.311871605', '(30,"Main2") - 0.311871605', '(126,"Main2") - 0.311871605', '(109,"Main2") - 0.311871605', '(5,"Main2") - 0.311871605', '(31,"Main2") - 0.311871605', '(14,"Main2") - 0.311871605', '(13,"Main2") - 0.311871605', '(44,"Main2") - 0.311871605', '(108,"Main2") - 0.311871605', '(123,"Main2") - 0.311871605', '(105,"Main2") - 0.311871605', '(19,"Main2") - 0.311871605', '(4,"Main2") - 0.311871605', '(34,"Main2") - 0.311871605', '(38,"Main2") - 0.311871605', '(131,"Main2") - 0.311871605', '(67,"Main2") - 0.311871605', '(15,"Main2") - 0.311871605', '(107,"Main2") - 0.311871605', '(12,"Main2") - 0.311871605', '(39,"Main2") - 0.311871605', '(42,"Main2") - 0.311871605', '(106,"Main2") - 0.311871605', '(132,"Main2") - 0.311871605', '(32,"Main2") - 0.311871605', '(6,"Main2") - 0.311871605', '(63,"Main2") - 0.311871605', '(76,"Main2") - 0.311871605', '(98,"Main2") - 0.311871605', '(45,"Main2") - 0.311871605', '(121,"Main2") - 0.311871605', '(8,"Main2") - 0.311871605', '(18,"Main2") - 0.311871605', '(35,"Main2") - 0.311871605', '(33,"Main2") - 0.311871605', '(99,"Main2") - 0.311871605', '(7,"Main2") - 0.311871605', '(43,"Main2") - 0.311871605', '(117,"Main2") - 0.358135872', '(119,"Main2") - 0.358135872', '(116,"Main2") - 0.358135872', '(25,"Main2") - 0.358135872', '(115,"Main2") - 0.358135872', '(17,"Main2") - 0.358135872', '(22,"Main2") - 0.358135872', '(20,"Main2") - 0.358135872', '(118,"Main2") - 0.358135872', '(113,"Main2") - 0.358135872', '(122,"Main2") - 0.358135872', '(9,"Main2") - 0.358135872', '(27,"Main2") - 0.358135872', '(26,"Main2") - 0.358135872', '(28,"Main2") - 0.358135872', '(36,"Main2") - 0.358135872', '(10,"Main2") - 0.358135872', '(24,"Main2") - 0.358135872', '(37,"Main2") - 0.358135872', '(114,"Main2") - 0.358135872', '(40,"Main2") - 0.358135872', '(23,"Main2") - 0.358135872', '(21,"Main2") - 0.358135872', '(29,"Main2") - 0.358135872', '(41,"Main2") - 0.358135872', '(16,"Main2") - 0.358135872', '(11,"Main2") - 0.358135872', '(129,"Main2") - 0.421779081', '(128,"Main2") - 0.421779081', '(64,"Main2") - 0.421779081', '(125,"Main2") - 0.421779081', '(130,"Main2") - 0.421779081', '(62,"Main2") - 0.601437820', '(120,"Main2") - 0.631850277', '(124,"Main2") - 0.904386662', '(127,"Main2") - 0.904386662']
Red Rules #: 25480
SMT Solving time: 0.202791045
Gen Solving time: 0.205183198
SMT Solver calls: 80
General Solver calls: 112
# nrpcs = [0, 0, 0, 0, 1, 2, 3, 3, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0]
# post call args = 19
# func args = 11
# timeouts = 0
# branches = 13


Graph latex for: gcd: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(gcd)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.19, 24) (0.22, 8) (0.7, 76)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.19, 24) (0.22, 8) (0.31, 39) (0.36, 27) (0.42, 5) (0.6, 1) (0.63, 1) (0.9, 2)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


integer
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '113', '0', '2')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 113, '0', '2')]
[('Main2', 0, 0, 113, '0', '2')]
[('0', '2')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 110
% reached = 0.0
last time = 
all_times = []
Red Rules #: 23193
SMT Solving time: 0.348308628
Gen Solving time: 0.354034308
SMT Solver calls: 190
General Solver calls: 274
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 2
NRPC:
hpc_exp = [('CallForHPC', '70', '862', '1221', '0', '46'), ('Main2', '77', '88', '113', '0', '2')]
calculate hpc converage
[('CallForHPC', 70, 862, 1221, '0', '46'), ('Main2', 77, 88, 113, '0', '2')]
[('Main2', 77, 88, 113, '0', '2')]
[('0', '2')]
Last time is: 0.358461701
hpc reached = 77.9
g2 reached = 60
total = 110
% reached = 54.5
last time = 0.358461701
all_times = ['(73,"Main2") - 0.337093403', '(100,"Main2") - 0.337093403', '(74,"Main2") - 0.337093403', '(2,"Main2") - 0.337093403', '(116,"Main2") - 0.337093403', '(68,"Main2") - 0.337093403', '(3,"Main2") - 0.337093403', '(30,"Main2") - 0.337093403', '(111,"Main2") - 0.337093403', '(25,"Main2") - 0.337093403', '(103,"Main2") - 0.337093403', '(115,"Main2") - 0.337093403', '(17,"Main2") - 0.337093403', '(5,"Main2") - 0.337093403', '(101,"Main2") - 0.337093403', '(22,"Main2") - 0.337093403', '(56,"Main2") - 0.337093403', '(55,"Main2") - 0.337093403', '(120,"Main2") - 0.337093403', '(31,"Main2") - 0.337093403', '(14,"Main2") - 0.337093403', '(20,"Main2") - 0.337093403', '(13,"Main2") - 0.337093403', '(53,"Main2") - 0.337093403', '(52,"Main2") - 0.337093403', '(9,"Main2") - 0.337093403', '(54,"Main2") - 0.337093403', '(105,"Main2") - 0.337093403', '(19,"Main2") - 0.337093403', '(57,"Main2") - 0.337093403', '(1,"Main2") - 0.337093403', '(4,"Main2") - 0.337093403', '(58,"Main2") - 0.337093403', '(28,"Main2") - 0.337093403', '(67,"Main2") - 0.337093403', '(15,"Main2") - 0.337093403', '(78,"Main2") - 0.337093403', '(107,"Main2") - 0.337093403', '(12,"Main2") - 0.337093403', '(72,"Main2") - 0.337093403', '(10,"Main2") - 0.337093403', '(106,"Main2") - 0.337093403', '(51,"Main2") - 0.337093403', '(24,"Main2") - 0.337093403', '(6,"Main2") - 0.337093403', '(114,"Main2") - 0.337093403', '(23,"Main2") - 0.337093403', '(121,"Main2") - 0.337093403', '(104,"Main2") - 0.337093403', '(21,"Main2") - 0.337093403', '(29,"Main2") - 0.337093403', '(8,"Main2") - 0.337093403', '(18,"Main2") - 0.337093403', '(70,"Main2") - 0.337093403', '(16,"Main2") - 0.337093403', '(7,"Main2") - 0.337093403', '(11,"Main2") - 0.337093403', '(102,"Main2") - 0.337093403', '(26,"Main2") - 0.349974344', '(27,"Main2") - 0.358461701']
Red Rules #: 15341
SMT Solving time: 0.385634596
Gen Solving time: 0.391215608
SMT Solver calls: 173
General Solver calls: 258
# nrpcs = [1, 2, 3, 3, 0, 1, 0, 1, 1, 5, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 3, 1, 0, 1, 0, 1, 2, 2, 3, 0, 1, 0, 1, 3]
# post call args = 0
# func args = 47
# timeouts = 8
# branches = 2


Graph latex for: integer: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(integer)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.34, 58) (0.35, 1) (0.36, 1)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


lcss
Baseline:
hpc_exp = [('CallForHPC', '75', '21', '28', '0', '0'), ('Main2', '55', '74', '134', '4', '14')]
calculate hpc converage
[('CallForHPC', 75, 21, 28, '0', '0'), ('Main2', 55, 74, 134, '4', '14')]
[('Main2', 55, 74, 134, '4', '14')]
[('4', '14')]
Last time is: 0.180387294
hpc reached = 55.2
g2 reached = 12
total = 155
% reached = 7.7
last time = 0.180387294
all_times = ['(152,"Main2") - 0.180387294', '(141,"Main2") - 0.180387294', '(151,"Main2") - 0.180387294', '(155,"Main2") - 0.180387294', '(150,"Main2") - 0.180387294', '(154,"Main2") - 0.180387294', '(153,"Main2") - 0.180387294', '(142,"Main2") - 0.180387294', '(144,"Main2") - 0.180387294', '(134,"Main2") - 0.180387294', '(143,"Main2") - 0.180387294', '(43,"Main2") - 0.180387294']
Red Rules #: 36747
SMT Solving time: 0.130582753
Gen Solving time: 0.134711561
SMT Solver calls: 54
General Solver calls: 1176
# nrpcs = []
# post call args = 2
# func args = 0
# timeouts = 0
# branches = 18
NRPC:
hpc_exp = [('CallForHPC', '93', '296', '318', '0', '16'), ('Main2', '85', '115', '134', '4', '14')]
calculate hpc converage
[('CallForHPC', 93, 296, 318, '0', '16'), ('Main2', 85, 115, 134, '4', '14')]
[('Main2', 85, 115, 134, '4', '14')]
[('4', '14')]
Last time is: 0.289619232
hpc reached = 85.8
g2 reached = 28
total = 155
% reached = 18.1
last time = 0.289619232
all_times = ['(152,"Main2") - 0.181585182', '(141,"Main2") - 0.181585182', '(151,"Main2") - 0.181585182', '(155,"Main2") - 0.181585182', '(150,"Main2") - 0.181585182', '(154,"Main2") - 0.181585182', '(153,"Main2") - 0.181585182', '(142,"Main2") - 0.181585182', '(144,"Main2") - 0.181585182', '(134,"Main2") - 0.181585182', '(143,"Main2") - 0.181585182', '(43,"Main2") - 0.181585182', '(119,"Main2") - 0.248741864', '(116,"Main2") - 0.248741864', '(87,"Main2") - 0.248741864', '(120,"Main2") - 0.248741864', '(113,"Main2") - 0.248741864', '(140,"Main2") - 0.248741864', '(146,"Main2") - 0.248741864', '(147,"Main2") - 0.248741864', '(148,"Main2") - 0.248741864', '(145,"Main2") - 0.248741864', '(133,"Main2") - 0.248741864', '(88,"Main2") - 0.248741864', '(149,"Main2") - 0.248741864', '(135,"Main2") - 0.248741864', '(86,"Main2") - 0.289619232', '(118,"Main2") - 0.289619232']
Red Rules #: 23776
SMT Solving time: 0.245495288
Gen Solving time: 0.25032411
SMT Solver calls: 118
General Solver calls: 708
# nrpcs = [0, 0, 5, 10, 3, 2, 1, 0, 0, 0, 0, 1, 9, 2, 3, 4, 0, 0]
# post call args = 2
# func args = 16
# timeouts = 0
# branches = 18


Graph latex for: lcss: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(lcss)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.18, 12)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.18, 12) (0.25, 14) (0.29, 2)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


life
Baseline:
hpc_exp = [('CallForHPC', '66', '6', '9', '0', '0'), ('Main2', '21', '40', '186', '5', '9')]
calculate hpc converage
[('CallForHPC', 66, 6, 9, '0', '0'), ('Main2', 21, 40, 186, '5', '9')]
[('Main2', 21, 40, 186, '5', '9')]
[('5', '9')]
Last time is: 0.399783223
hpc reached = 21.5
g2 reached = 48
total = 161
% reached = 29.8
last time = 0.399783223
all_times = ['(2,"Main2") - 0.399783223', '(184,"Main2") - 0.399783223', '(173,"Main2") - 0.399783223', '(30,"Main2") - 0.399783223', '(185,"Main2") - 0.399783223', '(126,"Main2") - 0.399783223', '(179,"Main2") - 0.399783223', '(5,"Main2") - 0.399783223', '(177,"Main2") - 0.399783223', '(205,"Main2") - 0.399783223', '(176,"Main2") - 0.399783223', '(31,"Main2") - 0.399783223', '(204,"Main2") - 0.399783223', '(66,"Main2") - 0.399783223', '(128,"Main2") - 0.399783223', '(27,"Main2") - 0.399783223', '(209,"Main2") - 0.399783223', '(1,"Main2") - 0.399783223', '(4,"Main2") - 0.399783223', '(38,"Main2") - 0.399783223', '(206,"Main2") - 0.399783223', '(65,"Main2") - 0.399783223', '(58,"Main2") - 0.399783223', '(187,"Main2") - 0.399783223', '(26,"Main2") - 0.399783223', '(36,"Main2") - 0.399783223', '(39,"Main2") - 0.399783223', '(178,"Main2") - 0.399783223', '(207,"Main2") - 0.399783223', '(6,"Main2") - 0.399783223', '(71,"Main2") - 0.399783223', '(37,"Main2") - 0.399783223', '(186,"Main2") - 0.399783223', '(183,"Main2") - 0.399783223', '(180,"Main2") - 0.399783223', '(208,"Main2") - 0.399783223', '(40,"Main2") - 0.399783223', '(175,"Main2") - 0.399783223', '(127,"Main2") - 0.399783223', '(125,"Main2") - 0.399783223', '(61,"Main2") - 0.399783223', '(174,"Main2") - 0.399783223', '(62,"Main2") - 0.399783223', '(70,"Main2") - 0.399783223', '(41,"Main2") - 0.399783223', '(16,"Main2") - 0.399783223', '(0,"Main2") - 0.399783223', '(210,"Main2") - 0.399783223']
Red Rules #: 36527
SMT Solving time: 0.139672758
Gen Solving time: 0.143010455
SMT Solver calls: 60
General Solver calls: 315
# nrpcs = []
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 14
NRPC:
hpc_exp = [('CallForHPC', '95', '1019', '1072', '0', '116'), ('Main2', '52', '98', '186', '5', '9')]
calculate hpc converage
[('CallForHPC', 95, 1019, 1072, '0', '116'), ('Main2', 52, 98, 186, '5', '9')]
[('Main2', 52, 98, 186, '5', '9')]
[('5', '9')]
Last time is: 0.744286442
hpc reached = 52.7
g2 reached = 99
total = 161
% reached = 61.5
last time = 0.744286442
all_times = ['(184,"Main2") - 0.250709405', '(68,"Main2") - 0.250709405', '(185,"Main2") - 0.250709405', '(126,"Main2") - 0.250709405', '(179,"Main2") - 0.250709405', '(197,"Main2") - 0.250709405', '(191,"Main2") - 0.250709405', '(177,"Main2") - 0.250709405', '(205,"Main2") - 0.250709405', '(56,"Main2") - 0.250709405', '(176,"Main2") - 0.250709405', '(195,"Main2") - 0.250709405', '(55,"Main2") - 0.250709405', '(129,"Main2") - 0.250709405', '(204,"Main2") - 0.250709405', '(66,"Main2") - 0.250709405', '(190,"Main2") - 0.250709405', '(193,"Main2") - 0.250709405', '(69,"Main2") - 0.250709405', '(172,"Main2") - 0.250709405', '(52,"Main2") - 0.250709405', '(128,"Main2") - 0.250709405', '(196,"Main2") - 0.250709405', '(54,"Main2") - 0.250709405', '(189,"Main2") - 0.250709405', '(209,"Main2") - 0.250709405', '(1,"Main2") - 0.250709405', '(4,"Main2") - 0.250709405', '(206,"Main2") - 0.250709405', '(65,"Main2") - 0.250709405', '(194,"Main2") - 0.250709405', '(58,"Main2") - 0.250709405', '(187,"Main2") - 0.250709405', '(50,"Main2") - 0.250709405', '(178,"Main2") - 0.250709405', '(207,"Main2") - 0.250709405', '(203,"Main2") - 0.250709405', '(51,"Main2") - 0.250709405', '(71,"Main2") - 0.250709405', '(186,"Main2") - 0.250709405', '(49,"Main2") - 0.250709405', '(183,"Main2") - 0.250709405', '(180,"Main2") - 0.250709405', '(208,"Main2") - 0.250709405', '(121,"Main2") - 0.250709405', '(127,"Main2") - 0.250709405', '(125,"Main2") - 0.250709405', '(61,"Main2") - 0.250709405', '(171,"Main2") - 0.250709405', '(174,"Main2") - 0.250709405', '(188,"Main2") - 0.250709405', '(62,"Main2") - 0.250709405', '(70,"Main2") - 0.250709405', '(16,"Main2") - 0.250709405', '(181,"Main2") - 0.250709405', '(0,"Main2") - 0.250709405', '(210,"Main2") - 0.250709405', '(192,"Main2") - 0.293044874', '(43,"Main2") - 0.293044874', '(124,"Main2") - 0.325770543', '(122,"Main2") - 0.325770543', '(53,"Main2") - 0.325770543', '(67,"Main2") - 0.325770543', '(182,"Main2") - 0.325770543', '(123,"Main2") - 0.338349785', '(2,"Main2") - 0.435233881', '(173,"Main2") - 0.435233881', '(30,"Main2") - 0.435233881', '(5,"Main2") - 0.435233881', '(31,"Main2") - 0.435233881', '(27,"Main2") - 0.435233881', '(38,"Main2") - 0.435233881', '(26,"Main2") - 0.435233881', '(36,"Main2") - 0.435233881', '(39,"Main2") - 0.435233881', '(6,"Main2") - 0.435233881', '(37,"Main2") - 0.435233881', '(40,"Main2") - 0.435233881', '(175,"Main2") - 0.435233881', '(41,"Main2") - 0.435233881', '(57,"Main2") - 0.436449387', '(63,"Main2") - 0.436449387', '(130,"Main2") - 0.573584457', '(48,"Main2") - 0.665760800', '(44,"Main2") - 0.665760800', '(46,"Main2") - 0.665760800', '(42,"Main2") - 0.665760800', '(45,"Main2") - 0.665760800', '(3,"Main2") - 0.744286442', '(59,"Main2") - 0.744286442', '(14,"Main2") - 0.744286442', '(13,"Main2") - 0.744286442', '(9,"Main2") - 0.744286442', '(60,"Main2") - 0.744286442', '(15,"Main2") - 0.744286442', '(12,"Main2") - 0.744286442', '(64,"Main2") - 0.744286442', '(7,"Main2") - 0.744286442', '(11,"Main2") - 0.744286442']
Red Rules #: 22918
SMT Solving time: 0.272133552
Gen Solving time: 0.274620883
SMT Solver calls: 110
General Solver calls: 291
# nrpcs = [0, 3, 0, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 3, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 1, 2, 1, 6, 1, 2, 1, 1, 4, 4, 5, 3, 1, 4, 1, 5, 5, 3, 3]
# post call args = 1
# func args = 65
# timeouts = 0
# branches = 14


Graph latex for: life: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(life)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.4, 48)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.25, 57) (0.29, 2) (0.33, 5) (0.34, 1) (0.44, 17) (0.57, 1) (0.67, 5) (0.74, 11)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


mandel2
Baseline:
hpc_exp = [('CallForHPC', '50', '5', '10', '0', '0'), ('Main2', '70', '249', '353', '19', '41')]
calculate hpc converage
[('CallForHPC', 50, 5, 10, '0', '0'), ('Main2', 70, 249, 353, '19', '41')]
[('Main2', 70, 249, 353, '19', '41')]
[('19', '41')]
Last time is: 0.712063109
hpc reached = 70.5
g2 reached = 310
total = 445
% reached = 69.7
last time = 0.712063109
all_times = ['(152,"Main2") - 0.712063109', '(247,"Main2") - 0.712063109', '(73,"Main2") - 0.712063109', '(92,"Main2") - 0.712063109', '(90,"Main2") - 0.712063109', '(117,"Main2") - 0.712063109', '(74,"Main2") - 0.712063109', '(231,"Main2") - 0.712063109', '(321,"Main2") - 0.712063109', '(2,"Main2") - 0.712063109', '(159,"Main2") - 0.712063109', '(119,"Main2") - 0.712063109', '(184,"Main2") - 0.712063109', '(116,"Main2") - 0.712063109', '(68,"Main2") - 0.712063109', '(173,"Main2") - 0.712063109', '(124,"Main2") - 0.712063109', '(401,"Main2") - 0.712063109', '(436,"Main2") - 0.712063109', '(30,"Main2") - 0.712063109', '(138,"Main2") - 0.712063109', '(198,"Main2") - 0.712063109', '(185,"Main2") - 0.712063109', '(126,"Main2") - 0.712063109', '(431,"Main2") - 0.712063109', '(48,"Main2") - 0.712063109', '(320,"Main2") - 0.712063109', '(109,"Main2") - 0.712063109', '(215,"Main2") - 0.712063109', '(87,"Main2") - 0.712063109', '(441,"Main2") - 0.712063109', '(111,"Main2") - 0.712063109', '(434,"Main2") - 0.712063109', '(141,"Main2") - 0.712063109', '(25,"Main2") - 0.712063109', '(256,"Main2") - 0.712063109', '(179,"Main2") - 0.712063109', '(115,"Main2") - 0.712063109', '(17,"Main2") - 0.712063109', '(235,"Main2") - 0.712063109', '(197,"Main2") - 0.712063109', '(191,"Main2") - 0.712063109', '(408,"Main2") - 0.712063109', '(177,"Main2") - 0.712063109', '(101,"Main2") - 0.712063109', '(214,"Main2") - 0.712063109', '(151,"Main2") - 0.712063109', '(22,"Main2") - 0.712063109', '(205,"Main2") - 0.712063109', '(139,"Main2") - 0.712063109', '(56,"Main2") - 0.712063109', '(176,"Main2") - 0.712063109', '(195,"Main2") - 0.712063109', '(223,"Main2") - 0.712063109', '(306,"Main2") - 0.712063109', '(245,"Main2") - 0.712063109', '(55,"Main2") - 0.712063109', '(86,"Main2") - 0.712063109', '(255,"Main2") - 0.712063109', '(444,"Main2") - 0.712063109', '(166,"Main2") - 0.712063109', '(59,"Main2") - 0.712063109', '(234,"Main2") - 0.712063109', '(120,"Main2") - 0.712063109', '(85,"Main2") - 0.712063109', '(31,"Main2") - 0.712063109', '(129,"Main2") - 0.712063109', '(165,"Main2") - 0.712063109', '(96,"Main2") - 0.712063109', '(204,"Main2") - 0.712063109', '(291,"Main2") - 0.712063109', '(201,"Main2") - 0.712063109', '(304,"Main2") - 0.712063109', '(270,"Main2") - 0.712063109', '(283,"Main2") - 0.712063109', '(14,"Main2") - 0.712063109', '(112,"Main2") - 0.712063109', '(230,"Main2") - 0.712063109', '(66,"Main2") - 0.712063109', '(20,"Main2") - 0.712063109', '(190,"Main2") - 0.712063109', '(193,"Main2") - 0.712063109', '(218,"Main2") - 0.712063109', '(155,"Main2") - 0.712063109', '(170,"Main2") - 0.712063109', '(118,"Main2") - 0.712063109', '(69,"Main2") - 0.712063109', '(113,"Main2") - 0.712063109', '(202,"Main2") - 0.712063109', '(211,"Main2") - 0.712063109', '(258,"Main2") - 0.712063109', '(302,"Main2") - 0.712063109', '(13,"Main2") - 0.712063109', '(44,"Main2") - 0.712063109', '(122,"Main2") - 0.712063109', '(140,"Main2") - 0.712063109', '(53,"Main2") - 0.712063109', '(287,"Main2") - 0.712063109', '(108,"Main2") - 0.712063109', '(123,"Main2") - 0.712063109', '(157,"Main2") - 0.712063109', '(438,"Main2") - 0.712063109', '(172,"Main2") - 0.712063109', '(52,"Main2") - 0.712063109', '(300,"Main2") - 0.712063109', '(128,"Main2") - 0.712063109', '(196,"Main2") - 0.712063109', '(277,"Main2") - 0.712063109', '(440,"Main2") - 0.712063109', '(46,"Main2") - 0.712063109', '(54,"Main2") - 0.712063109', '(443,"Main2") - 0.712063109', '(105,"Main2") - 0.712063109', '(292,"Main2") - 0.712063109', '(189,"Main2") - 0.712063109', '(19,"Main2") - 0.712063109', '(308,"Main2") - 0.712063109', '(150,"Main2") - 0.712063109', '(274,"Main2") - 0.712063109', '(57,"Main2") - 0.712063109', '(312,"Main2") - 0.712063109', '(27,"Main2") - 0.712063109', '(146,"Main2") - 0.712063109', '(200,"Main2") - 0.712063109', '(209,"Main2") - 0.712063109', '(1,"Main2") - 0.712063109', '(137,"Main2") - 0.712063109', '(154,"Main2") - 0.712063109', '(89,"Main2") - 0.712063109', '(432,"Main2") - 0.712063109', '(60,"Main2") - 0.712063109', '(239,"Main2") - 0.712063109', '(110,"Main2") - 0.712063109', '(266,"Main2") - 0.712063109', '(84,"Main2") - 0.712063109', '(34,"Main2") - 0.712063109', '(147,"Main2") - 0.712063109', '(265,"Main2") - 0.712063109', '(38,"Main2") - 0.712063109', '(148,"Main2") - 0.712063109', '(309,"Main2") - 0.712063109', '(160,"Main2") - 0.712063109', '(136,"Main2") - 0.712063109', '(323,"Main2") - 0.712063109', '(206,"Main2") - 0.712063109', '(65,"Main2") - 0.712063109', '(243,"Main2") - 0.712063109', '(238,"Main2") - 0.712063109', '(94,"Main2") - 0.712063109', '(163,"Main2") - 0.712063109', '(194,"Main2") - 0.712063109', '(284,"Main2") - 0.712063109', '(221,"Main2") - 0.712063109', '(58,"Main2") - 0.712063109', '(268,"Main2") - 0.712063109', '(187,"Main2") - 0.712063109', '(95,"Main2") - 0.712063109', '(199,"Main2") - 0.712063109', '(232,"Main2") - 0.712063109', '(237,"Main2") - 0.712063109', '(26,"Main2") - 0.712063109', '(257,"Main2") - 0.712063109', '(225,"Main2") - 0.712063109', '(75,"Main2") - 0.712063109', '(168,"Main2") - 0.712063109', '(50,"Main2") - 0.712063109', '(131,"Main2") - 0.712063109', '(77,"Main2") - 0.712063109', '(28,"Main2") - 0.712063109', '(67,"Main2") - 0.712063109', '(299,"Main2") - 0.712063109', '(224,"Main2") - 0.712063109', '(264,"Main2") - 0.712063109', '(145,"Main2") - 0.712063109', '(15,"Main2") - 0.712063109', '(407,"Main2") - 0.712063109', '(78,"Main2") - 0.712063109', '(107,"Main2") - 0.712063109', '(36,"Main2") - 0.712063109', '(398,"Main2") - 0.712063109', '(169,"Main2") - 0.712063109', '(39,"Main2") - 0.712063109', '(226,"Main2") - 0.712063109', '(72,"Main2") - 0.712063109', '(42,"Main2") - 0.712063109', '(79,"Main2") - 0.712063109', '(294,"Main2") - 0.712063109', '(297,"Main2") - 0.712063109', '(404,"Main2") - 0.712063109', '(249,"Main2") - 0.712063109', '(289,"Main2") - 0.712063109', '(178,"Main2") - 0.712063109', '(217,"Main2") - 0.712063109', '(207,"Main2") - 0.712063109', '(97,"Main2") - 0.712063109', '(263,"Main2") - 0.712063109', '(158,"Main2") - 0.712063109', '(229,"Main2") - 0.712063109', '(402,"Main2") - 0.712063109', '(203,"Main2") - 0.712063109', '(106,"Main2") - 0.712063109', '(51,"Main2") - 0.712063109', '(132,"Main2") - 0.712063109', '(24,"Main2") - 0.712063109', '(241,"Main2") - 0.712063109', '(182,"Main2") - 0.712063109', '(156,"Main2") - 0.712063109', '(167,"Main2") - 0.712063109', '(227,"Main2") - 0.712063109', '(32,"Main2") - 0.712063109', '(71,"Main2") - 0.712063109', '(37,"Main2") - 0.712063109', '(186,"Main2") - 0.712063109', '(246,"Main2") - 0.712063109', '(49,"Main2") - 0.712063109', '(47,"Main2") - 0.712063109', '(63,"Main2") - 0.712063109', '(183,"Main2") - 0.712063109', '(114,"Main2") - 0.712063109', '(76,"Main2") - 0.712063109', '(442,"Main2") - 0.712063109', '(228,"Main2") - 0.712063109', '(153,"Main2") - 0.712063109', '(267,"Main2") - 0.712063109', '(91,"Main2") - 0.712063109', '(253,"Main2") - 0.712063109', '(397,"Main2") - 0.712063109', '(133,"Main2") - 0.712063109', '(98,"Main2") - 0.712063109', '(142,"Main2") - 0.712063109', '(162,"Main2") - 0.712063109', '(180,"Main2") - 0.712063109', '(82,"Main2") - 0.712063109', '(45,"Main2") - 0.712063109', '(208,"Main2") - 0.712063109', '(144,"Main2") - 0.712063109', '(233,"Main2") - 0.712063109', '(316,"Main2") - 0.712063109', '(252,"Main2") - 0.712063109', '(429,"Main2") - 0.712063109', '(317,"Main2") - 0.712063109', '(40,"Main2") - 0.712063109', '(83,"Main2") - 0.712063109', '(296,"Main2") - 0.712063109', '(290,"Main2") - 0.712063109', '(399,"Main2") - 0.712063109', '(213,"Main2") - 0.712063109', '(64,"Main2") - 0.712063109', '(23,"Main2") - 0.712063109', '(134,"Main2") - 0.712063109', '(175,"Main2") - 0.712063109', '(121,"Main2") - 0.712063109', '(104,"Main2") - 0.712063109', '(127,"Main2") - 0.712063109', '(280,"Main2") - 0.712063109', '(259,"Main2") - 0.712063109', '(125,"Main2") - 0.712063109', '(307,"Main2") - 0.712063109', '(161,"Main2") - 0.712063109', '(88,"Main2") - 0.712063109', '(21,"Main2") - 0.712063109', '(61,"Main2") - 0.712063109', '(29,"Main2") - 0.712063109', '(171,"Main2") - 0.712063109', '(435,"Main2") - 0.712063109', '(236,"Main2") - 0.712063109', '(240,"Main2") - 0.712063109', '(322,"Main2") - 0.712063109', '(400,"Main2") - 0.712063109', '(212,"Main2") - 0.712063109', '(174,"Main2") - 0.712063109', '(248,"Main2") - 0.712063109', '(149,"Main2") - 0.712063109', '(18,"Main2") - 0.712063109', '(188,"Main2") - 0.712063109', '(130,"Main2") - 0.712063109', '(430,"Main2") - 0.712063109', '(439,"Main2") - 0.712063109', '(403,"Main2") - 0.712063109', '(135,"Main2") - 0.712063109', '(81,"Main2") - 0.712063109', '(93,"Main2") - 0.712063109', '(261,"Main2") - 0.712063109', '(62,"Main2") - 0.712063109', '(70,"Main2") - 0.712063109', '(271,"Main2") - 0.712063109', '(41,"Main2") - 0.712063109', '(437,"Main2") - 0.712063109', '(16,"Main2") - 0.712063109', '(216,"Main2") - 0.712063109', '(35,"Main2") - 0.712063109', '(33,"Main2") - 0.712063109', '(99,"Main2") - 0.712063Loaded package environment from /home/niooi/.ghc/x86_64-linux-9.4.8/environments/default', '(181,"Main2") - 0.712063109', '(254,"Main2") - 0.712063109', '(143,"Main2") - 0.712063109', '(220,"Main2") - 0.712063109', '(250,"Main2") - 0.712063109', '(0,"Main2") - 0.712063109', '(295,"Main2") - 0.712063109', '(80,"Main2") - 0.712063109', '(311,"Main2") - 0.712063109', '(192,"Main2") - 0.712063109', '(285,"Main2") - 0.712063109', '(43,"Main2") - 0.712063109', '(286,"Main2") - 0.712063109', '(102,"Main2") - 0.712063109', '(164,"Main2") - 0.712063109', '(210,"Main2") - 0.712063109', '(406,"Main2") - 0.712063109']
Red Rules #: -1
SMT Solving time: 0.0
Gen Solving time: 3.935e-06
SMT Solver calls: 0
General Solver calls: 1
# nrpcs = []
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 60
NRPC:
hpc_exp = [('CallForHPC', '50', '5', '10', '0', '0'), ('Main2', '70', '249', '353', '19', '41')]
calculate hpc converage
[('CallForHPC', 50, 5, 10, '0', '0'), ('Main2', 70, 249, 353, '19', '41')]
[('Main2', 70, 249, 353, '19', '41')]
[('19', '41')]
Last time is: 0.777655805
hpc reached = 70.5
g2 reached = 310
total = 445
% reached = 69.7
last time = 0.777655805
all_times = ['(152,"Main2") - 0.777655805', '(247,"Main2") - 0.777655805', '(73,"Main2") - 0.777655805', '(92,"Main2") - 0.777655805', '(90,"Main2") - 0.777655805', '(117,"Main2") - 0.777655805', '(74,"Main2") - 0.777655805', '(231,"Main2") - 0.777655805', '(321,"Main2") - 0.777655805', '(2,"Main2") - 0.777655805', '(159,"Main2") - 0.777655805', '(119,"Main2") - 0.777655805', '(184,"Main2") - 0.777655805', '(116,"Main2") - 0.777655805', '(68,"Main2") - 0.777655805', '(173,"Main2") - 0.777655805', '(124,"Main2") - 0.777655805', '(401,"Main2") - 0.777655805', '(436,"Main2") - 0.777655805', '(30,"Main2") - 0.777655805', '(138,"Main2") - 0.777655805', '(198,"Main2") - 0.777655805', '(185,"Main2") - 0.777655805', '(126,"Main2") - 0.777655805', '(431,"Main2") - 0.777655805', '(48,"Main2") - 0.777655805', '(320,"Main2") - 0.777655805', '(109,"Main2") - 0.777655805', '(215,"Main2") - 0.777655805', '(87,"Main2") - 0.777655805', '(441,"Main2") - 0.777655805', '(111,"Main2") - 0.777655805', '(434,"Main2") - 0.777655805', '(141,"Main2") - 0.777655805', '(25,"Main2") - 0.777655805', '(256,"Main2") - 0.777655805', '(179,"Main2") - 0.777655805', '(115,"Main2") - 0.777655805', '(17,"Main2") - 0.777655805', '(235,"Main2") - 0.777655805', '(197,"Main2") - 0.777655805', '(191,"Main2") - 0.777655805', '(408,"Main2") - 0.777655805', '(177,"Main2") - 0.777655805', '(101,"Main2") - 0.777655805', '(214,"Main2") - 0.777655805', '(151,"Main2") - 0.777655805', '(22,"Main2") - 0.777655805', '(205,"Main2") - 0.777655805', '(139,"Main2") - 0.777655805', '(56,"Main2") - 0.777655805', '(176,"Main2") - 0.777655805', '(195,"Main2") - 0.777655805', '(223,"Main2") - 0.777655805', '(306,"Main2") - 0.777655805', '(245,"Main2") - 0.777655805', '(55,"Main2") - 0.777655805', '(86,"Main2") - 0.777655805', '(255,"Main2") - 0.777655805', '(444,"Main2") - 0.777655805', '(166,"Main2") - 0.777655805', '(59,"Main2") - 0.777655805', '(234,"Main2") - 0.777655805', '(120,"Main2") - 0.777655805', '(85,"Main2") - 0.777655805', '(31,"Main2") - 0.777655805', '(129,"Main2") - 0.777655805', '(165,"Main2") - 0.777655805', '(96,"Main2") - 0.777655805', '(204,"Main2") - 0.777655805', '(291,"Main2") - 0.777655805', '(201,"Main2") - 0.777655805', '(304,"Main2") - 0.777655805', '(270,"Main2") - 0.777655805', '(283,"Main2") - 0.777655805', '(14,"Main2") - 0.777655805', '(112,"Main2") - 0.777655805', '(230,"Main2") - 0.777655805', '(66,"Main2") - 0.777655805', '(20,"Main2") - 0.777655805', '(190,"Main2") - 0.777655805', '(193,"Main2") - 0.777655805', '(218,"Main2") - 0.777655805', '(155,"Main2") - 0.777655805', '(170,"Main2") - 0.777655805', '(118,"Main2") - 0.777655805', '(69,"Main2") - 0.777655805', '(113,"Main2") - 0.777655805', '(202,"Main2") - 0.777655805', '(211,"Main2") - 0.777655805', '(258,"Main2") - 0.777655805', '(302,"Main2") - 0.777655805', '(13,"Main2") - 0.777655805', '(44,"Main2") - 0.777655805', '(122,"Main2") - 0.777655805', '(140,"Main2") - 0.777655805', '(53,"Main2") - 0.777655805', '(287,"Main2") - 0.777655805', '(108,"Main2") - 0.777655805', '(123,"Main2") - 0.777655805', '(157,"Main2") - 0.777655805', '(438,"Main2") - 0.777655805', '(172,"Main2") - 0.777655805', '(52,"Main2") - 0.777655805', '(300,"Main2") - 0.777655805', '(128,"Main2") - 0.777655805', '(196,"Main2") - 0.777655805', '(277,"Main2") - 0.777655805', '(440,"Main2") - 0.777655805', '(46,"Main2") - 0.777655805', '(54,"Main2") - 0.777655805', '(443,"Main2") - 0.777655805', '(105,"Main2") - 0.777655805', '(292,"Main2") - 0.777655805', '(189,"Main2") - 0.777655805', '(19,"Main2") - 0.777655805', '(308,"Main2") - 0.777655805', '(150,"Main2") - 0.777655805', '(274,"Main2") - 0.777655805', '(57,"Main2") - 0.777655805', '(312,"Main2") - 0.777655805', '(27,"Main2") - 0.777655805', '(146,"Main2") - 0.777655805', '(200,"Main2") - 0.777655805', '(209,"Main2") - 0.777655805', '(1,"Main2") - 0.777655805', '(137,"Main2") - 0.777655805', '(154,"Main2") - 0.777655805', '(89,"Main2") - 0.777655805', '(432,"Main2") - 0.777655805', '(60,"Main2") - 0.777655805', '(239,"Main2") - 0.777655805', '(110,"Main2") - 0.777655805', '(266,"Main2") - 0.777655805', '(84,"Main2") - 0.777655805', '(34,"Main2") - 0.777655805', '(147,"Main2") - 0.777655805', '(265,"Main2") - 0.777655805', '(38,"Main2") - 0.777655805', '(148,"Main2") - 0.777655805', '(309,"Main2") - 0.777655805', '(160,"Main2") - 0.777655805', '(136,"Main2") - 0.777655805', '(323,"Main2") - 0.777655805', '(206,"Main2") - 0.777655805', '(65,"Main2") - 0.777655805', '(243,"Main2") - 0.777655805', '(238,"Main2") - 0.777655805', '(94,"Main2") - 0.777655805', '(163,"Main2") - 0.777655805', '(194,"Main2") - 0.777655805', '(284,"Main2") - 0.777655805', '(221,"Main2") - 0.777655805', '(58,"Main2") - 0.777655805', '(268,"Main2") - 0.777655805', '(187,"Main2") - 0.777655805', '(95,"Main2") - 0.777655805', '(199,"Main2") - 0.777655805', '(232,"Main2") - 0.777655805', '(237,"Main2") - 0.777655805', '(26,"Main2") - 0.777655805', '(257,"Main2") - 0.777655805', '(225,"Main2") - 0.777655805', '(75,"Main2") - 0.777655805', '(168,"Main2") - 0.777655805', '(50,"Main2") - 0.777655805', '(131,"Main2") - 0.777655805', '(77,"Main2") - 0.777655805', '(28,"Main2") - 0.777655805', '(67,"Main2") - 0.777655805', '(299,"Main2") - 0.777655805', '(224,"Main2") - 0.777655805', '(264,"Main2") - 0.777655805', '(145,"Main2") - 0.777655805', '(15,"Main2") - 0.777655805', '(407,"Main2") - 0.777655805', '(78,"Main2") - 0.777655805', '(107,"Main2") - 0.777655805', '(36,"Main2") - 0.777655805', '(398,"Main2") - 0.777655805', '(169,"Main2") - 0.777655805', '(39,"Main2") - 0.777655805', '(226,"Main2") - 0.777655805', '(72,"Main2") - 0.777655805', '(42,"Main2") - 0.777655805', '(79,"Main2") - 0.777655805', '(294,"Main2") - 0.777655805', '(297,"Main2") - 0.777655805', '(404,"Main2") - 0.777655805', '(249,"Main2") - 0.777655805', '(289,"Main2") - 0.777655805', '(178,"Main2") - 0.777655805', '(217,"Main2") - 0.777655805', '(207,"Main2") - 0.777655805', '(97,"Main2") - 0.777655805', '(263,"Main2") - 0.777655805', '(158,"Main2") - 0.777655805', '(229,"Main2") - 0.777655805', '(402,"Main2") - 0.777655805', '(203,"Main2") - 0.777655805', '(106,"Main2") - 0.777655805', '(51,"Main2") - 0.777655805', '(132,"Main2") - 0.777655805', '(24,"Main2") - 0.777655805', '(241,"Main2") - 0.777655805', '(182,"Main2") - 0.777655805', '(156,"Main2") - 0.777655805', '(167,"Main2") - 0.777655805', '(227,"Main2") - 0.777655805', '(32,"Main2") - 0.777655805', '(71,"Main2") - 0.777655805', '(37,"Main2") - 0.777655805', '(186,"Main2") - 0.777655805', '(246,"Main2") - 0.777655805', '(49,"Main2") - 0.777655805', '(47,"Main2") - 0.777655805', '(63,"Main2") - 0.777655805', '(183,"Main2") - 0.777655805', '(114,"Main2") - 0.777655805', '(76,"Main2") - 0.777655805', '(442,"Main2") - 0.777655805', '(228,"Main2") - 0.777655805', '(153,"Main2") - 0.777655805', '(267,"Main2") - 0.777655805', '(91,"Main2") - 0.777655805', '(253,"Main2") - 0.777655805', '(397,"Main2") - 0.777655805', '(133,"Main2") - 0.777655805', '(98,"Main2") - 0.777655805', '(142,"Main2") - 0.777655805', '(162,"Main2") - 0.777655805', '(180,"Main2") - 0.777655805', '(82,"Main2") - 0.777655805', '(45,"Main2") - 0.777655805', '(208,"Main2") - 0.777655805', '(144,"Main2") - 0.777655805', '(233,"Main2") - 0.777655805', '(316,"Main2") - 0.777655805', '(252,"Main2") - 0.777655805', '(429,"Main2") - 0.777655805', '(317,"Main2") - 0.777655805', '(40,"Main2") - 0.777655805', '(83,"Main2") - 0.777655805', '(296,"Main2") - 0.777655805', '(290,"Main2") - 0.777655805', '(399,"Main2") - 0.777655805', '(213,"Main2") - 0.777655805', '(64,"Main2") - 0.777655805', '(23,"Main2") - 0.777655805', '(134,"Main2") - 0.777655805', '(175,"Main2") - 0.777655805', '(121,"Main2") - 0.777655805', '(104,"Main2") - 0.777655805', '(127,"Main2") - 0.777655805', '(280,"Main2") - 0.777655805', '(259,"Main2") - 0.777655805', '(125,"Main2") - 0.777655805', '(307,"Main2") - 0.777655805', '(161,"Main2") - 0.777655805', '(88,"Main2") - 0.777655805', '(21,"Main2") - 0.777655805', '(61,"Main2") - 0.777655805', '(29,"Main2") - 0.777655805', '(171,"Main2") - 0.777655805', '(435,"Main2") - 0.777655805', '(236,"Main2") - 0.777655805', '(240,"Main2") - 0.777655805', '(322,"Main2") - 0.777655805', '(400,"Main2") - 0.777655805', '(212,"Main2") - 0.777655805', '(174,"Main2") - 0.777655805', '(248,"Main2") - 0.777655805', '(149,"Main2") - 0.777655805', '(18,"Main2") - 0.777655805', '(188,"Main2") - 0.777655805', '(130,"Main2") - 0.777655805', '(430,"Main2") - 0.777655805', '(439,"Main2") - 0.777655805', '(403,"Main2") - 0.777655805', '(135,"Main2") - 0.777655805', '(81,"Main2") - 0.777655805', '(93,"Main2") - 0.777655805', '(261,"Main2") - 0.777655805', '(62,"Main2") - 0.777655805', '(70,"Main2") - 0.777655805', '(271,"Main2") - 0.777655805', '(41,"Main2") - 0.777655805', '(437,"Main2") - 0.777655805', '(16,"Main2") - 0.777655805', '(216,"Main2") - 0.777655805', '(35,"Main2") - 0.777655805', '(33,"Main2") - 0.777655805', '(99,"Main2") - 0.777655Loaded package environment from /home/niooi/.ghc/x86_64-linux-9.4.8/environments/default', '(181,"Main2") - 0.777655805', '(254,"Main2") - 0.777655805', '(143,"Main2") - 0.777655805', '(220,"Main2") - 0.777655805', '(250,"Main2") - 0.777655805', '(0,"Main2") - 0.777655805', '(295,"Main2") - 0.777655805', '(80,"Main2") - 0.777655805', '(311,"Main2") - 0.777655805', '(192,"Main2") - 0.777655805', '(285,"Main2") - 0.777655805', '(43,"Main2") - 0.777655805', '(286,"Main2") - 0.777655805', '(102,"Main2") - 0.777655805', '(164,"Main2") - 0.777655805', '(210,"Main2") - 0.777655805', '(406,"Main2") - 0.777655805']
Red Rules #: -1
SMT Solving time: 0.0
Gen Solving time: 3.712e-06
SMT Solver calls: 0
General Solver calls: 1
# nrpcs = [0]
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 60


Graph latex for: mandel2: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(mandel2)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.71, 310)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.78, 310)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


multiplier
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '793', '14', '99')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 793, '14', '99')]
[('Main2', 0, 0, 793, '14', '99')]
[('14', '99')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 736
% reached = 0.0
last time = 
all_times = []
Red Rules #: 45911
SMT Solving time: 0.005281699
Gen Solving time: 0.005346907
SMT Solver calls: 1
General Solver calls: 5
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 113
NRPC:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '793', '14', '99')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 793, '14', '99')]
[('Main2', 0, 0, 793, '14', '99')]
[('14', '99')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 736
% reached = 0.0
last time = 
all_times = []
Red Rules #: 24731
SMT Solving time: 0.004940769
Gen Solving time: 0.005014355
SMT Solver calls: 1
General Solver calls: 5
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 113


Graph latex for: multiplier: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(multiplier)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0, 0)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


power
Baseline:
hpc_exp = [('CallForHPC', '66', '6', '9', '0', '0'), ('Main2', '6', '20', '287', '0', '43')]
calculate hpc converage
[('CallForHPC', 66, 6, 9, '0', '0'), ('Main2', 6, 20, 287, '0', '43')]
[('Main2', 6, 20, 287, '0', '43')]
[('0', '43')]
Last time is: 0.249367139
hpc reached = 7.0
g2 reached = 28
total = 278
% reached = 10.1
last time = 0.249367139
all_times = ['(152,"Main2") - 0.249367139', '(159,"Main2") - 0.249367139', '(124,"Main2") - 0.249367139', '(198,"Main2") - 0.249367139', '(179,"Main2") - 0.249367139', '(115,"Main2") - 0.249367139', '(197,"Main2") - 0.249367139', '(151,"Main2") - 0.249367139', '(205,"Main2") - 0.249367139', '(204,"Main2") - 0.249367139', '(201,"Main2") - 0.249367139', '(155,"Main2") - 0.249367139', '(202,"Main2") - 0.249367139', '(157,"Main2") - 0.249367139', '(150,"Main2") - 0.249367139', '(200,"Main2") - 0.249367139', '(154,"Main2") - 0.249367139', '(147,"Main2") - 0.249367139', '(148,"Main2") - 0.249367139', '(160,"Main2") - 0.249367139', '(199,"Main2") - 0.249367139', '(178,"Main2") - 0.249367139', '(203,"Main2") - 0.249367139', '(156,"Main2") - 0.249367139', '(167,"Main2") - 0.249367139', '(180,"Main2") - 0.249367139', '(161,"Main2") - 0.249367139', '(149,"Main2") - 0.249367139']
Red Rules #: 36926
SMT Solving time: 0.069311847
Gen Solving time: 0.070023407
SMT Solver calls: 31
General Solver calls: 44
# nrpcs = []
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 43
NRPC:
hpc_exp = [('CallForHPC', '87', '136', '155', '0', '28'), ('Main2', '60', '174', '287', '0', '43')]
calculate hpc converage
[('CallForHPC', 87, 136, 155, '0', '28'), ('Main2', 60, 174, 287, '0', '43')]
[('Main2', 60, 174, 287, '0', '43')]
[('0', '43')]
Last time is: 0.974033590
hpc reached = 60.6
g2 reached = 138
total = 278
% reached = 49.6
last time = 0.974033590
all_times = ['(152,"Main2") - 0.259042298', '(159,"Main2") - 0.259042298', '(124,"Main2") - 0.259042298', '(198,"Main2") - 0.259042298', '(179,"Main2") - 0.259042298', '(115,"Main2") - 0.259042298', '(197,"Main2") - 0.259042298', '(151,"Main2") - 0.259042298', '(205,"Main2") - 0.259042298', '(204,"Main2") - 0.259042298', '(201,"Main2") - 0.259042298', '(155,"Main2") - 0.259042298', '(202,"Main2") - 0.259042298', '(157,"Main2") - 0.259042298', '(150,"Main2") - 0.259042298', '(200,"Main2") - 0.259042298', '(154,"Main2") - 0.259042298', '(147,"Main2") - 0.259042298', '(148,"Main2") - 0.259042298', '(160,"Main2") - 0.259042298', '(199,"Main2") - 0.259042298', '(178,"Main2") - 0.259042298', '(203,"Main2") - 0.259042298', '(156,"Main2") - 0.259042298', '(167,"Main2") - 0.259042298', '(180,"Main2") - 0.259042298', '(161,"Main2") - 0.259042298', '(149,"Main2") - 0.259042298', '(117,"Main2") - 0.824810219', '(301,"Main2") - 0.824810219', '(119,"Main2") - 0.824810219', '(68,"Main2") - 0.824810219', '(138,"Main2") - 0.824810219', '(126,"Main2") - 0.824810219', '(141,"Main2") - 0.824810219', '(25,"Main2") - 0.824810219', '(256,"Main2") - 0.824810219', '(275,"Main2") - 0.824810219', '(139,"Main2") - 0.824810219', '(195,"Main2") - 0.824810219', '(120,"Main2") - 0.824810219', '(129,"Main2") - 0.824810219', '(291,"Main2") - 0.824810219', '(304,"Main2") - 0.824810219', '(270,"Main2") - 0.824810219', '(118,"Main2") - 0.824810219', '(302,"Main2") - 0.824810219', '(122,"Main2") - 0.824810219', '(140,"Main2") - 0.824810219', '(123,"Main2") - 0.824810219', '(272,"Main2") - 0.824810219', '(128,"Main2") - 0.824810219', '(196,"Main2") - 0.824810219', '(277,"Main2") - 0.824810219', '(292,"Main2") - 0.824810219', '(27,"Main2") - 0.824810219', '(146,"Main2") - 0.824810219', '(137,"Main2") - 0.824810219', '(266,"Main2") - 0.824810219', '(265,"Main2") - 0.824810219', '(136,"Main2") - 0.824810219', '(58,"Main2") - 0.824810219', '(276,"Main2") - 0.824810219', '(257,"Main2") - 0.824810219', '(50,"Main2") - 0.824810219', '(131,"Main2") - 0.824810219', '(28,"Main2") - 0.824810219', '(299,"Main2") - 0.824810219', '(264,"Main2") - 0.824810219', '(145,"Main2") - 0.824810219', '(15,"Main2") - 0.824810219', '(294,"Main2") - 0.824810219', '(158,"Main2") - 0.824810219', '(24,"Main2") - 0.824810219', '(182,"Main2") - 0.824810219', '(298,"Main2") - 0.824810219', '(183,"Main2") - 0.824810219', '(153,"Main2") - 0.824810219', '(133,"Main2") - 0.824810219', '(142,"Main2") - 0.824810219', '(144,"Main2") - 0.824810219', '(23,"Main2") - 0.824810219', '(134,"Main2") - 0.824810219', '(121,"Main2") - 0.824810219', '(127,"Main2") - 0.824810219', '(125,"Main2") - 0.824810219', '(29,"Main2") - 0.824810219', '(130,"Main2") - 0.824810219', '(135,"Main2") - 0.824810219', '(305,"Main2") - 0.824810219', '(271,"Main2") - 0.824810219', '(16,"Main2") - 0.824810219', '(181,"Main2") - 0.824810219', '(143,"Main2") - 0.824810219', '(295,"Main2") - 0.824810219', '(11,"Main2") - 0.824810219', '(193,"Main2") - 0.850415948', '(194,"Main2") - 0.850415948', '(75,"Main2") - 0.850415948', '(77,"Main2") - 0.850415948', '(76,"Main2") - 0.850415948', '(88,"Main2") - 0.850415948', '(69,"Main2") - 0.856940981', '(73,"Main2") - 0.947575383', '(74,"Main2") - 0.947575383', '(184,"Main2") - 0.947575383', '(185,"Main2") - 0.947575383', '(191,"Main2") - 0.947575383', '(166,"Main2") - 0.947575383', '(165,"Main2") - 0.947575383', '(14,"Main2") - 0.947575383', '(190,"Main2") - 0.947575383', '(9,"Main2") - 0.947575383', '(105,"Main2") - 0.947575383', '(189,"Main2") - 0.947575383', '(163,"Main2") - 0.947575383', '(187,"Main2") - 0.947575383', '(12,"Main2") - 0.947575383', '(72,"Main2") - 0.947575383', '(10,"Main2") - 0.947575383', '(71,"Main2") - 0.947575383', '(186,"Main2") - 0.947575383', '(162,"Main2") - 0.947575383', '(104,"Main2") - 0.947575383', '(188,"Main2") - 0.947575383', '(70,"Main2") - 0.947575383', '(192,"Main2") - 0.947575383', '(164,"Main2") - 0.947575383', '(100,"Main2") - 0.974033590', '(2,"Main2") - 0.974033590', '(3,"Main2") - 0.974033590', '(244,"Main2") - 0.974033590', '(245,"Main2") - 0.974033590', '(13,"Main2") - 0.974033590', '(242,"Main2") - 0.974033590', '(1,"Main2") - 0.974033590', '(243,"Main2") - 0.974033590', '(246,"Main2") - 0.974033590']
Red Rules #: 31513
SMT Solving time: 0.082199672
Gen Solving time: 0.082844959
SMT Solver calls: 38
General Solver calls: 43
# nrpcs = [0, 0, 2, 0, 1, 0, 2, 0, 0, 1]
# post call args = 1
# func args = 9
# timeouts = 0
# branches = 43


Graph latex for: power: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(power)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.25, 28)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.26, 28) (0.82, 68) (0.85, 6) (0.86, 1) (0.95, 25) (0.97, 10)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


primetest
Baseline:
hpc_exp = [('CallForHPC', '61', '11', '18', '0', '0'), ('IntLib', '1', '2', '118', '4', '10'), ('Main2', '33', '12', '36', '1', '4'), ('MyRandom', '0', '0', '86', '5', '10'), ('Prime', '2', '4', '156', '6', '18')]
calculate hpc converage
[('CallForHPC', 61, 11, 18, '0', '0'), ('IntLib', 1, 2, 118, '4', '10'), ('Main2', 33, 12, 36, '1', '4'), ('MyRandom', 0, 0, 86, '5', '10'), ('Prime', 2, 4, 156, '6', '18')]
[('IntLib', 1, 2, 118, '4', '10'), ('Main2', 33, 12, 36, '1', '4'), ('MyRandom', 0, 0, 86, '5', '10'), ('Prime', 2, 4, 156, '6', '18')]
[('4', '10'), ('1', '4'), ('5', '10'), ('6', '18')]
Last time is: 0.865540980
hpc reached = 4.5
g2 reached = 25
total = 470
% reached = 5.3
last time = 0.865540980
all_times = ['(44,"Main2") - 0.435138639', '(26,"Main2") - 0.435138639', '(36,"Main2") - 0.435138639', '(39,"Main2") - 0.435138639', '(42,"Main2") - 0.435138639', '(40,"Main2") - 0.435138639', '(43,"Main2") - 0.435138639', '(25,"Main2") - 0.865540980', '(164,"Prime") - 0.865540980', '(17,"Main2") - 0.865540980', '(5,"Main2") - 0.865540980', '(162,"Prime") - 0.865540980', '(4,"Main2") - 0.865540980', '(140,"IntLib") - 0.865540980', '(28,"Main2") - 0.865540980', '(139,"IntLib") - 0.865540980', '(10,"Main2") - 0.865540980', '(24,"Main2") - 0.865540980', '(6,"Main2") - 0.865540980', '(169,"Prime") - 0.865540980', '(178,"Prime") - 0.865540980', '(179,"Prime") - 0.865540980', '(35,"Main2") - 0.865540980', '(11,"Main2") - 0.865540980', '(138,"IntLib") - 0.865540980']
Red Rules #: 15139
SMT Solving time: 0.244042297
Gen Solving time: 0.245554587
SMT Solver calls: 61
General Solver calls: 68
# nrpcs = []
# post call args = 2
# func args = 0
# timeouts = 0
# branches = 58
NRPC:
hpc_exp = [('CallForHPC', '61', '11', '18', '0', '0'), ('IntLib', '1', '2', '118', '4', '10'), ('Main2', '33', '12', '36', '1', '4'), ('MyRandom', '0', '0', '86', '5', '10'), ('Prime', '2', '4', '156', '6', '18')]
calculate hpc converage
[('CallForHPC', 61, 11, 18, '0', '0'), ('IntLib', 1, 2, 118, '4', '10'), ('Main2', 33, 12, 36, '1', '4'), ('MyRandom', 0, 0, 86, '5', '10'), ('Prime', 2, 4, 156, '6', '18')]
[('IntLib', 1, 2, 118, '4', '10'), ('Main2', 33, 12, 36, '1', '4'), ('MyRandom', 0, 0, 86, '5', '10'), ('Prime', 2, 4, 156, '6', '18')]
[('4', '10'), ('1', '4'), ('5', '10'), ('6', '18')]
Last time is: 0.881527332
hpc reached = 4.5
g2 reached = 25
total = 470
% reached = 5.3
last time = 0.881527332
all_times = ['(44,"Main2") - 0.430565192', '(26,"Main2") - 0.430565192', '(36,"Main2") - 0.430565192', '(39,"Main2") - 0.430565192', '(42,"Main2") - 0.430565192', '(40,"Main2") - 0.430565192', '(43,"Main2") - 0.430565192', '(25,"Main2") - 0.881527332', '(164,"Prime") - 0.881527332', '(17,"Main2") - 0.881527332', '(5,"Main2") - 0.881527332', '(162,"Prime") - 0.881527332', '(4,"Main2") - 0.881527332', '(140,"IntLib") - 0.881527332', '(28,"Main2") - 0.881527332', '(139,"IntLib") - 0.881527332', '(10,"Main2") - 0.881527332', '(24,"Main2") - 0.881527332', '(6,"Main2") - 0.881527332', '(169,"Prime") - 0.881527332', '(178,"Prime") - 0.881527332', '(179,"Prime") - 0.881527332', '(35,"Main2") - 0.881527332', '(11,"Main2") - 0.881527332', '(138,"IntLib") - 0.881527332']
Red Rules #: 14440
SMT Solving time: 0.231063966
Gen Solving time: 0.232460452
SMT Solver calls: 59
General Solver calls: 66
# nrpcs = [0, 0]
# post call args = 2
# func args = 0
# timeouts = 0
# branches = 58


Graph latex for: primetest: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(primetest)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.44, 7) (0.87, 18)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.43, 7) (0.88, 18)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


scc
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Digraph', '0', '0', '121', '6', '11'), ('Main2', '0', '0', '50', '0', '0')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Digraph', 0, 0, 121, '6', '11'), ('Main2', 0, 0, 50, '0', '0')]
[('Digraph', 0, 0, 121, '6', '11'), ('Main2', 0, 0, 50, '0', '0')]
[('6', '11'), ('0', '0')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 197
% reached = 0.0
last time = 
all_times = []
Red Rules #: 31355
SMT Solving time: 0.159560152
Gen Solving time: 0.162149679
SMT Solver calls: 70
General Solver calls: 352
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 17
NRPC:
hpc_exp = [('CallForHPC', '99', '298', '299', '0', '36'), ('Digraph', '96', '117', '121', '6', '11'), ('Main2', '100', '50', '50', '0', '0')]
calculate hpc converage
[('CallForHPC', 99, 298, 299, '0', '36'), ('Digraph', 96, 117, 121, '6', '11'), ('Main2', 100, 50, 50, '0', '0')]
[('Digraph', 96, 117, 121, '6', '11'), ('Main2', 100, 50, 50, '0', '0')]
[('6', '11'), ('0', '0')]
Last time is: 0.567244298
hpc reached = 97.7
g2 reached = 56
total = 197
% reached = 28.4
last time = 0.567244298
all_times = ['(134,"Digraph") - 0.155614540', '(126,"Digraph") - 0.155614540', '(137,"Digraph") - 0.155614540', '(97,"Digraph") - 0.155614540', '(22,"Main2") - 0.155614540', '(127,"Digraph") - 0.155614540', '(55,"Main2") - 0.155614540', '(59,"Main2") - 0.155614540', '(30,"Digraph") - 0.155614540', '(133,"Digraph") - 0.155614540', '(17,"Digraph") - 0.155614540', '(57,"Main2") - 0.155614540', '(27,"Digraph") - 0.155614540', '(130,"Digraph") - 0.155614540', '(58,"Main2") - 0.155614540', '(135,"Digraph") - 0.155614540', '(136,"Digraph") - 0.155614540', '(59,"Digraph") - 0.155614540', '(132,"Digraph") - 0.155614540', '(21,"Main2") - 0.155614540', '(16,"Digraph") - 0.155614540', '(33,"Digraph") - 0.155614540', '(138,"Digraph") - 0.155614540', '(14,"Digraph") - 0.155614540', '(14,"Main2") - 0.157974270', '(13,"Main2") - 0.157974270', '(12,"Main2") - 0.157974270', '(25,"Digraph") - 0.157974270', '(28,"Digraph") - 0.157974270', '(26,"Digraph") - 0.159388597', '(131,"Digraph") - 0.159388597', '(29,"Digraph") - 0.159388597', '(44,"Digraph") - 0.195085772', '(43,"Digraph") - 0.195085772', '(42,"Digraph") - 0.195085772', '(31,"Digraph") - 0.195085772', '(38,"Digraph") - 0.195085772', '(36,"Digraph") - 0.198014852', '(37,"Digraph") - 0.200543129', '(15,"Main2") - 0.211963138', '(10,"Main2") - 0.211963138', '(13,"Digraph") - 0.211963138', '(34,"Digraph") - 0.211963138', '(11,"Main2") - 0.211963138', '(40,"Digraph") - 0.224196608', '(41,"Digraph") - 0.224196608', '(20,"Digraph") - 0.346197833', '(24,"Digraph") - 0.346197833', '(22,"Digraph") - 0.346197833', '(15,"Digraph") - 0.346197833', '(23,"Digraph") - 0.346197833', '(18,"Digraph") - 0.476562646', '(9,"Main2") - 0.533045018', '(8,"Main2") - 0.533045018', '(16,"Main2") - 0.533045018', '(21,"Digraph") - 0.567244298']
Red Rules #: 32205
SMT Solving time: 0.040603151
Gen Solving time: 0.044809083
SMT Solver calls: 14
General Solver calls: 928
# nrpcs = [1, 2, 1, 0, 1, 0, 0, 1, 2, 3, 2, 2, 4, 4, 5, 3, 1, 1, 4, 6, 5, 5, 4, 8, 5, 2]
# post call args = 0
# func args = 26
# timeouts = 0
# branches = 17


Graph latex for: scc: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(scc)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.16, 32) (0.2, 7) (0.21, 5) (0.22, 2) (0.35, 5) (0.48, 1) (0.53, 3) (0.57, 1)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


rewrite
Baseline:
hpc_exp = []
calculate hpc converage
[]
[]
[]
Last time is: 0.999145659
hpc reached = 0
g2 reached = 342
total = 1518
% reached = 22.5
last time = 0.999145659
all_times = ['(1495,"Main2") - 0.203622984', '(1500,"Main2") - 0.203622984', '(1503,"Main2") - 0.203622984', '(1504,"Main2") - 0.203622984', '(1505,"Main2") - 0.203622984', '(1499,"Main2") - 0.203622984', '(1501,"Main2") - 0.203622984', '(1496,"Main2") - 0.203622984', '(1490,"Main2") - 0.203622984', '(368,"Main2") - 0.790933835', '(691,"Main2") - 0.790933835', '(945,"Main2") - 0.790933835', '(774,"Main2") - 0.790933835', '(910,"Main2") - 0.790933835', '(385,"Main2") - 0.790933835', '(915,"Main2") - 0.790933835', '(998,"Main2") - 0.790933835', '(897,"Main2") - 0.790933835', '(869,"Main2") - 0.790933835', '(712,"Main2") - 0.790933835', '(733,"Main2") - 0.790933835', '(729,"Main2") - 0.790933835', '(930,"Main2") - 0.790933835', '(921,"Main2") - 0.790933835', '(1088,"Main2") - 0.790933835', '(1012,"Main2") - 0.790933835', '(781,"Main2") - 0.790933835', '(687,"Main2") - 0.790933835', '(973,"Main2") - 0.790933835', '(700,"Main2") - 0.790933835', '(436,"Main2") - 0.790933835', '(30,"Main2") - 0.790933835', '(991,"Main2") - 0.790933835', '(431,"Main2") - 0.790933835', '(898,"Main2") - 0.790933835', '(999,"Main2") - 0.790933835', '(768,"Main2") - 0.790933835', '(48,"Main2") - 0.790933835', '(1483,"Main2") - 0.790933835', '(746,"Main2") - 0.790933835', '(961,"Main2") - 0.790933835', '(434,"Main2") - 0.790933835', '(937,"Main2") - 0.790933835', '(1003,"Main2") - 0.790933835', '(894,"Main2") - 0.790933835', '(690,"Main2") - 0.790933835', '(870,"Main2") - 0.790933835', '(783,"Main2") - 0.790933835', '(908,"Main2") - 0.790933835', '(749,"Main2") - 0.790933835', '(1497,"Main2") - 0.790933835', '(899,"Main2") - 0.790933835', '(963,"Main2") - 0.790933835', '(278,"Main2") - 0.790933835', '(450,"Main2") - 0.790933835', '(970,"Main2") - 0.790933835', '(629,"Main2") - 0.790933835', '(1498,"Main2") - 0.790933835', '(1455,"Main2") - 0.790933835', '(873,"Main2") - 0.790933835', '(721,"Main2") - 0.790933835', '(1014,"Main2") - 0.790933835', '(56,"Main2") - 0.790933835', '(711,"Main2") - 0.790933835', '(666,"Main2") - 0.790933835', '(788,"Main2") - 0.790933835', '(776,"Main2") - 0.790933835', '(376,"Main2") - 0.790933835', '(444,"Main2") - 0.790933835', '(727,"Main2") - 0.790933835', '(730,"Main2") - 0.790933835', '(779,"Main2") - 0.790933835', '(59,"Main2") - 0.790933835', '(919,"Main2") - 0.790933835', '(740,"Main2") - 0.790933835', '(380,"Main2") - 0.790933835', '(965,"Main2") - 0.790933835', '(896,"Main2") - 0.790933835', '(914,"Main2") - 0.790933835', '(1081,"Main2") - 0.790933835', '(291,"Main2") - 0.790933835', '(887,"Main2") - 0.790933835', '(942,"Main2") - 0.790933835', '(911,"Main2") - 0.790933835', '(707,"Main2") - 0.790933835', '(925,"Main2") - 0.790933835', '(769,"Main2") - 0.790933835', '(748,"Main2") - 0.790933835', '(630,"Main2") - 0.790933835', '(752,"Main2") - 0.790933835', '(388,"Main2") - 0.790933835', '(375,"Main2") - 0.790933835', '(720,"Main2") - 0.790933835', '(66,"Main2") - 0.790933835', '(389,"Main2") - 0.790933835', '(731,"Main2") - 0.790933835', '(427,"Main2") - 0.790933835', '(872,"Main2") - 0.790933835', '(782,"Main2") - 0.790933835', '(750,"Main2") - 0.790933835', '(724,"Main2") - 0.790933835', '(886,"Main2") - 0.790933835', '(972,"Main2") - 0.790933835', '(693,"Main2") - 0.790933835', '(900,"Main2") - 0.790933835', '(377,"Main2") - 0.790933835', '(1456,"Main2") - 0.790933835', '(694,"Main2") - 0.790933835', '(433,"Main2") - 0.790933835', '(736,"Main2") - 0.790933835', '(1488,"Main2") - 0.790933835', '(903,"Main2") - 0.790933835', '(664,"Main2") - 0.790933835', '(53,"Main2") - 0.790933835', '(739,"Main2") - 0.790933835', '(695,"Main2") - 0.790933835', '(957,"Main2") - 0.790933835', '(1494,"Main2") - 0.790933835', '(738,"Main2") - 0.790933835', '(994,"Main2") - 0.790933835', '(438,"Main2") - 0.790933835', '(969,"Main2") - 0.790933835', '(52,"Main2") - 0.790933835', '(891,"Main2") - 0.790933835', '(696,"Main2") - 0.790933835', '(703,"Main2") - 0.790933835', '(747,"Main2") - 0.790933835', '(1524,"Main2") - 0.790933835', '(1478,"Main2") - 0.790933835', '(778,"Main2") - 0.790933835', '(905,"Main2") - 0.790933835', '(451,"Main2") - 0.790933835', '(1459,"Main2") - 0.790933835', '(277,"Main2") - 0.790933835', '(440,"Main2") - 0.790933835', '(46,"Main2") - 0.790933835', '(54,"Main2") - 0.790933835', '(443,"Main2") - 0.790933835', '(777,"Main2") - 0.790933835', '(292,"Main2") - 0.790933835', '(1083,"Main2") - 0.790933835', '(1469,"Main2") - 0.790933835', '(907,"Main2") - 0.790933835', '(57,"Main2") - 0.790933835', '(1475,"Main2") - 0.790933835', '(1491,"Main2") - 0.790933835', '(706,"Main2") - 0.790933835', '(990,"Main2") - 0.790933835', '(859,"Main2") - 0.790933835', '(605,"Main2") - 0.790933835', '(367,"Main2") - 0.790933835', '(773,"Main2") - 0.790933835', '(432,"Main2") - 0.790933835', '(1086,"Main2") - 0.790933835', '(60,"Main2") - 0.790933835', '(716,"Main2") - 0.790933835', '(1502,"Main2") - 0.790933835', '(993,"Main2") - 0.790933835', '(386,"Main2") - 0.790933835', '(755,"Main2") - 0.790933835', '(1472,"Main2") - 0.790933835', '(366,"Main2") - 0.790933835', '(988,"Main2") - 0.790933835', '(1006,"Main2") - 0.790933835', '(1464,"Main2") - 0.790933835', '(65,"Main2") - 0.790933835', '(369,"Main2") - 0.790933835', '(701,"Main2") - 0.790933835', '(928,"Main2") - 0.790933835', '(1454,"Main2") - 0.790933835', '(734,"Main2") - 0.790933835', '(780,"Main2") - 0.790933835', '(1082,"Main2") - 0.790933835', '(58,"Main2") - 0.790933835', '(933,"Main2") - 0.790933835', '(863,"Main2") - 0.790933835', '(704,"Main2") - 0.790933835', '(697,"Main2") - 0.790933835', '(979,"Main2") - 0.790933835', '(742,"Main2") - 0.790933835', '(968,"Main2") - 0.790933835', '(785,"Main2") - 0.790933835', '(387,"Main2") - 0.790933835', '(390,"Main2") - 0.790933835', '(722,"Main2") - 0.790933835', '(920,"Main2") - 0.790933835', '(604,"Main2") - 0.790933835', '(50,"Main2") - 0.790933835', '(1458,"Main2") - 0.790933835', '(978,"Main2") - 0.790933835', '(28,"Main2") - 0.790933835', '(874,"Main2") - 0.790933835', '(374,"Main2") - 0.790933835', '(1008,"Main2") - 0.790933835', '(737,"Main2") - 0.790933835', '(1457,"Main2") - 0.790933835', '(599,"Main2") - 0.790933835', '(631,"Main2") - 0.790933835', '(1476,"Main2") - 0.790933835', '(725,"Main2") - 0.790933835', '(461,"Main2") - 0.790933835', '(904,"Main2") - 0.790933835', '(926,"Main2") - 0.790933835', '(924,"Main2") - 0.790933835', '(913,"Main2") - 0.790933835', '(717,"Main2") - 0.790933835', '(598,"Main2") - 0.790933835', '(982,"Main2") - 0.790933835', '(770,"Main2") - 0.790933835', '(723,"Main2") - 0.790933835', '(958,"Main2") - 0.790933835', '(449,"Main2") - 0.790933835', '(1087,"Main2") - 0.790933835', '(941,"Main2") - 0.790933835', '(710,"Main2") - 0.790933835', '(1010,"Main2") - 0.790933835', '(775,"Main2") - 0.790933835', '(868,"Main2") - 0.790933835', '(980,"Main2") - 0.790933835', '(923,"Main2") - 0.790933835', '(51,"Main2") - 0.790933835', '(1005,"Main2") - 0.790933835', '(944,"Main2") - 0.790933835', '(718,"Main2") - 0.790933835', '(365,"Main2") - 0.790933835', '(966,"Main2") - 0.790933835', '(705,"Main2") - 0.790933835', '(391,"Main2") - 0.790933835', '(702,"Main2") - 0.790933835', '(1480,"Main2") - 0.790933835', '(601,"Main2") - 0.790933835', '(962,"Main2") - 0.790933835', '(906,"Main2") - 0.790933835', '(49,"Main2") - 0.790933835', '(728,"Main2") - 0.790933835', '(47,"Main2") - 0.790933835', '(63,"Main2") - 0.790933835', '(871,"Main2") - 0.790933835', '(628,"Main2") - 0.790933835', '(1493,"Main2") - 0.790933835', '(787,"Main2") - 0.790933835', '(1002,"Main2") - 0.790933835', '(892,"Main2") - 0.790933835', '(1479,"Main2") - 0.790933835', '(784,"Main2") - 0.790933835', '(665,"Main2") - 0.790933835', '(1468,"Main2") - 0.790933835', '(686,"Main2") - 0.790933835', '(1465,"Main2") - 0.790933835', '(922,"Main2") - 0.790933835', '(384,"Main2") - 0.790933835', '(743,"Main2") - 0.790933835', '(971,"Main2") - 0.790933835', '(901,"Main2") - 0.790933835', '(429,"Main2") - 0.790933835', '(929,"Main2") - 0.790933835', '(1001,"Main2") - 0.790933835', '(373,"Main2") - 0.790933835', '(1007,"Main2") - 0.790933835', '(989,"Main2") - 0.790933835', '(964,"Main2") - 0.790933835', '(626,"Main2") - 0.790933835', '(364,"Main2") - 0.790933835', '(428,"Main2") - 0.790933835', '(974,"Main2") - 0.790933835', '(64,"Main2") - 0.790933835', '(940,"Main2") - 0.790933835', '(860,"Main2") - 0.790933835', '(927,"Main2") - 0.790933835', '(1482,"Main2") - 0.790933835', '(856,"Main2") - 0.790933835', '(378,"Main2") - 0.790933835', '(997,"Main2") - 0.790933835', '(902,"Main2") - 0.790933835', '(893,"Main2") - 0.790933835', '(61,"Main2") - 0.790933835', '(1013,"Main2") - 0.790933835', '(1090,"Main2") - 0.790933835', '(939,"Main2") - 0.790933835', '(688,"Main2") - 0.790933835', '(29,"Main2") - 0.790933835', '(692,"Main2") - 0.790933835', '(719,"Main2") - 0.790933835', '(435,"Main2") - 0.790933835', '(1471,"Main2") - 0.790933835', '(699,"Main2") - 0.790933835', '(627,"Main2") - 0.790933835', '(975,"Main2") - 0.790933835', '(698,"Main2") - 0.790933835', '(371,"Main2") - 0.790933835', '(943,"Main2") - 0.790933835', '(689,"Main2") - 0.790933835', '(992,"Main2") - 0.790933835', '(936,"Main2") - 0.790933835', '(600,"Main2") - 0.790933835', '(426,"Main2") - 0.790933835', '(946,"Main2") - 0.790933835', '(372,"Main2") - 0.790933835', '(987,"Main2") - 0.790933835', '(744,"Main2") - 0.790933835', '(967,"Main2") - 0.790933835', '(708,"Main2") - 0.790933835', '(1474,"Main2") - 0.790933835', '(430,"Main2") - 0.790933835', '(976,"Main2") - 0.790933835', '(379,"Main2") - 0.790933835', '(751,"Main2") - 0.790933835', '(439,"Main2") - 0.790933835', '(370,"Main2") - 0.790933835', '(1489,"Main2") - 0.790933835', '(1477,"Main2") - 0.790933835', '(912,"Main2") - 0.790933835', '(726,"Main2") - 0.790933835', '(62,"Main2") - 0.790933835', '(1484,"Main2") - 0.790933835', '(986,"Main2") - 0.790933835', '(709,"Main2") - 0.790933835', '(437,"Main2") - 0.790933835', '(1466,"Main2") - 0.790933835', '(895,"Main2") - 0.790933835', '(977,"Main2") - 0.790933835', '(35,"Main2") - 0.790933835', '(934,"Main2") - 0.790933835', '(1085,"Main2") - 0.790933835', '(984,"Main2") - 0.790933835', '(985,"Main2") - 0.790933835', '(861,"Main2") - 0.790933835', '(1407,"Main2") - 0.790933835', '(995,"Main2") - 0.790933835', '(981,"Main2") - 0.790933835', '(862,"Main2") - 0.790933835', '(772,"Main2") - 0.790933835', '(1470,"Main2") - 0.790933835', '(960,"Main2") - 0.790933835', '(1000,"Main2") - 0.790933835', '(983,"Main2") - 0.790933835', '(741,"Main2") - 0.790933835', '(732,"Main2") - 0.790933835', '(1089,"Main2") - 0.790933835', '(996,"Main2") - 0.790933835', '(909,"Main2") - 0.790933835', '(918,"Main2") - 0.999145659']
Red Rules #: 37090
SMT Solving time: 0.064139244
Gen Solving time: 0.064694109
SMT Solver calls: 27
General Solver calls: 113
# nrpcs = []
# post call args = 28
# func args = 0
# timeouts = 0
# branches = 0
NRPC:
hpc_exp = [('CallForHPC', '72', '13', '18', '0', '0'), ('Main2', '21', '270', '1284', '32', '156')]
calculate hpc converage
[('CallForHPC', 72, 13, 18, '0', '0'), ('Main2', 21, 270, 1284, '32', '156')]
[('Main2', 21, 270, 1284, '32', '156')]
[('32', '156')]
Last time is: 0.967354942
hpc reached = 21.0
g2 reached = 341
total = 1518
% reached = 22.5
last time = 0.967354942
all_times = ['(1495,"Main2") - 0.214778143', '(1500,"Main2") - 0.214778143', '(1503,"Main2") - 0.214778143', '(1504,"Main2") - 0.214778143', '(1505,"Main2") - 0.214778143', '(1499,"Main2") - 0.214778143', '(1501,"Main2") - 0.214778143', '(1496,"Main2") - 0.214778143', '(1490,"Main2") - 0.214778143', '(368,"Main2") - 0.967354942', '(691,"Main2") - 0.967354942', '(945,"Main2") - 0.967354942', '(774,"Main2") - 0.967354942', '(910,"Main2") - 0.967354942', '(385,"Main2") - 0.967354942', '(915,"Main2") - 0.967354942', '(998,"Main2") - 0.967354942', '(897,"Main2") - 0.967354942', '(869,"Main2") - 0.967354942', '(712,"Main2") - 0.967354942', '(733,"Main2") - 0.967354942', '(729,"Main2") - 0.967354942', '(930,"Main2") - 0.967354942', '(921,"Main2") - 0.967354942', '(1088,"Main2") - 0.967354942', '(1012,"Main2") - 0.967354942', '(781,"Main2") - 0.967354942', '(687,"Main2") - 0.967354942', '(973,"Main2") - 0.967354942', '(700,"Main2") - 0.967354942', '(436,"Main2") - 0.967354942', '(30,"Main2") - 0.967354942', '(991,"Main2") - 0.967354942', '(431,"Main2") - 0.967354942', '(898,"Main2") - 0.967354942', '(999,"Main2") - 0.967354942', '(768,"Main2") - 0.967354942', '(48,"Main2") - 0.967354942', '(1483,"Main2") - 0.967354942', '(746,"Main2") - 0.967354942', '(961,"Main2") - 0.967354942', '(434,"Main2") - 0.967354942', '(937,"Main2") - 0.967354942', '(1003,"Main2") - 0.967354942', '(894,"Main2") - 0.967354942', '(690,"Main2") - 0.967354942', '(870,"Main2") - 0.967354942', '(783,"Main2") - 0.967354942', '(908,"Main2") - 0.967354942', '(749,"Main2") - 0.967354942', '(1497,"Main2") - 0.967354942', '(899,"Main2") - 0.967354942', '(963,"Main2") - 0.967354942', '(278,"Main2") - 0.967354942', '(450,"Main2") - 0.967354942', '(970,"Main2") - 0.967354942', '(629,"Main2") - 0.967354942', '(1498,"Main2") - 0.967354942', '(1455,"Main2") - 0.967354942', '(873,"Main2") - 0.967354942', '(721,"Main2") - 0.967354942', '(1014,"Main2") - 0.967354942', '(56,"Main2") - 0.967354942', '(711,"Main2") - 0.967354942', '(666,"Main2") - 0.967354942', '(788,"Main2") - 0.967354942', '(776,"Main2") - 0.967354942', '(376,"Main2") - 0.967354942', '(444,"Main2") - 0.967354942', '(727,"Main2") - 0.967354942', '(730,"Main2") - 0.967354942', '(779,"Main2") - 0.967354942', '(59,"Main2") - 0.967354942', '(919,"Main2") - 0.967354942', '(740,"Main2") - 0.967354942', '(380,"Main2") - 0.967354942', '(965,"Main2") - 0.967354942', '(896,"Main2") - 0.967354942', '(914,"Main2") - 0.967354942', '(1081,"Main2") - 0.967354942', '(291,"Main2") - 0.967354942', '(887,"Main2") - 0.967354942', '(942,"Main2") - 0.967354942', '(911,"Main2") - 0.967354942', '(707,"Main2") - 0.967354942', '(925,"Main2") - 0.967354942', '(769,"Main2") - 0.967354942', '(748,"Main2") - 0.967354942', '(630,"Main2") - 0.967354942', '(752,"Main2") - 0.967354942', '(388,"Main2") - 0.967354942', '(375,"Main2") - 0.967354942', '(720,"Main2") - 0.967354942', '(66,"Main2") - 0.967354942', '(389,"Main2") - 0.967354942', '(731,"Main2") - 0.967354942', '(427,"Main2") - 0.967354942', '(872,"Main2") - 0.967354942', '(782,"Main2") - 0.967354942', '(750,"Main2") - 0.967354942', '(724,"Main2") - 0.967354942', '(886,"Main2") - 0.967354942', '(972,"Main2") - 0.967354942', '(693,"Main2") - 0.967354942', '(900,"Main2") - 0.967354942', '(377,"Main2") - 0.967354942', '(1456,"Main2") - 0.967354942', '(694,"Main2") - 0.967354942', '(433,"Main2") - 0.967354942', '(736,"Main2") - 0.967354942', '(1488,"Main2") - 0.967354942', '(903,"Main2") - 0.967354942', '(664,"Main2") - 0.967354942', '(53,"Main2") - 0.967354942', '(739,"Main2") - 0.967354942', '(695,"Main2") - 0.967354942', '(957,"Main2") - 0.967354942', '(1494,"Main2") - 0.967354942', '(738,"Main2") - 0.967354942', '(994,"Main2") - 0.967354942', '(438,"Main2") - 0.967354942', '(969,"Main2") - 0.967354942', '(52,"Main2") - 0.967354942', '(891,"Main2") - 0.967354942', '(696,"Main2") - 0.967354942', '(703,"Main2") - 0.967354942', '(747,"Main2") - 0.967354942', '(1524,"Main2") - 0.967354942', '(1478,"Main2") - 0.967354942', '(778,"Main2") - 0.967354942', '(905,"Main2") - 0.967354942', '(451,"Main2") - 0.967354942', '(1459,"Main2") - 0.967354942', '(277,"Main2") - 0.967354942', '(440,"Main2") - 0.967354942', '(46,"Main2") - 0.967354942', '(54,"Main2") - 0.967354942', '(443,"Main2") - 0.967354942', '(777,"Main2") - 0.967354942', '(292,"Main2") - 0.967354942', '(1083,"Main2") - 0.967354942', '(1469,"Main2") - 0.967354942', '(907,"Main2") - 0.967354942', '(57,"Main2") - 0.967354942', '(1475,"Main2") - 0.967354942', '(1491,"Main2") - 0.967354942', '(706,"Main2") - 0.967354942', '(990,"Main2") - 0.967354942', '(859,"Main2") - 0.967354942', '(605,"Main2") - 0.967354942', '(367,"Main2") - 0.967354942', '(773,"Main2") - 0.967354942', '(432,"Main2") - 0.967354942', '(1086,"Main2") - 0.967354942', '(60,"Main2") - 0.967354942', '(716,"Main2") - 0.967354942', '(1502,"Main2") - 0.967354942', '(993,"Main2") - 0.967354942', '(386,"Main2") - 0.967354942', '(755,"Main2") - 0.967354942', '(1472,"Main2") - 0.967354942', '(366,"Main2") - 0.967354942', '(988,"Main2") - 0.967354942', '(1006,"Main2") - 0.967354942', '(1464,"Main2") - 0.967354942', '(65,"Main2") - 0.967354942', '(369,"Main2") - 0.967354942', '(701,"Main2") - 0.967354942', '(928,"Main2") - 0.967354942', '(1454,"Main2") - 0.967354942', '(734,"Main2") - 0.967354942', '(780,"Main2") - 0.967354942', '(1082,"Main2") - 0.967354942', '(58,"Main2") - 0.967354942', '(933,"Main2") - 0.967354942', '(863,"Main2") - 0.967354942', '(704,"Main2") - 0.967354942', '(697,"Main2") - 0.967354942', '(979,"Main2") - 0.967354942', '(742,"Main2") - 0.967354942', '(968,"Main2") - 0.967354942', '(785,"Main2") - 0.967354942', '(387,"Main2") - 0.967354942', '(390,"Main2") - 0.967354942', '(722,"Main2") - 0.967354942', '(920,"Main2") - 0.967354942', '(604,"Main2") - 0.967354942', '(50,"Main2") - 0.967354942', '(1458,"Main2") - 0.967354942', '(978,"Main2") - 0.967354942', '(28,"Main2") - 0.967354942', '(874,"Main2") - 0.967354942', '(374,"Main2") - 0.967354942', '(1008,"Main2") - 0.967354942', '(737,"Main2") - 0.967354942', '(1457,"Main2") - 0.967354942', '(599,"Main2") - 0.967354942', '(631,"Main2") - 0.967354942', '(1476,"Main2") - 0.967354942', '(725,"Main2") - 0.967354942', '(461,"Main2") - 0.967354942', '(904,"Main2") - 0.967354942', '(926,"Main2") - 0.967354942', '(924,"Main2") - 0.967354942', '(913,"Main2") - 0.967354942', '(717,"Main2") - 0.967354942', '(598,"Main2") - 0.967354942', '(982,"Main2") - 0.967354942', '(770,"Main2") - 0.967354942', '(723,"Main2") - 0.967354942', '(958,"Main2") - 0.967354942', '(449,"Main2") - 0.967354942', '(1087,"Main2") - 0.967354942', '(941,"Main2") - 0.967354942', '(710,"Main2") - 0.967354942', '(1010,"Main2") - 0.967354942', '(775,"Main2") - 0.967354942', '(868,"Main2") - 0.967354942', '(980,"Main2") - 0.967354942', '(923,"Main2") - 0.967354942', '(51,"Main2") - 0.967354942', '(1005,"Main2") - 0.967354942', '(944,"Main2") - 0.967354942', '(718,"Main2") - 0.967354942', '(365,"Main2") - 0.967354942', '(966,"Main2") - 0.967354942', '(705,"Main2") - 0.967354942', '(391,"Main2") - 0.967354942', '(702,"Main2") - 0.967354942', '(1480,"Main2") - 0.967354942', '(601,"Main2") - 0.967354942', '(962,"Main2") - 0.967354942', '(906,"Main2") - 0.967354942', '(49,"Main2") - 0.967354942', '(728,"Main2") - 0.967354942', '(47,"Main2") - 0.967354942', '(63,"Main2") - 0.967354942', '(871,"Main2") - 0.967354942', '(628,"Main2") - 0.967354942', '(1493,"Main2") - 0.967354942', '(787,"Main2") - 0.967354942', '(1002,"Main2") - 0.967354942', '(892,"Main2") - 0.967354942', '(1479,"Main2") - 0.967354942', '(784,"Main2") - 0.967354942', '(665,"Main2") - 0.967354942', '(1468,"Main2") - 0.967354942', '(686,"Main2") - 0.967354942', '(1465,"Main2") - 0.967354942', '(922,"Main2") - 0.967354942', '(384,"Main2") - 0.967354942', '(743,"Main2") - 0.967354942', '(971,"Main2") - 0.967354942', '(901,"Main2") - 0.967354942', '(429,"Main2") - 0.967354942', '(929,"Main2") - 0.967354942', '(1001,"Main2") - 0.967354942', '(373,"Main2") - 0.967354942', '(1007,"Main2") - 0.967354942', '(989,"Main2") - 0.967354942', '(964,"Main2") - 0.967354942', '(626,"Main2") - 0.967354942', '(364,"Main2") - 0.967354942', '(428,"Main2") - 0.967354942', '(974,"Main2") - 0.967354942', '(64,"Main2") - 0.967354942', '(940,"Main2") - 0.967354942', '(860,"Main2") - 0.967354942', '(927,"Main2") - 0.967354942', '(1482,"Main2") - 0.967354942', '(856,"Main2") - 0.967354942', '(378,"Main2") - 0.967354942', '(997,"Main2") - 0.967354942', '(902,"Main2") - 0.967354942', '(893,"Main2") - 0.967354942', '(61,"Main2") - 0.967354942', '(1013,"Main2") - 0.967354942', '(1090,"Main2") - 0.967354942', '(939,"Main2") - 0.967354942', '(688,"Main2") - 0.967354942', '(29,"Main2") - 0.967354942', '(692,"Main2") - 0.967354942', '(719,"Main2") - 0.967354942', '(435,"Main2") - 0.967354942', '(1471,"Main2") - 0.967354942', '(699,"Main2") - 0.967354942', '(627,"Main2") - 0.967354942', '(975,"Main2") - 0.96735Loaded package environment from /home/niooi/.ghc/x86_64-linux-9.4.8/environments/default', '(698,"Main2") - 0.967354942', '(371,"Main2") - 0.967354942', '(943,"Main2") - 0.967354942', '(689,"Main2") - 0.967354942', '(992,"Main2") - 0.967354942', '(936,"Main2") - 0.967354942', '(600,"Main2") - 0.967354942', '(426,"Main2") - 0.967354942', '(946,"Main2") - 0.967354942', '(372,"Main2") - 0.967354942', '(987,"Main2") - 0.967354942', '(744,"Main2") - 0.967354942', '(967,"Main2") - 0.967354942', '(708,"Main2") - 0.967354942', '(1474,"Main2") - 0.967354942', '(430,"Main2") - 0.967354942', '(976,"Main2") - 0.967354942', '(379,"Main2") - 0.967354942', '(751,"Main2") - 0.967354942', '(439,"Main2") - 0.967354942', '(370,"Main2") - 0.967354942', '(1489,"Main2") - 0.967354942', '(1477,"Main2") - 0.967354942', '(912,"Main2") - 0.967354942', '(726,"Main2") - 0.967354942', '(62,"Main2") - 0.967354942', '(1484,"Main2") - 0.967354942', '(986,"Main2") - 0.967354942', '(709,"Main2") - 0.967354942', '(437,"Main2") - 0.967354942', '(1466,"Main2") - 0.967354942', '(895,"Main2") - 0.967354942', '(977,"Main2") - 0.967354942', '(35,"Main2") - 0.967354942', '(934,"Main2") - 0.967354942', '(1085,"Main2") - 0.967354942', '(984,"Main2") - 0.967354942', '(985,"Main2") - 0.967354942', '(861,"Main2") - 0.967354942', '(1407,"Main2") - 0.967354942', '(995,"Main2") - 0.967354942', '(981,"Main2") - 0.967354942', '(862,"Main2") - 0.967354942', '(772,"Main2") - 0.967354942', '(1470,"Main2") - 0.967354942', '(960,"Main2") - 0.967354942', '(1000,"Main2") - 0.967354942', '(983,"Main2") - 0.967354942', '(741,"Main2") - 0.967354942', '(732,"Main2") - 0.967354942', '(1089,"Main2") - 0.967354942', '(996,"Main2") - 0.967354942', '(909,"Main2") - 0.967354942']
Red Rules #: 33539
SMT Solving time: 0.005253922
Gen Solving time: 0.005360983
SMT Solver calls: 1
General Solver calls: 13
# nrpcs = [0, 1]
# post call args = 2
# func args = 0
# timeouts = 0
# branches = 188


Graph latex for: rewrite: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(rewrite)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 9) (0.79, 332) (1.0, 1)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.21, 9) (0.97, 332)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


sphere
Baseline:
hpc_exp = [('CallForHPC', '42', '6', '14', '0', '0'), ('Main2', '1', '14', '1017', '24', '48')]
calculate hpc converage
[('CallForHPC', 42, 6, 14, '0', '0'), ('Main2', 1, 14, 1017, '24', '48')]
[('Main2', 1, 14, 1017, '24', '48')]
[('24', '48')]
Last time is: 0.606850938
hpc reached = 1.4
g2 reached = 23
total = 1119
% reached = 2.1
last time = 0.606850938
all_times = ['(1168,"Main2") - 0.212427158', '(1166,"Main2") - 0.212427158', '(1145,"Main2") - 0.212427158', '(1143,"Main2") - 0.212427158', '(1173,"Main2") - 0.212427158', '(22,"Main2") - 0.212427158', '(1174,"Main2") - 0.212427158', '(1167,"Main2") - 0.212427158', '(1158,"Main2") - 0.212427158', '(1165,"Main2") - 0.212427158', '(1159,"Main2") - 0.212427158', '(1144,"Main2") - 0.212427158', '(24,"Main2") - 0.212427158', '(1172,"Main2") - 0.212427158', '(23,"Main2") - 0.212427158', '(1141,"Main2") - 0.212427158', '(1164,"Main2") - 0.212427158', '(1142,"Main2") - 0.212427158', '(1148,"Main2") - 0.606850938', '(1150,"Main2") - 0.606850938', '(1149,"Main2") - 0.606850938', '(1147,"Main2") - 0.606850938', '(1146,"Main2") - 0.606850938']
Red Rules #: 23528
SMT Solving time: 0.282121739
Gen Solving time: 0.286446097
SMT Solver calls: 91
General Solver calls: 326
# nrpcs = []
# post call args = 4
# func args = 0
# timeouts = 0
# branches = 72
NRPC:
hpc_exp = [('CallForHPC', '59', '274', '461', '0', '18'), ('Main2', '61', '626', '1017', '24', '48')]
calculate hpc converage
[('CallForHPC', 59, 274, 461, '0', '18'), ('Main2', 61, 626, 1017, '24', '48')]
[('Main2', 61, 626, 1017, '24', '48')]
[('24', '48')]
Last time is: 0.389276056
hpc reached = 61.6
g2 reached = 73
total = 1119
% reached = 6.5
last time = 0.389276056
all_times = ['(1168,"Main2") - 0.199507329', '(1166,"Main2") - 0.199507329', '(1145,"Main2") - 0.199507329', '(1143,"Main2") - 0.199507329', '(1173,"Main2") - 0.199507329', '(22,"Main2") - 0.199507329', '(1174,"Main2") - 0.199507329', '(1167,"Main2") - 0.199507329', '(1158,"Main2") - 0.199507329', '(1165,"Main2") - 0.199507329', '(1159,"Main2") - 0.199507329', '(1144,"Main2") - 0.199507329', '(24,"Main2") - 0.199507329', '(1172,"Main2") - 0.199507329', '(23,"Main2") - 0.199507329', '(1141,"Main2") - 0.199507329', '(1164,"Main2") - 0.199507329', '(1142,"Main2") - 0.199507329', '(1096,"Main2") - 0.279954778', '(1160,"Main2") - 0.279954778', '(1140,"Main2") - 0.279954778', '(1156,"Main2") - 0.279954778', '(1157,"Main2") - 0.279954778', '(1148,"Main2") - 0.279954778', '(1163,"Main2") - 0.279954778', '(1099,"Main2") - 0.279954778', '(1150,"Main2") - 0.279954778', '(456,"Main2") - 0.279954778', '(1149,"Main2") - 0.279954778', '(459,"Main2") - 0.279954778', '(679,"Main2") - 0.279954778', '(677,"Main2") - 0.279954778', '(464,"Main2") - 0.279954778', '(172,"Main2") - 0.279954778', '(703,"Main2") - 0.279954778', '(1095,"Main2") - 0.279954778', '(706,"Main2") - 0.279954778', '(716,"Main2") - 0.279954778', '(681,"Main2") - 0.279954778', '(1162,"Main2") - 0.279954778', '(458,"Main2") - 0.279954778', '(1171,"Main2") - 0.279954778', '(1128,"Main2") - 0.279954778', '(461,"Main2") - 0.279954778', '(717,"Main2") - 0.279954778', '(226,"Main2") - 0.279954778', '(1129,"Main2") - 0.279954778', '(660,"Main2") - 0.279954778', '(227,"Main2") - 0.279954778', '(1130,"Main2") - 0.279954778', '(680,"Main2") - 0.279954778', '(1117,"Main2") - 0.279954778', '(665,"Main2") - 0.279954778', '(661,"Main2") - 0.279954778', '(489,"Main2") - 0.279954778', '(1102,"Main2") - 0.279954778', '(1147,"Main2") - 0.279954778', '(678,"Main2") - 0.279954778', '(21,"Main2") - 0.279954778', '(171,"Main2") - 0.279954778', '(1146,"Main2") - 0.279954778', '(668,"Main2") - 0.279954778', '(1170,"Main2") - 0.279954778', '(1094,"Main2") - 0.279954778', '(1116,"Main2") - 0.279954778', '(1139,"Main2") - 0.279954778', '(490,"Main2") - 0.279954778', '(676,"Main2") - 0.389276056', '(467,"Main2") - 0.389276056', '(667,"Main2") - 0.389276056', '(465,"Main2") - 0.389276056', '(675,"Main2") - 0.389276056', '(462,"Main2") - 0.389276056']
Red Rules #: 22015
SMT Solving time: 0.261053431
Gen Solving time: 0.263785864
SMT Solver calls: 106
General Solver calls: 257
# nrpcs = [0, 2, 2, 1, 0, 1, 0, 1, 5, 3, 2, 0, 1, 0, 1, 0, 5, 6, 4, 0, 1, 0, 3, 3, 1, 0, 1, 7, 7, 7]
# post call args = 4
# func args = 26
# timeouts = 0
# branches = 72


Graph latex for: sphere: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(sphere)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.21, 18) (0.61, 5)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.2, 18) (0.28, 49) (0.39, 6)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


treejoin
Baseline:
hpc_exp = [('CallForHPC', '60', '14', '23', '0', '0'), ('Main2', '20', '40', '191', '13', '26')]
calculate hpc converage
[('CallForHPC', 60, 14, 23, '0', '0'), ('Main2', 20, 40, 191, '13', '26')]
[('Main2', 20, 40, 191, '13', '26')]
[('13', '26')]
Last time is: 0.990695716
hpc reached = 20.9
g2 reached = 56
total = 229
% reached = 24.5
last time = 0.990695716
all_times = ['(231,"Main2") - 0.197517130', '(191,"Main2") - 0.197517130', '(214,"Main2") - 0.197517130', '(230,"Main2") - 0.197517130', '(190,"Main2") - 0.197517130', '(140,"Main2") - 0.197517130', '(232,"Main2") - 0.197517130', '(225,"Main2") - 0.197517130', '(224,"Main2") - 0.197517130', '(226,"Main2") - 0.197517130', '(227,"Main2") - 0.197517130', '(228,"Main2") - 0.197517130', '(3,"Main2") - 0.402481138', '(138,"Main2") - 0.402481138', '(141,"Main2") - 0.402481138', '(25,"Main2") - 0.402481138', '(179,"Main2") - 0.402481138', '(17,"Main2") - 0.402481138', '(219,"Main2") - 0.402481138', '(22,"Main2") - 0.402481138', '(139,"Main2") - 0.402481138', '(166,"Main2") - 0.402481138', '(14,"Main2") - 0.402481138', '(20,"Main2") - 0.402481138', '(218,"Main2") - 0.402481138', '(170,"Main2") - 0.402481138', '(13,"Main2") - 0.402481138', '(157,"Main2") - 0.402481138', '(172,"Main2") - 0.402481138', '(189,"Main2") - 0.402481138', '(146,"Main2") - 0.402481138', '(1,"Main2") - 0.402481138', '(221,"Main2") - 0.402481138', '(26,"Main2") - 0.402481138', '(168,"Main2") - 0.402481138', '(145,"Main2") - 0.402481138', '(169,"Main2") - 0.402481138', '(178,"Main2") - 0.402481138', '(217,"Main2") - 0.402481138', '(158,"Main2") - 0.402481138', '(229,"Main2") - 0.402481138', '(24,"Main2") - 0.402481138', '(167,"Main2") - 0.402481138', '(142,"Main2") - 0.402481138', '(180,"Main2") - 0.402481138', '(144,"Main2") - 0.402481138', '(175,"Main2") - 0.402481138', '(21,"Main2") - 0.402481138', '(18,"Main2") - 0.402481138', '(16,"Main2") - 0.402481138', '(143,"Main2") - 0.402481138', '(220,"Main2") - 0.402481138', '(0,"Main2") - 0.402481138', '(192,"Main2") - 0.402481138', '(2,"Main2") - 0.990695716', '(15,"Main2") - 0.990695716']
Red Rules #: 23485
SMT Solving time: 0.301283228
Gen Solving time: 0.306480303
SMT Solver calls: 82
General Solver calls: 444
# nrpcs = []
# post call args = 4
# func args = 0
# timeouts = 2
# branches = 39
NRPC:
hpc_exp = [('CallForHPC', '46', '6', '13', '0', '0'), ('Main2', '4', '8', '191', '13', '26')]
calculate hpc converage
[('CallForHPC', 46, 6, 13, '0', '0'), ('Main2', 4, 8, 191, '13', '26')]
[('Main2', 4, 8, 191, '13', '26')]
[('13', '26')]
Last time is: 0.992395117
hpc reached = 4.2
g2 reached = 74
total = 229
% reached = 32.3
last time = 0.992395117
all_times = ['(231,"Main2") - 0.197791167', '(191,"Main2") - 0.197791167', '(214,"Main2") - 0.197791167', '(230,"Main2") - 0.197791167', '(190,"Main2") - 0.197791167', '(140,"Main2") - 0.197791167', '(232,"Main2") - 0.197791167', '(225,"Main2") - 0.197791167', '(224,"Main2") - 0.197791167', '(226,"Main2") - 0.197791167', '(227,"Main2") - 0.197791167', '(228,"Main2") - 0.197791167', '(159,"Main2") - 0.262050667', '(223,"Main2") - 0.262050667', '(166,"Main2") - 0.262050667', '(155,"Main2") - 0.262050667', '(157,"Main2") - 0.262050667', '(172,"Main2") - 0.262050667', '(189,"Main2") - 0.262050667', '(160,"Main2") - 0.262050667', '(163,"Main2") - 0.262050667', '(221,"Main2") - 0.262050667', '(168,"Main2") - 0.262050667', '(222,"Main2") - 0.262050667', '(169,"Main2") - 0.262050667', '(158,"Main2") - 0.262050667', '(167,"Main2") - 0.262050667', '(162,"Main2") - 0.262050667', '(161,"Main2") - 0.262050667', '(164,"Main2") - 0.262050667', '(3,"Main2") - 0.532878163', '(138,"Main2") - 0.532878163', '(141,"Main2") - 0.532878163', '(25,"Main2") - 0.532878163', '(17,"Main2") - 0.532878163', '(219,"Main2") - 0.532878163', '(22,"Main2") - 0.532878163', '(139,"Main2") - 0.532878163', '(14,"Main2") - 0.532878163', '(20,"Main2") - 0.532878163', '(218,"Main2") - 0.532878163', '(13,"Main2") - 0.532878163', '(146,"Main2") - 0.532878163', '(1,"Main2") - 0.532878163', '(187,"Main2") - 0.532878163', '(26,"Main2") - 0.532878163', '(145,"Main2") - 0.532878163', '(217,"Main2") - 0.532878163', '(229,"Main2") - 0.532878163', '(24,"Main2") - 0.532878163', '(186,"Main2") - 0.532878163', '(183,"Main2") - 0.532878163', '(142,"Main2") - 0.532878163', '(144,"Main2") - 0.532878163', '(21,"Main2") - 0.532878163', '(171,"Main2") - 0.532878163', '(18,"Main2") - 0.532878163', '(188,"Main2") - 0.532878163', '(16,"Main2") - 0.532878163', '(143,"Main2") - 0.532878163', '(220,"Main2") - 0.532878163', '(0,"Main2") - 0.532878163', '(192,"Main2") - 0.532878163', '(152,"Main2") - 0.992395117', '(2,"Main2") - 0.992395117', '(151,"Main2") - 0.992395117', '(165,"Main2") - 0.992395117', '(19,"Main2") - 0.992395117', '(150,"Main2") - 0.992395117', '(154,"Main2") - 0.992395117', '(147,"Main2") - 0.992395117', '(156,"Main2") - 0.992395117', '(153,"Main2") - 0.992395117', '(23,"Main2") - 0.992395117']
Red Rules #: 19961
SMT Solving time: 0.321676749
Gen Solving time: 0.325377464
SMT Solver calls: 103
General Solver calls: 261
# nrpcs = [0, 1, 1, 0, 0, 19, 2]
# post call args = 2
# func args = 5
# timeouts = 6
# branches = 39


Graph latex for: treejoin: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(treejoin)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 12) (0.4, 42) (0.99, 2)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.2, 12) (0.26, 18) (0.53, 33) (0.99, 11)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| Benchmark    |   #Total Ticks |   B HPC cov % |   B cov % |   B last time |   N HPC cov % |   N cov % |   N last time | Pos 1-sec B/N   | Pos 3-sec B/N   | Pos 5-sec B/N   | Diff tick 1s   | Diff tick 3s   | Diff tick 5s   |   Avg # Nrpcs |   # Branches |
+==============+================+===============+===========+===============+===============+===========+===============+=================+=================+=================+================+================+================+===============+==============+
| boyer        |           1017 |           1.6 |       2.5 |           0.3 |          37.6 |       2.5 |           0.2 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          2.92 |           45 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| boyer2       |            709 |           0   |       0   |           0   |           0   |       0   |           0   | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |          126 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| calendar     |            315 |           3.1 |       5.7 |           0.7 |           3.1 |      23.8 |           0.5 | 0/0             | 0/0             | 0/0             | 0/57           | 0/57           | 0/57           |          0.21 |           17 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| cichelli     |            436 |           0   |       0   |           0   |          76.9 |      28.9 |           0.4 | 0/0             | 0/0             | 0/0             | 0/126          | 0/126          | 0/126          |          1.77 |           50 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| circsim      |           1015 |           4   |       5.2 |           0.7 |           4   |       5.2 |           0.7 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |           66 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| clausify     |            369 |           0   |      33.3 |           0.6 |           0   |      33.3 |           0.7 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0.5  |            0 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| constraints  |            604 |           0   |      32.9 |           0.9 |          70.5 |      46.5 |           0.9 | 0/0             | 0/0             | 0/0             | 0/82           | 0/82           | 0/82           |          1.21 |           53 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| cryptarithm1 |            102 |          42.6 |      46.1 |           0.3 |          42.6 |      46.1 |           0.3 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          1.5  |            7 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| cse          |            243 |          29.6 |      71.6 |           0.4 |          29.6 |      71.6 |           0.4 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          1    |           37 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| eliza        |            599 |           6.3 |       6.2 |           0.4 |           6.3 |       6.2 |           0.5 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |           28 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| expert       |            889 |           5.9 |       4.8 |           0.3 |           5.9 |       4.8 |           0.3 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |          138 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| gcd          |            123 |          76.9 |      87.8 |           0.7 |          79.3 |      87   |           0.9 | 0/0             | 0/0             | 0/0             | 1/0            | 1/0            | 1/0            |          0.57 |           13 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| integer      |            110 |           0   |       0   |           0   |          77.9 |      54.5 |           0.4 | 0/0             | 0/0             | 0/0             | 0/60           | 0/60           | 0/60           |          0.98 |            2 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| lcss         |            155 |          55.2 |       7.7 |           0.2 |          85.8 |      18.1 |           0.3 | 0/0             | 0/0             | 0/0             | 0/16           | 0/16           | 0/16           |          2.22 |           18 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| life         |            161 |          21.5 |      29.8 |           0.4 |          52.7 |      61.5 |           0.7 | 0/0             | 0/0             | 0/0             | 0/51           | 0/51           | 0/51           |          1.21 |           14 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| mandel2      |            445 |          70.5 |      69.7 |           0.7 |          70.5 |      69.7 |           0.8 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |           60 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| multiplier   |            736 |           0   |       0   |           0   |           0   |       0   |           0   | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |          113 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| power        |            278 |           7   |      10.1 |           0.2 |          60.6 |      49.6 |           1   | 0/0             | 0/0             | 0/0             | 0/110          | 0/110          | 0/110          |          0.6  |           43 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| primetest    |            470 |           4.5 |       5.3 |           0.9 |           4.5 |       5.3 |           0.9 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |           58 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| scc          |            197 |           0   |       0   |           0   |          97.7 |      28.4 |           0.6 | 0/0             | 0/0             | 0/0             | 0/56           | 0/56           | 0/56           |          2.77 |           17 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| rewrite      |           1518 |           0   |      22.5 |           1   |          21   |      22.5 |           1   | 0/0             | 0/0             | 0/0             | 1/0            | 1/0            | 1/0            |          0.5  |            0 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| sphere       |           1119 |           1.4 |       2.1 |           0.6 |          61.6 |       6.5 |           0.4 | 0/0             | 0/0             | 0/0             | 0/50           | 0/50           | 0/50           |          2.13 |           72 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| treejoin     |            229 |          20.9 |      24.5 |           1   |           4.2 |      32.3 |           1   | 0/0             | 0/0             | 0/0             | 0/18           | 0/18           | 0/18           |          3.29 |           39 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+


Latex string for coverage table

\multicolumn{4}{l}{\textbf{imaginary}}\\ \hline 
bernouilli & 96 & 12.9 & \textbf{80.0} & 0.3 & 0.7\\ \hline 
digits-of-e1 & 118 & \textbf{75.2} & 69.7 & 0.4 & 1.0\\ \hline 
digits-of-e2 & 87 & \textbf{98.7} & 92.3 & 0.9 & 1.0\\ \hline 
exp3_8 & 55 & \textbf{89.4} & 38.3 & 1.0 & 0.6\\ \hline 
gen_regexps & 128 & 50.0 & 50.0 & 0.8 & 0.8\\ \hline 
integrate & 143 & 3.6 & \textbf{69.1} & 0.2 & 0.3\\ \hline 
paraffins & 264 & 36.2 & \textbf{78.5} & 0.9 & 0.9\\ \hline 
primes & 29 & 100.0 & 100.0 & 0.3 & 0.3\\ \hline 
queens & 95 & 29.2 & \textbf{49.4} & 0.8 & 0.8\\ \hline 
rfib & 25 & 52.4 & 52.4 & 0.8 & 0.4\\ \hline 
tak & 41 & 37.8 & 37.8 & 0.2 & 0.6\\ \hline 
wheel-sieve1 & 131 & 76.3 & 76.3 & 0.9 & 0.7\\ \hline 
wheel-sieve2 & 177 & 20.5 & 20.5 & 1.0 & 0.9\\ \hline 
x2n1 & 35 & 0.0 & 0.0 & 0.0 & 0.0\\ \hline 
\multicolumn{4}{l}{\textbf{spectral}}\\ \hline 
boyer & 1017 & 1.6 & \textbf{37.6} & 0.3 & 0.2\\ \hline 
boyer2 & 709 & 0.0 & 0.0 & 0.0 & 0.0\\ \hline 
calendar & 315 & 3.1 & 3.1 & 0.7 & 0.5\\ \hline 
cichelli & 436 & 0.0 & \textbf{76.9} & 0.0 & 0.4\\ \hline 
circsim & 1015 & 4.0 & 4.0 & 0.7 & 0.7\\ \hline 
clausify & 369 & 0 & 0 & 0.6 & 0.7\\ \hline 
constraints & 604 & 0.0 & \textbf{70.5} & 0.9 & 0.9\\ \hline 
cryptarithm1 & 102 & 42.6 & 42.6 & 0.3 & 0.3\\ \hline 
cse & 243 & 29.6 & 29.6 & 0.4 & 0.4\\ \hline 
eliza & 599 & 6.3 & 6.3 & 0.4 & 0.5\\ \hline 
expert & 889 & 5.9 & 5.9 & 0.3 & 0.3\\ \hline 
gcd & 123 & 76.9 & \textbf{79.3} & 0.7 & 0.9\\ \hline 
integer & 110 & 0.0 & \textbf{77.9} & 0.0 & 0.4\\ \hline 
lcss & 155 & 55.2 & \textbf{85.8} & 0.2 & 0.3\\ \hline 
life & 161 & 21.5 & \textbf{52.7} & 0.4 & 0.7\\ \hline 
mandel2 & 445 & 70.5 & 70.5 & 0.7 & 0.8\\ \hline 
multiplier & 736 & 0.0 & 0.0 & 0.0 & 0.0\\ \hline 
power & 278 & 7.0 & \textbf{60.6} & 0.2 & 1.0\\ \hline 
primetest & 470 & 4.5 & 4.5 & 0.9 & 0.9\\ \hline 
scc & 197 & 0.0 & \textbf{97.7} & 0.0 & 0.6\\ \hline 
rewrite & 1518 & 0 & \textbf{21.0} & 1.0 & 1.0\\ \hline 
sphere & 1119 & 1.4 & \textbf{61.6} & 0.6 & 0.4\\ \hline 
treejoin & 229 & \textbf{20.9} & 4.2 & 1.0 & 1.0\\ \hline 

Latex string for coverage table with Tick count at atleast 1second 

\multicolumn{4}{l}{\textbf{imaginary}}\\ \hline 
bernouilli & 96 & 12.9 & \textbf{80.0} & 0.3 & 0.7 & 0/61\\ \hline 
digits-of-e1 & 118 & \textbf{75.2} & 69.7 & 0.4 & 1.0 & 0/7\\ \hline 
digits-of-e2 & 87 & \textbf{98.7} & 92.3 & 0.9 & 1.0 & 6/0\\ \hline 
exp3_8 & 55 & \textbf{89.4} & 38.3 & 1.0 & 0.6 & 2/0\\ \hline 
gen_regexps & 128 & 50.0 & 50.0 & 0.8 & 0.8 & 0/0\\ \hline 
integrate & 143 & 3.6 & \textbf{69.1} & 0.2 & 0.3 & 0/56\\ \hline 
paraffins & 264 & 36.2 & \textbf{78.5} & 0.9 & 0.9 & 0/0\\ \hline 
primes & 29 & 100.0 & 100.0 & 0.3 & 0.3 & 0/0\\ \hline 
queens & 95 & 29.2 & \textbf{49.4} & 0.8 & 0.8 & 0/54\\ \hline 
rfib & 25 & 52.4 & 52.4 & 0.8 & 0.4 & 0/0\\ \hline 
tak & 41 & 37.8 & 37.8 & 0.2 & 0.6 & 0/24\\ \hline 
wheel-sieve1 & 131 & 76.3 & 76.3 & 0.9 & 0.7 & 2/0\\ \hline 
wheel-sieve2 & 177 & 20.5 & 20.5 & 1.0 & 0.9 & 0/0\\ \hline 
x2n1 & 35 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0\\ \hline 
\multicolumn{4}{l}{\textbf{spectral}}\\ \hline 
boyer & 1017 & 1.6 & \textbf{37.6} & 0.3 & 0.2 & 0/0\\ \hline 
boyer2 & 709 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0\\ \hline 
calendar & 315 & 3.1 & 3.1 & 0.7 & 0.5 & 0/57\\ \hline 
cichelli & 436 & 0.0 & \textbf{76.9} & 0.0 & 0.4 & 0/126\\ \hline 
circsim & 1015 & 4.0 & 4.0 & 0.7 & 0.7 & 0/0\\ \hline 
clausify & 369 & 0 & 0 & 0.6 & 0.7 & 0/0\\ \hline 
constraints & 604 & 0.0 & \textbf{70.5} & 0.9 & 0.9 & 0/82\\ \hline 
cryptarithm1 & 102 & 42.6 & 42.6 & 0.3 & 0.3 & 0/0\\ \hline 
cse & 243 & 29.6 & 29.6 & 0.4 & 0.4 & 0/0\\ \hline 
eliza & 599 & 6.3 & 6.3 & 0.4 & 0.5 & 0/0\\ \hline 
expert & 889 & 5.9 & 5.9 & 0.3 & 0.3 & 0/0\\ \hline 
gcd & 123 & 76.9 & \textbf{79.3} & 0.7 & 0.9 & 1/0\\ \hline 
integer & 110 & 0.0 & \textbf{77.9} & 0.0 & 0.4 & 0/60\\ \hline 
lcss & 155 & 55.2 & \textbf{85.8} & 0.2 & 0.3 & 0/16\\ \hline 
life & 161 & 21.5 & \textbf{52.7} & 0.4 & 0.7 & 0/51\\ \hline 
mandel2 & 445 & 70.5 & 70.5 & 0.7 & 0.8 & 0/0\\ \hline 
multiplier & 736 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0\\ \hline 
power & 278 & 7.0 & \textbf{60.6} & 0.2 & 1.0 & 0/110\\ \hline 
primetest & 470 & 4.5 & 4.5 & 0.9 & 0.9 & 0/0\\ \hline 
scc & 197 & 0.0 & \textbf{97.7} & 0.0 & 0.6 & 0/56\\ \hline 
rewrite & 1518 & 0 & \textbf{21.0} & 1.0 & 1.0 & 1/0\\ \hline 
sphere & 1119 & 1.4 & \textbf{61.6} & 0.6 & 0.4 & 0/50\\ \hline 
treejoin & 229 & \textbf{20.9} & 4.2 & 1.0 & 1.0 & 0/18\\ \hline 

Latex string for coverage table with Tick count at atleast 5second 

\multicolumn{4}{l}{\textbf{imaginary}}\\ \hline 
bernouilli & 96 & 12.9 & \textbf{80.0} & 0.3 & 0.7 & 0/61 & 0/61\\ \hline 
digits-of-e1 & 118 & \textbf{75.2} & 69.7 & 0.4 & 1.0 & 0/7 & 0/7\\ \hline 
digits-of-e2 & 87 & \textbf{98.7} & 92.3 & 0.9 & 1.0 & 6/0 & 6/0\\ \hline 
exp3_8 & 55 & \textbf{89.4} & 38.3 & 1.0 & 0.6 & 2/0 & 2/0\\ \hline 
gen_regexps & 128 & 50.0 & 50.0 & 0.8 & 0.8 & 0/0 & 0/0\\ \hline 
integrate & 143 & 3.6 & \textbf{69.1} & 0.2 & 0.3 & 0/56 & 0/56\\ \hline 
paraffins & 264 & 36.2 & \textbf{78.5} & 0.9 & 0.9 & 0/0 & 0/0\\ \hline 
primes & 29 & 100.0 & 100.0 & 0.3 & 0.3 & 0/0 & 0/0\\ \hline 
queens & 95 & 29.2 & \textbf{49.4} & 0.8 & 0.8 & 0/54 & 0/54\\ \hline 
rfib & 25 & 52.4 & 52.4 & 0.8 & 0.4 & 0/0 & 0/0\\ \hline 
tak & 41 & 37.8 & 37.8 & 0.2 & 0.6 & 0/24 & 0/24\\ \hline 
wheel-sieve1 & 131 & 76.3 & 76.3 & 0.9 & 0.7 & 2/0 & 2/0\\ \hline 
wheel-sieve2 & 177 & 20.5 & 20.5 & 1.0 & 0.9 & 0/0 & 0/0\\ \hline 
x2n1 & 35 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0 & 0/0\\ \hline 
\multicolumn{4}{l}{\textbf{spectral}}\\ \hline 
boyer & 1017 & 1.6 & \textbf{37.6} & 0.3 & 0.2 & 0/0 & 0/0\\ \hline 
boyer2 & 709 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0 & 0/0\\ \hline 
calendar & 315 & 3.1 & 3.1 & 0.7 & 0.5 & 0/57 & 0/57\\ \hline 
cichelli & 436 & 0.0 & \textbf{76.9} & 0.0 & 0.4 & 0/126 & 0/126\\ \hline 
circsim & 1015 & 4.0 & 4.0 & 0.7 & 0.7 & 0/0 & 0/0\\ \hline 
clausify & 369 & 0 & 0 & 0.6 & 0.7 & 0/0 & 0/0\\ \hline 
constraints & 604 & 0.0 & \textbf{70.5} & 0.9 & 0.9 & 0/82 & 0/82\\ \hline 
cryptarithm1 & 102 & 42.6 & 42.6 & 0.3 & 0.3 & 0/0 & 0/0\\ \hline 
cse & 243 & 29.6 & 29.6 & 0.4 & 0.4 & 0/0 & 0/0\\ \hline 
eliza & 599 & 6.3 & 6.3 & 0.4 & 0.5 & 0/0 & 0/0\\ \hline 
expert & 889 & 5.9 & 5.9 & 0.3 & 0.3 & 0/0 & 0/0\\ \hline 
gcd & 123 & 76.9 & \textbf{79.3} & 0.7 & 0.9 & 1/0 & 1/0\\ \hline 
integer & 110 & 0.0 & \textbf{77.9} & 0.0 & 0.4 & 0/60 & 0/60\\ \hline 
lcss & 155 & 55.2 & \textbf{85.8} & 0.2 & 0.3 & 0/16 & 0/16\\ \hline 
life & 161 & 21.5 & \textbf{52.7} & 0.4 & 0.7 & 0/51 & 0/51\\ \hline 
mandel2 & 445 & 70.5 & 70.5 & 0.7 & 0.8 & 0/0 & 0/0\\ \hline 
multiplier & 736 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0 & 0/0\\ \hline 
power & 278 & 7.0 & \textbf{60.6} & 0.2 & 1.0 & 0/110 & 0/110\\ \hline 
primetest & 470 & 4.5 & 4.5 & 0.9 & 0.9 & 0/0 & 0/0\\ \hline 
scc & 197 & 0.0 & \textbf{97.7} & 0.0 & 0.6 & 0/56 & 0/56\\ \hline 
rewrite & 1518 & 0 & \textbf{21.0} & 1.0 & 1.0 & 1/0 & 1/0\\ \hline 
sphere & 1119 & 1.4 & \textbf{61.6} & 0.6 & 0.4 & 0/50 & 0/50\\ \hline 
treejoin & 229 & \textbf{20.9} & 4.2 & 1.0 & 1.0 & 0/18 & 0/18\\ \hline 


Latex string for table 2

\multicolumn{4}{l}{\textbf{imaginary}}\\ \hline 
bernouilli & 0/0 & 0/0 & 0/0\\ \hline 
digits-of-e1 & 0/0 & 0/0 & 0/0\\ \hline 
digits-of-e2 & 0/0 & 0/0 & 0/0\\ \hline 
exp3_8 & 0/0 & 0/0 & 0/0\\ \hline 
gen_regexps & 0/0 & 0/0 & 0/0\\ \hline 
integrate & 0/0 & 0/0 & 0/0\\ \hline 
paraffins & 0/0 & 0/0 & 0/0\\ \hline 
primes & 0/0 & 0/0 & 0/0\\ \hline 
queens & 0/0 & 0/0 & 0/0\\ \hline 
rfib & 0/0 & 0/0 & 0/0\\ \hline 
tak & 0/0 & 0/0 & 0/0\\ \hline 
wheel-sieve1 & 0/0 & 0/0 & 0/0\\ \hline 
wheel-sieve2 & 0/0 & 0/0 & 0/0\\ \hline 
x2n1 & 0/0 & 0/0 & 0/0\\ \hline 
\multicolumn{4}{l}{\textbf{spectral}}\\ \hline 
boyer & 0/0 & 0/0 & 0/0\\ \hline 
boyer2 & 0/0 & 0/0 & 0/0\\ \hline 
calendar & 0/0 & 0/0 & 0/0\\ \hline 
cichelli & 0/0 & 0/0 & 0/0\\ \hline 
circsim & 0/0 & 0/0 & 0/0\\ \hline 
clausify & 0/0 & 0/0 & 0/0\\ \hline 
constraints & 0/0 & 0/0 & 0/0\\ \hline 
cryptarithm1 & 0/0 & 0/0 & 0/0\\ \hline 
cse & 0/0 & 0/0 & 0/0\\ \hline 
eliza & 0/0 & 0/0 & 0/0\\ \hline 
expert & 0/0 & 0/0 & 0/0\\ \hline 
gcd & 0/0 & 0/0 & 0/0\\ \hline 
integer & 0/0 & 0/0 & 0/0\\ \hline 
lcss & 0/0 & 0/0 & 0/0\\ \hline 
life & 0/0 & 0/0 & 0/0\\ \hline 
mandel2 & 0/0 & 0/0 & 0/0\\ \hline 
multiplier & 0/0 & 0/0 & 0/0\\ \hline 
power & 0/0 & 0/0 & 0/0\\ \hline 
primetest & 0/0 & 0/0 & 0/0\\ \hline 
scc & 0/0 & 0/0 & 0/0\\ \hline 
rewrite & 0/0 & 0/0 & 0/0\\ \hline 
sphere & 0/0 & 0/0 & 0/0\\ \hline 
treejoin & 0/0 & 0/0 & 0/0\\ \hline 


Latex string for table 3

\multicolumn{4}{l}{\textbf{imaginary}}\\ \hline 
bernouilli & 0/61 & 0/61 & 0/61\\ \hline 
digits-of-e1 & 0/7 & 0/7 & 0/7\\ \hline 
digits-of-e2 & 6/0 & 6/0 & 6/0\\ \hline 
exp3_8 & 2/0 & 2/0 & 2/0\\ \hline 
gen_regexps & 0/0 & 0/0 & 0/0\\ \hline 
integrate & 0/56 & 0/56 & 0/56\\ \hline 
paraffins & 0/0 & 0/0 & 0/0\\ \hline 
primes & 0/0 & 0/0 & 0/0\\ \hline 
queens & 0/54 & 0/54 & 0/54\\ \hline 
rfib & 0/0 & 0/0 & 0/0\\ \hline 
tak & 0/24 & 0/24 & 0/24\\ \hline 
wheel-sieve1 & 2/0 & 2/0 & 2/0\\ \hline 
wheel-sieve2 & 0/0 & 0/0 & 0/0\\ \hline 
x2n1 & 0/0 & 0/0 & 0/0\\ \hline 
\multicolumn{4}{l}{\textbf{spectral}}\\ \hline 
boyer & 0/0 & 0/0 & 0/0\\ \hline 
boyer2 & 0/0 & 0/0 & 0/0\\ \hline 
calendar & 0/57 & 0/57 & 0/57\\ \hline 
cichelli & 0/126 & 0/126 & 0/126\\ \hline 
circsim & 0/0 & 0/0 & 0/0\\ \hline 
clausify & 0/0 & 0/0 & 0/0\\ \hline 
constraints & 0/82 & 0/82 & 0/82\\ \hline 
cryptarithm1 & 0/0 & 0/0 & 0/0\\ \hline 
cse & 0/0 & 0/0 & 0/0\\ \hline 
eliza & 0/0 & 0/0 & 0/0\\ \hline 
expert & 0/0 & 0/0 & 0/0\\ \hline 
gcd & 1/0 & 1/0 & 1/0\\ \hline 
integer & 0/60 & 0/60 & 0/60\\ \hline 
lcss & 0/16 & 0/16 & 0/16\\ \hline 
life & 0/51 & 0/51 & 0/51\\ \hline 
mandel2 & 0/0 & 0/0 & 0/0\\ \hline 
multiplier & 0/0 & 0/0 & 0/0\\ \hline 
power & 0/110 & 0/110 & 0/110\\ \hline 
primetest & 0/0 & 0/0 & 0/0\\ \hline 
scc & 0/56 & 0/56 & 0/56\\ \hline 
rewrite & 1/0 & 1/0 & 1/0\\ \hline 
sphere & 0/50 & 0/50 & 0/50\\ \hline 
treejoin & 0/18 & 0/18 & 0/18\\ \hline 

Total NRPC post call states = 194
Total NRPC func arg states = 501
Total NRPC timeouts = 120
Total programs with timeout = 11
