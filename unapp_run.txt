['bernouilli', 'digits-of-e1', 'digits-of-e2', 'exp3_8', 'gen_regexps', 'integrate', 'paraffins', 'primes', 'queens', 'rfib', 'tak', 'wheel-sieve1', 'wheel-sieve2', 'x2n1']
bernouilli
Baseline:
hpc_exp = [('Bernouilli', '12', '11', '85', '2', '6'), ('CallForHPC', '58', '14', '24', '0', '0')]
calculate hpc converage
[('Bernouilli', 12, 11, 85, '2', '6'), ('CallForHPC', 58, 14, 24, '0', '0')]
[('Bernouilli', 12, 11, 85, '2', '6')]
[('2', '6')]
Last time is: 0.335993833
hpc reached = 12.9
g2 reached = 15
total = 96
% reached = 15.6
last time = 0.335993833
all_times = ['(95,"Bernouilli") - 0.235008364', '(93,"Bernouilli") - 0.235008364', '(89,"Bernouilli") - 0.235008364', '(91,"Bernouilli") - 0.235008364', '(94,"Bernouilli") - 0.235008364', '(90,"Bernouilli") - 0.235008364', '(43,"Bernouilli") - 0.235008364', '(48,"Bernouilli") - 0.303993938', '(52,"Bernouilli") - 0.303993938', '(49,"Bernouilli") - 0.303993938', '(51,"Bernouilli") - 0.303993938', '(44,"Bernouilli") - 0.335993833', '(46,"Bernouilli") - 0.335993833', '(45,"Bernouilli") - 0.335993833', '(47,"Bernouilli") - 0.335993833']
Red Rules #: 22826
SMT Solving time: 0.245677024
Gen Solving time: 0.247198957
SMT Solver calls: 56
General Solver calls: 65
# nrpcs = []
# post call args = 3
# func args = 0
# timeouts = 0
# branches = 8
NRPC:
hpc_exp = [('Bernouilli', '80', '68', '85', '2', '6'), ('CallForHPC', '83', '62', '74', '0', '4')]
calculate hpc converage
[('Bernouilli', 80, 68, 85, '2', '6'), ('CallForHPC', 83, 62, 74, '0', '4')]
[('Bernouilli', 80, 68, 85, '2', '6')]
[('2', '6')]
Last time is: 0.725914730
hpc reached = 80.0
g2 reached = 76
total = 96
% reached = 79.2
last time = 0.725914730
all_times = ['(95,"Bernouilli") - 0.233530588', '(93,"Bernouilli") - 0.233530588', '(89,"Bernouilli") - 0.233530588', '(91,"Bernouilli") - 0.233530588', '(94,"Bernouilli") - 0.233530588', '(90,"Bernouilli") - 0.233530588', '(43,"Bernouilli") - 0.233530588', '(48,"Bernouilli") - 0.307379903', '(52,"Bernouilli") - 0.307379903', '(49,"Bernouilli") - 0.307379903', '(51,"Bernouilli") - 0.307379903', '(44,"Bernouilli") - 0.342242795', '(46,"Bernouilli") - 0.342242795', '(45,"Bernouilli") - 0.342242795', '(47,"Bernouilli") - 0.342242795', '(41,"Bernouilli") - 0.714918619', '(87,"Bernouilli") - 0.714918619', '(79,"Bernouilli") - 0.714918619', '(18,"Bernouilli") - 0.714918619', '(64,"Bernouilli") - 0.714918619', '(80,"Bernouilli") - 0.714918619', '(61,"Bernouilli") - 0.714918619', '(88,"Bernouilli") - 0.714918619', '(59,"Bernouilli") - 0.714918619', '(3,"Bernouilli") - 0.714918619', '(67,"Bernouilli") - 0.714918619', '(21,"Bernouilli") - 0.714918619', '(92,"Bernouilli") - 0.714918619', '(40,"Bernouilli") - 0.714918619', '(24,"Bernouilli") - 0.714918619', '(76,"Bernouilli") - 0.714918619', '(60,"Bernouilli") - 0.714918619', '(38,"Bernouilli") - 0.714918619', '(22,"Bernouilli") - 0.714918619', '(63,"Bernouilli") - 0.714918619', '(42,"Bernouilli") - 0.714918619', '(73,"Bernouilli") - 0.714918619', '(86,"Bernouilli") - 0.714918619', '(16,"Bernouilli") - 0.714918619', '(55,"Bernouilli") - 0.714918619', '(84,"Bernouilli") - 0.714918619', '(25,"Bernouilli") - 0.714918619', '(26,"Bernouilli") - 0.714918619', '(70,"Bernouilli") - 0.714918619', '(56,"Bernouilli") - 0.714918619', '(50,"Bernouilli") - 0.714918619', '(68,"Bernouilli") - 0.714918619', '(72,"Bernouilli") - 0.714918619', '(27,"Bernouilli") - 0.714918619', '(85,"Bernouilli") - 0.714918619', '(74,"Bernouilli") - 0.714918619', '(53,"Bernouilli") - 0.714918619', '(71,"Bernouilli") - 0.714918619', '(81,"Bernouilli") - 0.714918619', '(83,"Bernouilli") - 0.714918619', '(75,"Bernouilli") - 0.714918619', '(69,"Bernouilli") - 0.714918619', '(65,"Bernouilli") - 0.714918619', '(39,"Bernouilli") - 0.714918619', '(17,"Bernouilli") - 0.714918619', '(54,"Bernouilli") - 0.714918619', '(82,"Bernouilli") - 0.714918619', '(58,"Bernouilli") - 0.714918619', '(19,"Bernouilli") - 0.714918619', '(62,"Bernouilli") - 0.714918619', '(23,"Bernouilli") - 0.714918619', '(66,"Bernouilli") - 0.714918619', '(57,"Bernouilli") - 0.714918619', '(20,"Bernouilli") - 0.725460333', '(37,"Bernouilli") - 0.725460333', '(31,"Bernouilli") - 0.725460333', '(35,"Bernouilli") - 0.725460333', '(34,"Bernouilli") - 0.725460333', '(30,"Bernouilli") - 0.725460333', '(28,"Bernouilli") - 0.725460333', '(2,"Bernouilli") - 0.725914730']
Red Rules #: 20263
SMT Solving time: 0.237072629
Gen Solving time: 0.238245668
SMT Solver calls: 48
General Solver calls: 54
# nrpcs = [0, 0, 0, 0, 1, 0, 1]
# post call args = 3
# func args = 4
# timeouts = 0
# branches = 8


Graph latex for: bernouilli: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(bernouilli)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.24, 7) (0.3, 4) (0.34, 4)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.23, 7) (0.31, 4) (0.34, 4) (0.71, 53) (0.73, 8)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


digits-of-e1
Baseline:
hpc_exp = [('CallForHPC', '88', '182', '205', '0', '48'), ('Main2', '75', '82', '109', '1', '4')]
calculate hpc converage
[('CallForHPC', 88, 182, 205, '0', '48'), ('Main2', 75, 82, 109, '1', '4')]
[('Main2', 75, 82, 109, '1', '4')]
[('1', '4')]
Last time is: 0.398178307
hpc reached = 75.2
g2 reached = 91
total = 118
% reached = 77.1
last time = 0.398178307
all_times = ['(92,"Main2") - 0.172833688', '(117,"Main2") - 0.172833688', '(116,"Main2") - 0.172833688', '(115,"Main2") - 0.172833688', '(112,"Main2") - 0.172833688', '(113,"Main2") - 0.172833688', '(110,"Main2") - 0.172833688', '(76,"Main2") - 0.172833688', '(90,"Main2") - 0.190262835', '(111,"Main2") - 0.190262835', '(108,"Main2") - 0.190262835', '(77,"Main2") - 0.190262835', '(107,"Main2") - 0.190262835', '(79,"Main2") - 0.190262835', '(91,"Main2") - 0.190262835', '(104,"Main2") - 0.190262835', '(81,"Main2") - 0.190262835', '(80,"Main2") - 0.190262835', '(74,"Main2") - 0.398178307', '(2,"Main2") - 0.398178307', '(68,"Main2") - 0.398178307', '(3,"Main2") - 0.398178307', '(30,"Main2") - 0.398178307', '(109,"Main2") - 0.398178307', '(87,"Main2") - 0.398178307', '(25,"Main2") - 0.398178307', '(103,"Main2") - 0.398178307', '(17,"Main2") - 0.398178307', '(5,"Main2") - 0.398178307', '(22,"Main2") - 0.398178307', '(86,"Main2") - 0.398178307', '(59,"Main2") - 0.398178307', '(85,"Main2") - 0.398178307', '(31,"Main2") - 0.398178307', '(14,"Main2") - 0.398178307', '(66,"Main2") - 0.398178307', '(20,"Main2") - 0.398178307', '(69,"Main2") - 0.398178307', '(13,"Main2") - 0.398178307', '(9,"Main2") - 0.398178307', '(19,"Main2") - 0.398178307', '(27,"Main2") - 0.398178307', '(1,"Main2") - 0.398178307', '(89,"Main2") - 0.398178307', '(60,"Main2") - 0.398178307', '(4,"Main2") - 0.398178307', '(84,"Main2") - 0.398178307', '(34,"Main2") - 0.398178307', '(38,"Main2") - 0.398178307', '(65,"Main2") - 0.398178307', '(58,"Main2") - 0.398178307', '(26,"Main2") - 0.398178307', '(75,"Main2") - 0.398178307', '(28,"Main2") - 0.398178307', '(67,"Main2") - 0.398178307', '(15,"Main2") - 0.398178307', '(36,"Main2") - 0.398178307', '(12,"Main2") - 0.398178307', '(39,"Main2") - 0.398178307', '(72,"Main2") - 0.398178307', '(10,"Main2") - 0.398178307', '(106,"Main2") - 0.398178307', '(24,"Main2") - 0.398178307', '(32,"Main2") - 0.398178307', '(6,"Main2") - 0.398178307', '(71,"Main2") - 0.398178307', '(37,"Main2") - 0.398178307', '(63,"Main2") - 0.398178307', '(114,"Main2") - 0.398178307', '(82,"Main2") - 0.398178307', '(40,"Main2") - 0.398178307', '(83,"Main2") - 0.398178307', '(64,"Main2") - 0.398178307', '(23,"Main2") - 0.398178307', '(88,"Main2") - 0.398178307', '(21,"Main2") - 0.398178307', '(61,"Main2") - 0.398178307', '(29,"Main2") - 0.398178307', '(8,"Main2") - 0.398178307', '(18,"Main2") - 0.398178307', '(93,"Main2") - 0.398178307', '(62,"Main2") - 0.398178307', '(70,"Main2") - 0.398178307', '(41,"Main2") - 0.398178307', '(16,"Main2") - 0.398178307', '(35,"Main2") - 0.398178307', '(33,"Main2") - 0.398178307', '(0,"Main2") - 0.398178307', '(7,"Main2") - 0.398178307', '(11,"Main2") - 0.398178307', '(102,"Main2") - 0.398178307']
Red Rules #: 35708
SMT Solving time: 0.078340994
Gen Solving time: 0.079664308
SMT Solver calls: 33
General Solver calls: 90
# nrpcs = []
# post call args = 6
# func args = 0
# timeouts = 0
# branches = 5
NRPC:
hpc_exp = [('CallForHPC', '84', '54', '64', '0', '10'), ('Main2', '74', '81', '109', '1', '4')]
calculate hpc converage
[('CallForHPC', 84, 54, 64, '0', '10'), ('Main2', 74, 81, 109, '1', '4')]
[('Main2', 74, 81, 109, '1', '4')]
[('1', '4')]
Last time is: 0.936005903
hpc reached = 74.3
g2 reached = 96
total = 118
% reached = 81.4
last time = 0.936005903
all_times = ['(92,"Main2") - 0.180112712', '(117,"Main2") - 0.180112712', '(116,"Main2") - 0.180112712', '(115,"Main2") - 0.180112712', '(112,"Main2") - 0.180112712', '(113,"Main2") - 0.180112712', '(110,"Main2") - 0.180112712', '(76,"Main2") - 0.180112712', '(90,"Main2") - 0.201018033', '(111,"Main2") - 0.201018033', '(108,"Main2") - 0.201018033', '(77,"Main2") - 0.201018033', '(107,"Main2") - 0.201018033', '(79,"Main2") - 0.201018033', '(91,"Main2") - 0.201018033', '(104,"Main2") - 0.201018033', '(81,"Main2") - 0.201018033', '(80,"Main2") - 0.201018033', '(109,"Main2") - 0.239229247', '(87,"Main2") - 0.239229247', '(5,"Main2") - 0.239229247', '(22,"Main2") - 0.239229247', '(86,"Main2") - 0.239229247', '(85,"Main2") - 0.239229247', '(14,"Main2") - 0.239229247', '(13,"Main2") - 0.239229247', '(9,"Main2") - 0.239229247', '(19,"Main2") - 0.239229247', '(89,"Main2") - 0.239229247', '(4,"Main2") - 0.239229247', '(75,"Main2") - 0.239229247', '(12,"Main2") - 0.239229247', '(10,"Main2") - 0.239229247', '(6,"Main2") - 0.239229247', '(37,"Main2") - 0.239229247', '(114,"Main2") - 0.239229247', '(82,"Main2") - 0.239229247', '(40,"Main2") - 0.239229247', '(23,"Main2") - 0.239229247', '(8,"Main2") - 0.239229247', '(7,"Main2") - 0.239229247', '(11,"Main2") - 0.239229247', '(17,"Main2") - 0.245346826', '(20,"Main2") - 0.245346826', '(15,"Main2") - 0.245346826', '(83,"Main2") - 0.245346826', '(16,"Main2") - 0.245346826', '(2,"Main2") - 0.296316028', '(3,"Main2") - 0.296316028', '(1,"Main2") - 0.296316028', '(84,"Main2") - 0.296316028', '(18,"Main2") - 0.296316028', '(0,"Main2") - 0.296316028', '(74,"Main2") - 0.309061304', '(68,"Main2") - 0.309061304', '(30,"Main2") - 0.309061304', '(25,"Main2") - 0.309061304', '(103,"Main2") - 0.309061304', '(59,"Main2") - 0.309061304', '(31,"Main2") - 0.309061304', '(66,"Main2") - 0.309061304', '(69,"Main2") - 0.309061304', '(27,"Main2") - 0.309061304', '(34,"Main2") - 0.309061304', '(26,"Main2") - 0.309061304', '(28,"Main2") - 0.309061304', '(67,"Main2") - 0.309061304', '(36,"Main2") - 0.309061304', '(39,"Main2") - 0.309061304', '(72,"Main2") - 0.309061304', '(106,"Main2") - 0.309061304', '(24,"Main2") - 0.309061304', '(32,"Main2") - 0.309061304', '(71,"Main2") - 0.309061304', '(88,"Main2") - 0.309061304', '(29,"Main2") - 0.309061304', '(93,"Main2") - 0.309061304', '(70,"Main2") - 0.309061304', '(35,"Main2") - 0.309061304', '(33,"Main2") - 0.309061304', '(102,"Main2") - 0.309061304', '(60,"Main2") - 0.358740257', '(65,"Main2") - 0.404940288', '(63,"Main2") - 0.404940288', '(64,"Main2") - 0.404940288', '(21,"Main2") - 0.404940288', '(61,"Main2") - 0.404940288', '(62,"Main2") - 0.404940288', '(73,"Main2") - 0.467534559', '(101,"Main2") - 0.467534559', '(105,"Main2") - 0.467534559', '(94,"Main2") - 0.467534559', '(38,"Main2") - 0.604233930', '(58,"Main2") - 0.604233930', '(41,"Main2") - 0.604233930', '(78,"Main2") - 0.936005903']
Red Rules #: 25156
SMT Solving time: 0.162336437
Gen Solving time: 0.165300432
SMT Solver calls: 79
General Solver calls: 193
# nrpcs = [0, 0, 1, 3, 0, 0, 1, 1, 1, 3, 2, 2, 7, 4, 9, 13, 5, 4, 4]
# post call args = 4
# func args = 15
# timeouts = 15
# branches = 5


Graph latex for: digits-of-e1: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(digits-of-e1)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.17, 8) (0.19, 10) (0.4, 73)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.18, 8) (0.2, 10) (0.24, 24) (0.25, 5) (0.3, 6) (0.31, 28) (0.36, 1) (0.4, 6) (0.47, 4) (0.6, 3) (0.94, 1)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


digits-of-e2
Baseline:
hpc_exp = [('CallForHPC', '95', '266', '280', '0', '74'), ('Main2', '98', '77', '78', '2', '2')]
calculate hpc converage
[('CallForHPC', 95, 266, 280, '0', '74'), ('Main2', 98, 77, 78, '2', '2')]
[('Main2', 98, 77, 78, '2', '2')]
[('2', '2')]
Last time is: 0.928225816
hpc reached = 98.7
g2 reached = 86
total = 87
% reached = 98.9
last time = 0.928225816
all_times = ['(48,"Main2") - 0.193144920', '(87,"Main2") - 0.193144920', '(86,"Main2") - 0.193144920', '(85,"Main2") - 0.193144920', '(50,"Main2") - 0.193144920', '(49,"Main2") - 0.193144920', '(47,"Main2") - 0.193144920', '(82,"Main2") - 0.193144920', '(83,"Main2") - 0.193144920', '(81,"Main2") - 0.193144920', '(73,"Main2") - 0.323810524', '(74,"Main2") - 0.323810524', '(68,"Main2") - 0.323810524', '(17,"Main2") - 0.323810524', '(22,"Main2") - 0.323810524', '(56,"Main2") - 0.323810524', '(55,"Main2") - 0.323810524', '(59,"Main2") - 0.323810524', '(14,"Main2") - 0.323810524', '(66,"Main2") - 0.323810524', '(20,"Main2") - 0.323810524', '(69,"Main2") - 0.323810524', '(53,"Main2") - 0.323810524', '(52,"Main2") - 0.323810524', '(46,"Main2") - 0.323810524', '(54,"Main2") - 0.323810524', '(19,"Main2") - 0.323810524', '(57,"Main2") - 0.323810524', '(27,"Main2") - 0.323810524', '(60,"Main2") - 0.323810524', '(84,"Main2") - 0.323810524', '(65,"Main2") - 0.323810524', '(58,"Main2") - 0.323810524', '(26,"Main2") - 0.323810524', '(75,"Main2") - 0.323810524', '(77,"Main2") - 0.323810524', '(67,"Main2") - 0.323810524', '(15,"Main2") - 0.323810524', '(78,"Main2") - 0.323810524', '(72,"Main2") - 0.323810524', '(79,"Main2") - 0.323810524', '(51,"Main2") - 0.323810524', '(24,"Main2") - 0.323810524', '(71,"Main2") - 0.323810524', '(63,"Main2") - 0.323810524', '(76,"Main2") - 0.323810524', '(64,"Main2") - 0.323810524', '(23,"Main2") - 0.323810524', '(21,"Main2") - 0.323810524', '(61,"Main2") - 0.323810524', '(18,"Main2") - 0.323810524', '(62,"Main2") - 0.323810524', '(70,"Main2") - 0.323810524', '(16,"Main2") - 0.323810524', '(33,"Main2") - 0.323810524', '(80,"Main2") - 0.323810524', '(2,"Main2") - 0.437629614', '(3,"Main2") - 0.437629614', '(25,"Main2") - 0.437629614', '(5,"Main2") - 0.437629614', '(9,"Main2") - 0.437629614', '(1,"Main2") - 0.437629614', '(4,"Main2") - 0.437629614', '(34,"Main2") - 0.437629614', '(38,"Main2") - 0.437629614', '(36,"Main2") - 0.437629614', '(39,"Main2") - 0.437629614', '(6,"Main2") - 0.437629614', '(37,"Main2") - 0.437629614', '(45,"Main2") - 0.437629614', '(8,"Main2") - 0.437629614', '(0,"Main2") - 0.437629614', '(7,"Main2") - 0.437629614', '(30,"Main2") - 0.541550755', '(13,"Main2") - 0.541550755', '(28,"Main2") - 0.541550755', '(12,"Main2") - 0.541550755', '(10,"Main2") - 0.541550755', '(32,"Main2") - 0.541550755', '(29,"Main2") - 0.541550755', '(11,"Main2") - 0.541550755', '(44,"Main2") - 0.928225816', '(42,"Main2") - 0.928225816', '(40,"Main2") - 0.928225816', '(41,"Main2") - 0.928225816', '(43,"Main2") - 0.928225816']
Red Rules #: 28224
SMT Solving time: 0.170564799
Gen Solving time: 0.173318592
SMT Solver calls: 72
General Solver calls: 110
# nrpcs = []
# post call args = 13
# func args = 0
# timeouts = 0
# branches = 4
NRPC:
hpc_exp = [('CallForHPC', '93', '122', '130', '0', '14'), ('Main2', '92', '72', '78', '2', '2')]
calculate hpc converage
[('CallForHPC', 93, 122, 130, '0', '14'), ('Main2', 92, 72, 78, '2', '2')]
[('Main2', 92, 72, 78, '2', '2')]
[('2', '2')]
Last time is: 0.873742691
hpc reached = 92.3
g2 reached = 81
total = 87
% reached = 93.1
last time = 0.873742691
all_times = ['(48,"Main2") - 0.193959972', '(87,"Main2") - 0.193959972', '(86,"Main2") - 0.193959972', '(85,"Main2") - 0.193959972', '(50,"Main2") - 0.193959972', '(49,"Main2") - 0.193959972', '(47,"Main2") - 0.193959972', '(82,"Main2") - 0.193959972', '(83,"Main2") - 0.193959972', '(81,"Main2") - 0.193959972', '(73,"Main2") - 0.275055612', '(74,"Main2") - 0.275055612', '(68,"Main2") - 0.275055612', '(56,"Main2") - 0.275055612', '(55,"Main2") - 0.275055612', '(66,"Main2") - 0.275055612', '(69,"Main2") - 0.275055612', '(53,"Main2") - 0.275055612', '(52,"Main2") - 0.275055612', '(46,"Main2") - 0.275055612', '(54,"Main2") - 0.275055612', '(19,"Main2") - 0.275055612', '(57,"Main2") - 0.275055612', '(60,"Main2") - 0.275055612', '(84,"Main2") - 0.275055612', '(65,"Main2") - 0.275055612', '(58,"Main2") - 0.275055612', '(26,"Main2") - 0.275055612', '(75,"Main2") - 0.275055612', '(77,"Main2") - 0.275055612', '(67,"Main2") - 0.275055612', '(78,"Main2") - 0.275055612', '(72,"Main2") - 0.275055612', '(79,"Main2") - 0.275055612', '(51,"Main2") - 0.275055612', '(71,"Main2") - 0.275055612', '(63,"Main2") - 0.275055612', '(76,"Main2") - 0.275055612', '(64,"Main2") - 0.275055612', '(23,"Main2") - 0.275055612', '(70,"Main2") - 0.275055612', '(80,"Main2") - 0.275055612', '(17,"Main2") - 0.294018673', '(59,"Main2") - 0.294018673', '(14,"Main2") - 0.294018673', '(15,"Main2") - 0.294018673', '(61,"Main2") - 0.294018673', '(18,"Main2") - 0.294018673', '(62,"Main2") - 0.294018673', '(16,"Main2") - 0.294018673', '(22,"Main2") - 0.317125670', '(20,"Main2") - 0.317125670', '(21,"Main2") - 0.317125670', '(27,"Main2") - 0.432467420', '(24,"Main2") - 0.432467420', '(32,"Main2") - 0.432467420', '(33,"Main2") - 0.432467420', '(2,"Main2") - 0.488771725', '(3,"Main2") - 0.488771725', '(25,"Main2") - 0.488771725', '(5,"Main2") - 0.488771725', '(9,"Main2") - 0.488771725', '(1,"Main2") - 0.488771725', '(4,"Main2") - 0.488771725', '(34,"Main2") - 0.488771725', '(38,"Main2") - 0.488771725', '(36,"Main2") - 0.488771725', '(39,"Main2") - 0.488771725', '(6,"Main2") - 0.488771725', '(37,"Main2") - 0.488771725', '(45,"Main2") - 0.488771725', '(8,"Main2") - 0.488771725', '(0,"Main2") - 0.488771725', '(7,"Main2") - 0.488771725', '(30,"Main2") - 0.873742691', '(13,"Main2") - 0.873742691', '(28,"Main2") - 0.873742691', '(12,"Main2") - 0.873742691', '(10,"Main2") - 0.873742691', '(29,"Main2") - 0.873742691', '(11,"Main2") - 0.873742691']
Red Rules #: 30175
SMT Solving time: 0.14617529
Gen Solving time: 0.148816316
SMT Solver calls: 64
General Solver calls: 197
# nrpcs = [0, 0, 0, 1, 0, 1, 3, 2, 3, 2, 8, 5]
# post call args = 5
# func args = 7
# timeouts = 0
# branches = 4


Graph latex for: digits-of-e2: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(digits-of-e2)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.19, 10) (0.32, 46) (0.44, 17) (0.54, 8) (0.93, 5)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.19, 10) (0.28, 32) (0.29, 8) (0.32, 3) (0.43, 4) (0.49, 17) (0.87, 7)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


exp3_8
Baseline:
hpc_exp = [('CallForHPC', '94', '49', '52', '0', '8'), ('Main2', '89', '42', '47', '1', '12')]
calculate hpc converage
[('CallForHPC', 94, 49, 52, '0', '8'), ('Main2', 89, 42, 47, '1', '12')]
[('Main2', 89, 42, 47, '1', '12')]
[('1', '12')]
Last time is: 0.953444773
hpc reached = 89.4
g2 reached = 50
total = 55
% reached = 90.9
last time = 0.953444773
all_times = ['(68,"Main2") - 0.201381179', '(25,"Main2") - 0.201381179', '(17,"Main2") - 0.201381179', '(22,"Main2") - 0.201381179', '(56,"Main2") - 0.201381179', '(20,"Main2") - 0.201381179', '(19,"Main2") - 0.201381179', '(57,"Main2") - 0.201381179', '(27,"Main2") - 0.201381179', '(1,"Main2") - 0.201381179', '(60,"Main2") - 0.201381179', '(58,"Main2") - 0.201381179', '(26,"Main2") - 0.201381179', '(28,"Main2") - 0.201381179', '(67,"Main2") - 0.201381179', '(15,"Main2") - 0.201381179', '(24,"Main2") - 0.201381179', '(6,"Main2") - 0.201381179', '(21,"Main2") - 0.201381179', '(61,"Main2") - 0.201381179', '(18,"Main2") - 0.201381179', '(16,"Main2") - 0.201381179', '(7,"Main2") - 0.201381179', '(0,"Main2") - 0.211363553', '(48,"Main2") - 0.384052063', '(59,"Main2") - 0.384052063', '(14,"Main2") - 0.384052063', '(66,"Main2") - 0.384052063', '(13,"Main2") - 0.384052063', '(53,"Main2") - 0.384052063', '(52,"Main2") - 0.384052063', '(9,"Main2") - 0.384052063', '(46,"Main2") - 0.384052063', '(54,"Main2") - 0.384052063', '(65,"Main2") - 0.384052063', '(50,"Main2") - 0.384052063', '(12,"Main2") - 0.384052063', '(51,"Main2") - 0.384052063', '(63,"Main2") - 0.384052063', '(64,"Main2") - 0.384052063', '(23,"Main2") - 0.384052063', '(8,"Main2") - 0.384052063', '(62,"Main2") - 0.384052063', '(41,"Main2") - 0.384052063', '(11,"Main2") - 0.384052063', '(44,"Main2") - 0.953444773', '(42,"Main2") - 0.953444773', '(49,"Main2") - 0.953444773', '(45,"Main2") - 0.953444773', '(43,"Main2") - 0.953444773']
Red Rules #: 39484
SMT Solving time: 0.068193352
Gen Solving time: 0.070564996
SMT Solver calls: 23
General Solver calls: 882
# nrpcs = []
# post call args = 5
# func args = 0
# timeouts = 0
# branches = 13
NRPC:
hpc_exp = [('CallForHPC', '90', '9', '10', '0', '0'), ('Main2', '38', '18', '47', '1', '12')]
calculate hpc converage
[('CallForHPC', 90, 9, 10, '0', '0'), ('Main2', 38, 18, 47, '1', '12')]
[('Main2', 38, 18, 47, '1', '12')]
[('1', '12')]
Last time is: 0.567965936
hpc reached = 38.3
g2 reached = 34
total = 55
% reached = 61.8
last time = 0.567965936
all_times = ['(2,"Main2") - 0.197038158', '(68,"Main2") - 0.197038158', '(25,"Main2") - 0.197038158', '(5,"Main2") - 0.197038158', '(22,"Main2") - 0.197038158', '(56,"Main2") - 0.197038158', '(59,"Main2") - 0.197038158', '(14,"Main2") - 0.197038158', '(66,"Main2") - 0.197038158', '(13,"Main2") - 0.197038158', '(9,"Main2") - 0.197038158', '(54,"Main2") - 0.197038158', '(57,"Main2") - 0.197038158', '(27,"Main2") - 0.197038158', '(1,"Main2") - 0.197038158', '(60,"Main2") - 0.197038158', '(4,"Main2") - 0.197038158', '(26,"Main2") - 0.197038158', '(28,"Main2") - 0.197038158', '(67,"Main2") - 0.197038158', '(15,"Main2") - 0.197038158', '(12,"Main2") - 0.197038158', '(24,"Main2") - 0.197038158', '(21,"Main2") - 0.197038158', '(7,"Main2") - 0.197038158', '(58,"Main2") - 0.534879970', '(61,"Main2") - 0.534879970', '(0,"Main2") - 0.543513826', '(17,"Main2") - 0.567965936', '(20,"Main2") - 0.567965936', '(19,"Main2") - 0.567965936', '(6,"Main2") - 0.567965936', '(18,"Main2") - 0.567965936', '(16,"Main2") - 0.567965936']
Red Rules #: 11125
SMT Solving time: 0.505611621
Gen Solving time: 0.511633253
SMT Solver calls: 349
General Solver calls: 713
# nrpcs = [3, 2, 1, 3, 2, 1, 0, 3, 3, 1, 0, 0, 1]
# post call args = 1
# func args = 12
# timeouts = 12
# branches = 13


Graph latex for: exp3_8: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(exp3_8)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 23) (0.21, 1) (0.38, 21) (0.95, 5)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.2, 25) (0.53, 2) (0.54, 1) (0.57, 6)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


gen_regexps
Baseline:
hpc_exp = [('CallForHPC', '89', '128', '143', '0', '0'), ('Main2', '47', '57', '120', '3', '8')]
calculate hpc converage
[('CallForHPC', 89, 128, 143, '0', '0'), ('Main2', 47, 57, 120, '3', '8')]
[('Main2', 47, 57, 120, '3', '8')]
[('3', '8')]
Last time is: 0.591827404
hpc reached = 47.5
g2 reached = 66
total = 128
% reached = 51.6
last time = 0.591827404
all_times = ['(1,"Main2") - 0.205711294', '(131,"Main2") - 0.205711294', '(132,"Main2") - 0.205711294', '(133,"Main2") - 0.205711294', '(134,"Main2") - 0.205711294', '(0,"Main2") - 0.205711294', '(11,"Main2") - 0.205711294', '(68,"Main2") - 0.258867168', '(3,"Main2") - 0.258867168', '(103,"Main2") - 0.258867168', '(69,"Main2") - 0.258867168', '(113,"Main2") - 0.258867168', '(122,"Main2") - 0.258867168', '(123,"Main2") - 0.258867168', '(4,"Main2") - 0.258867168', '(75,"Main2") - 0.258867168', '(79,"Main2") - 0.258867168', '(63,"Main2") - 0.258867168', '(76,"Main2") - 0.258867168', '(64,"Main2") - 0.258867168', '(62,"Main2") - 0.258867168', '(99,"Main2") - 0.258867168', '(73,"Main2") - 0.267851381', '(100,"Main2") - 0.267851381', '(74,"Main2") - 0.267851381', '(66,"Main2") - 0.267851381', '(65,"Main2") - 0.267851381', '(77,"Main2") - 0.267851381', '(67,"Main2") - 0.267851381', '(78,"Main2") - 0.267851381', '(61,"Main2") - 0.267851381', '(116,"Main2") - 0.297286966', '(109,"Main2") - 0.297286966', '(111,"Main2") - 0.297286966', '(115,"Main2") - 0.297286966', '(112,"Main2") - 0.297286966', '(108,"Main2") - 0.297286966', '(110,"Main2") - 0.297286966', '(50,"Main2") - 0.297286966', '(107,"Main2") - 0.297286966', '(72,"Main2") - 0.297286966', '(6,"Main2") - 0.297286966', '(71,"Main2") - 0.297286966', '(70,"Main2") - 0.297286966', '(7,"Main2") - 0.297286966', '(102,"Main2") - 0.297286966', '(2,"Main2") - 0.348075012', '(5,"Main2") - 0.348075012', '(20,"Main2") - 0.348075012', '(38,"Main2") - 0.348075012', '(36,"Main2") - 0.348075012', '(42,"Main2") - 0.348075012', '(24,"Main2") - 0.348075012', '(49,"Main2") - 0.348075012', '(114,"Main2") - 0.348075012', '(23,"Main2") - 0.348075012', '(21,"Main2") - 0.348075012', '(130,"Main2") - 0.348075012', '(44,"Main2") - 0.408684775', '(45,"Main2") - 0.408684775', '(14,"Main2") - 0.591827404', '(13,"Main2") - 0.591827404', '(9,"Main2") - 0.591827404', '(19,"Main2") - 0.591827404', '(10,"Main2") - 0.591827404', '(18,"Main2") - 0.591827404']
Red Rules #: 3150
SMT Solving time: 10.518785588
Gen Solving time: 10.521764569
SMT Solver calls: 79
General Solver calls: 94
# nrpcs = []
# post call args = 19
# func args = 0
# timeouts = 0
# branches = 11
NRPC:
hpc_exp = [('CallForHPC', '90', '136', '151', '0', '0'), ('Main2', '47', '57', '120', '3', '8')]
calculate hpc converage
[('CallForHPC', 90, 136, 151, '0', '0'), ('Main2', 47, 57, 120, '3', '8')]
[('Main2', 47, 57, 120, '3', '8')]
[('3', '8')]
Last time is: 0.567050600
hpc reached = 47.5
g2 reached = 66
total = 128
% reached = 51.6
last time = 0.567050600
all_times = ['(1,"Main2") - 0.207522884', '(131,"Main2") - 0.207522884', '(132,"Main2") - 0.207522884', '(133,"Main2") - 0.207522884', '(134,"Main2") - 0.207522884', '(0,"Main2") - 0.207522884', '(11,"Main2") - 0.207522884', '(68,"Main2") - 0.225896466', '(3,"Main2") - 0.225896466', '(103,"Main2") - 0.225896466', '(69,"Main2") - 0.225896466', '(113,"Main2") - 0.225896466', '(122,"Main2") - 0.225896466', '(123,"Main2") - 0.225896466', '(4,"Main2") - 0.225896466', '(75,"Main2") - 0.225896466', '(79,"Main2") - 0.225896466', '(63,"Main2") - 0.225896466', '(76,"Main2") - 0.225896466', '(64,"Main2") - 0.225896466', '(62,"Main2") - 0.225896466', '(99,"Main2") - 0.225896466', '(73,"Main2") - 0.233901358', '(100,"Main2") - 0.233901358', '(74,"Main2") - 0.233901358', '(66,"Main2") - 0.233901358', '(65,"Main2") - 0.233901358', '(77,"Main2") - 0.233901358', '(67,"Main2") - 0.233901358', '(78,"Main2") - 0.233901358', '(61,"Main2") - 0.233901358', '(116,"Main2") - 0.265350069', '(109,"Main2") - 0.265350069', '(111,"Main2") - 0.265350069', '(115,"Main2") - 0.265350069', '(112,"Main2") - 0.265350069', '(108,"Main2") - 0.265350069', '(110,"Main2") - 0.265350069', '(50,"Main2") - 0.265350069', '(107,"Main2") - 0.265350069', '(72,"Main2") - 0.265350069', '(6,"Main2") - 0.265350069', '(71,"Main2") - 0.265350069', '(70,"Main2") - 0.265350069', '(7,"Main2") - 0.265350069', '(102,"Main2") - 0.265350069', '(2,"Main2") - 0.318476328', '(5,"Main2") - 0.318476328', '(20,"Main2") - 0.318476328', '(38,"Main2") - 0.318476328', '(36,"Main2") - 0.318476328', '(42,"Main2") - 0.318476328', '(24,"Main2") - 0.318476328', '(49,"Main2") - 0.318476328', '(114,"Main2") - 0.318476328', '(23,"Main2") - 0.318476328', '(21,"Main2") - 0.318476328', '(130,"Main2") - 0.318476328', '(44,"Main2") - 0.374980401', '(45,"Main2") - 0.374980401', '(14,"Main2") - 0.567050600', '(13,"Main2") - 0.567050600', '(9,"Main2") - 0.567050600', '(19,"Main2") - 0.567050600', '(10,"Main2") - 0.567050600', '(18,"Main2") - 0.567050600']
Red Rules #: 3237
SMT Solving time: 10.498743091
Gen Solving time: 10.504011076
SMT Solver calls: 80
General Solver calls: 95
# nrpcs = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
# post call args = 19
# func args = 1
# timeouts = 0
# branches = 11


Graph latex for: gen_regexps: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(gen_regexps)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.21, 7) (0.26, 15) (0.27, 9) (0.3, 15) (0.35, 12) (0.41, 2) (0.59, 6)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.21, 7) (0.23, 24) (0.27, 15) (0.32, 12) (0.37, 2) (0.57, 6)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


integrate
Baseline:
hpc_exp = [('CallForHPC', '50', '6', '12', '0', '0'), ('Main2', '3', '5', '139', '0', '0')]
calculate hpc converage
[('CallForHPC', 50, 6, 12, '0', '0'), ('Main2', 3, 5, 139, '0', '0')]
[('Main2', 3, 5, 139, '0', '0')]
[('0', '0')]
Last time is: 0.212800771
hpc reached = 3.6
g2 reached = 7
total = 143
% reached = 4.9
last time = 0.212800771
all_times = ['(152,"Main2") - 0.212800771', '(141,"Main2") - 0.212800771', '(151,"Main2") - 0.212800771', '(150,"Main2") - 0.212800771', '(146,"Main2") - 0.212800771', '(147,"Main2") - 0.212800771', '(145,"Main2") - 0.212800771']
Red Rules #: 42932
SMT Solving time: 0.050855646
Gen Solving time: 0.051432919
SMT Solver calls: 17
General Solver calls: 36
# nrpcs = []
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 0
NRPC:
hpc_exp = [('CallForHPC', '96', '179', '186', '0', '12'), ('Main2', '69', '96', '139', '0', '0')]
calculate hpc converage
[('CallForHPC', 96, 179, 186, '0', '12'), ('Main2', 69, 96, 139, '0', '0')]
[('Main2', 69, 96, 139, '0', '0')]
[('0', '0')]
Last time is: 0.346880286
hpc reached = 69.1
g2 reached = 63
total = 143
% reached = 44.1
last time = 0.346880286
all_times = ['(152,"Main2") - 0.227821944', '(141,"Main2") - 0.227821944', '(151,"Main2") - 0.227821944', '(150,"Main2") - 0.227821944', '(146,"Main2") - 0.227821944', '(147,"Main2") - 0.227821944', '(145,"Main2") - 0.227821944', '(90,"Main2") - 0.260877116', '(2,"Main2") - 0.260877116', '(138,"Main2") - 0.260877116', '(109,"Main2") - 0.260877116', '(111,"Main2") - 0.260877116', '(103,"Main2") - 0.260877116', '(17,"Main2") - 0.260877116', '(101,"Main2") - 0.260877116', '(22,"Main2") - 0.260877116', '(139,"Main2") - 0.260877116', '(96,"Main2") - 0.260877116', '(112,"Main2") - 0.260877116', '(122,"Main2") - 0.260877116', '(140,"Main2") - 0.260877116', '(108,"Main2") - 0.260877116', '(123,"Main2") - 0.260877116', '(105,"Main2") - 0.260877116', '(27,"Main2") - 0.260877116', '(1,"Main2") - 0.260877116', '(137,"Main2") - 0.260877116', '(89,"Main2") - 0.260877116', '(148,"Main2") - 0.260877116', '(136,"Main2") - 0.260877116', '(94,"Main2") - 0.260877116', '(26,"Main2") - 0.260877116', '(131,"Main2") - 0.260877116', '(77,"Main2") - 0.260877116', '(28,"Main2") - 0.260877116', '(78,"Main2") - 0.260877116', '(107,"Main2") - 0.260877116', '(97,"Main2") - 0.260877116', '(106,"Main2") - 0.260877116', '(132,"Main2") - 0.260877116', '(24,"Main2") - 0.260877116', '(133,"Main2") - 0.260877116', '(142,"Main2") - 0.260877116', '(144,"Main2") - 0.260877116', '(134,"Main2") - 0.260877116', '(104,"Main2") - 0.260877116', '(130,"Main2") - 0.260877116', '(16,"Main2") - 0.260877116', '(99,"Main2") - 0.260877116', '(0,"Main2") - 0.260877116', '(80,"Main2") - 0.260877116', '(102,"Main2") - 0.260877116', '(117,"Main2") - 0.346880286', '(116,"Main2") - 0.346880286', '(120,"Main2") - 0.346880286', '(14,"Main2") - 0.346880286', '(13,"Main2") - 0.346880286', '(15,"Main2") - 0.346880286', '(12,"Main2") - 0.346880286', '(6,"Main2") - 0.346880286', '(121,"Main2") - 0.346880286', '(8,"Main2") - 0.346880286', '(7,"Main2") - 0.346880286']
Red Rules #: 31358
SMT Solving time: 0.07894529
Gen Solving time: 0.079483037
SMT Solver calls: 27
General Solver calls: 36
# nrpcs = [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
# post call args = 1
# func args = 12
# timeouts = 0
# branches = 0


Graph latex for: integrate: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(integrate)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.21, 7)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.23, 7) (0.26, 45) (0.35, 11)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


paraffins
Baseline:
hpc_exp = [('CallForHPC', '83', '59', '71', '0', '4'), ('Main2', '38', '100', '260', '6', '14')]
calculate hpc converage
[('CallForHPC', 83, 59, 71, '0', '4'), ('Main2', 38, 100, 260, '6', '14')]
[('Main2', 38, 100, 260, '6', '14')]
[('6', '14')]
Last time is: 0.870900818
hpc reached = 38.5
g2 reached = 109
total = 264
% reached = 41.3
last time = 0.870900818
all_times = ['(247,"Main2") - 0.528343699', '(244,"Main2") - 0.528343699', '(245,"Main2") - 0.528343699', '(255,"Main2") - 0.528343699', '(218,"Main2") - 0.528343699', '(211,"Main2") - 0.528343699', '(258,"Main2") - 0.528343699', '(260,"Main2") - 0.528343699', '(150,"Main2") - 0.528343699', '(239,"Main2") - 0.528343699', '(238,"Main2") - 0.528343699', '(237,"Main2") - 0.528343699', '(257,"Main2") - 0.528343699', '(225,"Main2") - 0.528343699', '(226,"Main2") - 0.528343699', '(217,"Main2") - 0.528343699', '(263,"Main2") - 0.528343699', '(227,"Main2") - 0.528343699', '(246,"Main2") - 0.528343699', '(142,"Main2") - 0.528343699', '(144,"Main2") - 0.528343699', '(252,"Main2") - 0.528343699', '(240,"Main2") - 0.528343699', '(212,"Main2") - 0.528343699', '(149,"Main2") - 0.528343699', '(261,"Main2") - 0.528343699', '(262,"Main2") - 0.528343699', '(254,"Main2") - 0.528343699', '(143,"Main2") - 0.528343699', '(210,"Main2") - 0.528343699', '(92,"Main2") - 0.570813123', '(100,"Main2") - 0.570813123', '(231,"Main2") - 0.570813123', '(119,"Main2") - 0.570813123', '(116,"Main2") - 0.570813123', '(124,"Main2") - 0.570813123', '(126,"Main2") - 0.570813123', '(109,"Main2") - 0.570813123', '(111,"Main2") - 0.570813123', '(103,"Main2") - 0.570813123', '(115,"Main2") - 0.570813123', '(219,"Main2") - 0.570813123', '(101,"Main2") - 0.570813123', '(223,"Main2") - 0.570813123', '(59,"Main2") - 0.570813123', '(96,"Main2") - 0.570813123', '(112,"Main2") - 0.570813123', '(230,"Main2") - 0.570813123', '(118,"Main2") - 0.570813123', '(113,"Main2") - 0.570813123', '(122,"Main2") - 0.570813123', '(108,"Main2") - 0.570813123', '(123,"Main2") - 0.570813123', '(54,"Main2") - 0.570813123', '(105,"Main2") - 0.570813123', '(60,"Main2") - 0.570813123', '(110,"Main2") - 0.570813123', '(94,"Main2") - 0.570813123', '(221,"Main2") - 0.570813123', '(58,"Main2") - 0.570813123', '(95,"Main2") - 0.570813123', '(222,"Main2") - 0.570813123', '(224,"Main2") - 0.570813123', '(97,"Main2") - 0.570813123', '(229,"Main2") - 0.570813123', '(106,"Main2") - 0.570813123', '(114,"Main2") - 0.570813123', '(228,"Main2") - 0.570813123', '(133,"Main2") - 0.570813123', '(134,"Main2") - 0.570813123', '(121,"Main2") - 0.570813123', '(104,"Main2") - 0.570813123', '(259,"Main2") - 0.570813123', '(125,"Main2") - 0.570813123', '(61,"Main2") - 0.570813123', '(236,"Main2") - 0.570813123', '(135,"Main2") - 0.570813123', '(93,"Main2") - 0.570813123', '(62,"Main2") - 0.570813123', '(220,"Main2") - 0.570813123', '(102,"Main2") - 0.570813123', '(56,"Main2") - 0.801658306', '(55,"Main2") - 0.801658306', '(57,"Main2") - 0.801658306', '(107,"Main2") - 0.801658306', '(74,"Main2") - 0.870900818', '(87,"Main2") - 0.870900818', '(129,"Main2") - 0.870900818', '(69,"Main2") - 0.870900818', '(53,"Main2") - 0.870900818', '(52,"Main2") - 0.870900818', '(128,"Main2") - 0.870900818', '(65,"Main2") - 0.870900818', '(75,"Main2") - 0.870900818', '(50,"Main2") - 0.870900818', '(77,"Main2") - 0.870900818', '(67,"Main2") - 0.870900818', '(78,"Main2") - 0.870900818', '(51,"Main2") - 0.870900818', '(49,"Main2") - 0.870900818', '(47,"Main2") - 0.870900818', '(63,"Main2") - 0.870900818', '(76,"Main2") - 0.870900818', '(82,"Main2") - 0.870900818', '(83,"Main2") - 0.870900818', '(64,"Main2") - 0.870900818', '(70,"Main2") - 0.870900818', '(99,"Main2") - 0.870900818', '(80,"Main2") - 0.870900818']
Red Rules #: 23958
SMT Solving time: 0.128779897
Gen Solving time: 0.130393517
SMT Solver calls: 64
General Solver calls: 88
# nrpcs = []
# post call args = 6
# func args = 0
# timeouts = 1
# branches = 20
NRPC:
hpc_exp = [('CallForHPC', '88', '39', '44', '0', '2'), ('Main2', '71', '185', '260', '6', '14')]
calculate hpc converage
[('CallForHPC', 88, 39, 44, '0', '2'), ('Main2', 71, 185, 260, '6', '14')]
[('Main2', 71, 185, 260, '6', '14')]
[('6', '14')]
Last time is: 0.963561915
hpc reached = 71.2
g2 reached = 85
total = 264
% reached = 32.2
last time = 0.963561915
all_times = ['(92,"Main2") - 0.849734049', '(100,"Main2") - 0.849734049', '(231,"Main2") - 0.849734049', '(119,"Main2") - 0.849734049', '(116,"Main2") - 0.849734049', '(124,"Main2") - 0.849734049', '(126,"Main2") - 0.849734049', '(109,"Main2") - 0.849734049', '(111,"Main2") - 0.849734049', '(103,"Main2") - 0.849734049', '(115,"Main2") - 0.849734049', '(219,"Main2") - 0.849734049', '(101,"Main2") - 0.849734049', '(223,"Main2") - 0.849734049', '(96,"Main2") - 0.849734049', '(112,"Main2") - 0.849734049', '(230,"Main2") - 0.849734049', '(118,"Main2") - 0.849734049', '(113,"Main2") - 0.849734049', '(260,"Main2") - 0.849734049', '(122,"Main2") - 0.849734049', '(108,"Main2") - 0.849734049', '(123,"Main2") - 0.849734049', '(54,"Main2") - 0.849734049', '(105,"Main2") - 0.849734049', '(239,"Main2") - 0.849734049', '(110,"Main2") - 0.849734049', '(238,"Main2") - 0.849734049', '(94,"Main2") - 0.849734049', '(221,"Main2") - 0.849734049', '(58,"Main2") - 0.849734049', '(95,"Main2") - 0.849734049', '(237,"Main2") - 0.849734049', '(225,"Main2") - 0.849734049', '(222,"Main2") - 0.849734049', '(224,"Main2") - 0.849734049', '(226,"Main2") - 0.849734049', '(97,"Main2") - 0.849734049', '(263,"Main2") - 0.849734049', '(229,"Main2") - 0.849734049', '(227,"Main2") - 0.849734049', '(114,"Main2") - 0.849734049', '(228,"Main2") - 0.849734049', '(133,"Main2") - 0.849734049', '(134,"Main2") - 0.849734049', '(121,"Main2") - 0.849734049', '(104,"Main2") - 0.849734049', '(259,"Main2") - 0.849734049', '(125,"Main2") - 0.849734049', '(236,"Main2") - 0.849734049', '(240,"Main2") - 0.849734049', '(135,"Main2") - 0.849734049', '(93,"Main2") - 0.849734049', '(261,"Main2") - 0.849734049', '(262,"Main2") - 0.849734049', '(220,"Main2") - 0.849734049', '(102,"Main2") - 0.849734049', '(56,"Main2") - 0.859810994', '(55,"Main2") - 0.859810994', '(57,"Main2") - 0.859810994', '(107,"Main2") - 0.859810994', '(247,"Main2") - 0.919699722', '(244,"Main2") - 0.919699722', '(245,"Main2") - 0.919699722', '(255,"Main2") - 0.919699722', '(218,"Main2") - 0.919699722', '(211,"Main2") - 0.919699722', '(258,"Main2") - 0.919699722', '(150,"Main2") - 0.919699722', '(257,"Main2") - 0.919699722', '(217,"Main2") - 0.919699722', '(246,"Main2") - 0.919699722', '(142,"Main2") - 0.919699722', '(144,"Main2") - 0.919699722', '(252,"Main2") - 0.919699722', '(212,"Main2") - 0.919699722', '(149,"Main2") - 0.919699722', '(254,"Main2") - 0.919699722', '(143,"Main2") - 0.919699722', '(210,"Main2") - 0.919699722', '(59,"Main2") - 0.963561915', '(60,"Main2") - 0.963561915', '(106,"Main2") - 0.963561915', '(61,"Main2") - 0.963561915', '(62,"Main2") - 0.963561915']
Red Rules #: 12766
SMT Solving time: 0.057906774
Gen Solving time: 0.058564407
SMT Solver calls: 29
General Solver calls: 38
# nrpcs = [0, 1, 0, 1, 1]
# post call args = 3
# func args = 2
# timeouts = 1
# branches = 20


Graph latex for: paraffins: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(paraffins)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.53, 30) (0.57, 51) (0.8, 4) (0.87, 24)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.85, 57) (0.86, 4) (0.92, 19) (0.96, 5)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


primes
Baseline:
hpc_exp = [('CallForHPC', '85', '79', '92', '0', '12'), ('Main2', '100', '25', '25', '0', '0')]
calculate hpc converage
[('CallForHPC', 85, 79, 92, '0', '12'), ('Main2', 100, 25, 25, '0', '0')]
[('Main2', 100, 25, 25, '0', '0')]
[('0', '0')]
Last time is: 0.304576782
hpc reached = 100.0
g2 reached = 29
total = 29
% reached = 100.0
last time = 0.304576782
all_times = ['(17,"Main2") - 0.200776028', '(22,"Main2") - 0.200776028', '(20,"Main2") - 0.200776028', '(19,"Main2") - 0.200776028', '(27,"Main2") - 0.200776028', '(26,"Main2") - 0.200776028', '(28,"Main2") - 0.200776028', '(15,"Main2") - 0.200776028', '(24,"Main2") - 0.200776028', '(23,"Main2") - 0.200776028', '(21,"Main2") - 0.200776028', '(18,"Main2") - 0.200776028', '(16,"Main2") - 0.200776028', '(11,"Main2") - 0.200776028', '(25,"Main2") - 0.223140411', '(14,"Main2") - 0.223140411', '(12,"Main2") - 0.223140411', '(13,"Main2") - 0.239420247', '(10,"Main2") - 0.239420247', '(2,"Main2") - 0.304576782', '(3,"Main2") - 0.304576782', '(5,"Main2") - 0.304576782', '(9,"Main2") - 0.304576782', '(1,"Main2") - 0.304576782', '(4,"Main2") - 0.304576782', '(6,"Main2") - 0.304576782', '(8,"Main2") - 0.304576782', '(0,"Main2") - 0.304576782', '(7,"Main2") - 0.304576782']
Red Rules #: 3449
SMT Solving time: 0.086809943
Gen Solving time: 0.087587493
SMT Solver calls: 36
General Solver calls: 51
# nrpcs = []
# post call args = 10
# func args = 0
# timeouts = 0
# branches = 0
NRPC:
hpc_exp = [('CallForHPC', '88', '121', '136', '0', '16'), ('Main2', '100', '25', '25', '0', '0')]
calculate hpc converage
[('CallForHPC', 88, 121, 136, '0', '16'), ('Main2', 100, 25, 25, '0', '0')]
[('Main2', 100, 25, 25, '0', '0')]
[('0', '0')]
Last time is: 0.320922666
hpc reached = 100.0
g2 reached = 29
total = 29
% reached = 100.0
last time = 0.320922666
all_times = ['(17,"Main2") - 0.202814671', '(22,"Main2") - 0.202814671', '(20,"Main2") - 0.202814671', '(19,"Main2") - 0.202814671', '(27,"Main2") - 0.202814671', '(26,"Main2") - 0.202814671', '(28,"Main2") - 0.202814671', '(15,"Main2") - 0.202814671', '(24,"Main2") - 0.202814671', '(23,"Main2") - 0.202814671', '(21,"Main2") - 0.202814671', '(18,"Main2") - 0.202814671', '(16,"Main2") - 0.202814671', '(11,"Main2") - 0.202814671', '(25,"Main2") - 0.225864491', '(14,"Main2") - 0.225864491', '(12,"Main2") - 0.225864491', '(13,"Main2") - 0.245081193', '(10,"Main2") - 0.245081193', '(2,"Main2") - 0.320922666', '(3,"Main2") - 0.320922666', '(5,"Main2") - 0.320922666', '(9,"Main2") - 0.320922666', '(1,"Main2") - 0.320922666', '(4,"Main2") - 0.320922666', '(6,"Main2") - 0.320922666', '(8,"Main2") - 0.320922666', '(0,"Main2") - 0.320922666', '(7,"Main2") - 0.320922666']
Red Rules #: 3300
SMT Solving time: 0.091334673
Gen Solving time: 0.092138702
SMT Solver calls: 41
General Solver calls: 47
# nrpcs = [0, 0, 1, 1, 0, 0, 1, 1, 2, 0, 1, 0, 0]
# post call args = 8
# func args = 5
# timeouts = 0
# branches = 0


Graph latex for: primes: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(primes)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 14) (0.22, 3) (0.24, 2) (0.3, 10)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.2, 14) (0.23, 3) (0.25, 2) (0.32, 10)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


queens
Baseline:
hpc_exp = [('CallForHPC', '70', '17', '24', '0', '0'), ('Main2', '28', '25', '89', '1', '5')]
calculate hpc converage
[('CallForHPC', 70, 17, 24, '0', '0'), ('Main2', 28, 25, 89, '1', '5')]
[('Main2', 28, 25, 89, '1', '5')]
[('1', '5')]
Last time is: 0.945669667
hpc reached = 28.1
g2 reached = 31
total = 95
% reached = 32.6
last time = 0.945669667
all_times = ['(92,"Main2") - 0.168269717', '(90,"Main2") - 0.168269717', '(86,"Main2") - 0.168269717', '(66,"Main2") - 0.168269717', '(89,"Main2") - 0.168269717', '(65,"Main2") - 0.168269717', '(94,"Main2") - 0.168269717', '(88,"Main2") - 0.168269717', '(93,"Main2") - 0.168269717', '(73,"Main2") - 0.197079422', '(74,"Main2") - 0.197079422', '(68,"Main2") - 0.197079422', '(85,"Main2") - 0.197079422', '(69,"Main2") - 0.197079422', '(84,"Main2") - 0.197079422', '(78,"Main2") - 0.197079422', '(72,"Main2") - 0.197079422', '(79,"Main2") - 0.197079422', '(71,"Main2") - 0.197079422', '(82,"Main2") - 0.197079422', '(83,"Main2") - 0.197079422', '(64,"Main2") - 0.197079422', '(81,"Main2") - 0.197079422', '(70,"Main2") - 0.197079422', '(0,"Main2") - 0.197079422', '(87,"Main2") - 0.945669667', '(75,"Main2") - 0.945669667', '(63,"Main2") - 0.945669667', '(91,"Main2") - 0.945669667', '(80,"Main2") - 0.945669667', '(43,"Main2") - 0.945669667']
Red Rules #: 18880
SMT Solving time: 0.357347888
Gen Solving time: 0.362532163
SMT Solver calls: 181
General Solver calls: 252
# nrpcs = []
# post call args = 3
# func args = 0
# timeouts = 0
# branches = 6
NRPC:
hpc_exp = [('CallForHPC', '94', '426', '453', '0', '72'), ('Main2', '73', '65', '89', '1', '5')]
calculate hpc converage
[('CallForHPC', 94, 426, 453, '0', '72'), ('Main2', 73, 65, 89, '1', '5')]
[('Main2', 73, 65, 89, '1', '5')]
[('1', '5')]
Last time is: 0.989337649
hpc reached = 73.0
g2 reached = 71
total = 95
% reached = 74.7
last time = 0.989337649
all_times = ['(92,"Main2") - 0.175141546', '(90,"Main2") - 0.175141546', '(86,"Main2") - 0.175141546', '(66,"Main2") - 0.175141546', '(89,"Main2") - 0.175141546', '(65,"Main2") - 0.175141546', '(94,"Main2") - 0.175141546', '(88,"Main2") - 0.175141546', '(93,"Main2") - 0.175141546', '(73,"Main2") - 0.204382041', '(74,"Main2") - 0.204382041', '(68,"Main2") - 0.204382041', '(85,"Main2") - 0.204382041', '(69,"Main2") - 0.204382041', '(84,"Main2") - 0.204382041', '(78,"Main2") - 0.204382041', '(72,"Main2") - 0.204382041', '(79,"Main2") - 0.204382041', '(71,"Main2") - 0.204382041', '(82,"Main2") - 0.204382041', '(83,"Main2") - 0.204382041', '(64,"Main2") - 0.204382041', '(81,"Main2") - 0.204382041', '(70,"Main2") - 0.204382041', '(0,"Main2") - 0.204382041', '(87,"Main2") - 0.249286200', '(75,"Main2") - 0.249286200', '(63,"Main2") - 0.249286200', '(91,"Main2") - 0.249286200', '(80,"Main2") - 0.249286200', '(43,"Main2") - 0.249286200', '(76,"Main2") - 0.257331268', '(41,"Main2") - 0.257331268', '(42,"Main2") - 0.265714892', '(48,"Main2") - 0.289546002', '(59,"Main2") - 0.289546002', '(44,"Main2") - 0.289546002', '(53,"Main2") - 0.289546002', '(52,"Main2") - 0.289546002', '(46,"Main2") - 0.289546002', '(60,"Main2") - 0.289546002', '(50,"Main2") - 0.289546002', '(77,"Main2") - 0.289546002', '(51,"Main2") - 0.289546002', '(49,"Main2") - 0.289546002', '(47,"Main2") - 0.289546002', '(45,"Main2") - 0.289546002', '(61,"Main2") - 0.289546002', '(62,"Main2") - 0.289546002', '(67,"Main2") - 0.737533155', '(3,"Main2") - 0.969192117', '(17,"Main2") - 0.969192117', '(5,"Main2") - 0.969192117', '(13,"Main2") - 0.969192117', '(9,"Main2") - 0.969192117', '(4,"Main2") - 0.969192117', '(38,"Main2") - 0.969192117', '(12,"Main2") - 0.969192117', '(39,"Main2") - 0.969192117', '(10,"Main2") - 0.969192117', '(6,"Main2") - 0.969192117', '(37,"Main2") - 0.969192117', '(40,"Main2") - 0.969192117', '(8,"Main2") - 0.969192117', '(16,"Main2") - 0.969192117', '(7,"Main2") - 0.969192117', '(11,"Main2") - 0.969192117', '(14,"Main2") - 0.978786296', '(1,"Main2") - 0.978786296', '(2,"Main2") - 0.989337649', '(15,"Main2") - 0.989337649']
Red Rules #: 15861
SMT Solving time: 0.385014396
Gen Solving time: 0.3903928
SMT Solver calls: 290
General Solver calls: 364
# nrpcs = [0, 0, 1, 3, 2, 3, 2, 1, 1, 1, 12, 10, 12, 7, 0, 0, 0, 0, 1, 1, 10, 10, 2, 3, 3, 1]
# post call args = 8
# func args = 18
# timeouts = 0
# branches = 6


Graph latex for: queens: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(queens)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.17, 9) (0.2, 16) (0.95, 6)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.18, 9) (0.2, 16) (0.25, 6) (0.26, 2) (0.27, 1) (0.29, 15) (0.74, 1) (0.97, 17) (0.98, 2) (0.99, 2)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


rfib
Baseline:
hpc_exp = [('CallForHPC', '87', '76', '87', '0', '10'), ('Main2', '95', '20', '21', '1', '2')]
calculate hpc converage
[('CallForHPC', 87, 76, 87, '0', '10'), ('Main2', 95, 20, 21, '1', '2')]
[('Main2', 95, 20, 21, '1', '2')]
[('1', '2')]
Last time is: 0.858183744
hpc reached = 95.2
g2 reached = 24
total = 25
% reached = 96.0
last time = 0.858183744
all_times = ['(3,"Main2") - 0.194997187', '(17,"Main2") - 0.194997187', '(22,"Main2") - 0.194997187', '(20,"Main2") - 0.194997187', '(19,"Main2") - 0.194997187', '(1,"Main2") - 0.194997187', '(4,"Main2") - 0.194997187', '(24,"Main2") - 0.194997187', '(23,"Main2") - 0.194997187', '(21,"Main2") - 0.194997187', '(18,"Main2") - 0.194997187', '(16,"Main2") - 0.194997187', '(0,"Main2") - 0.194997187', '(2,"Main2") - 0.242846413', '(5,"Main2") - 0.242846413', '(14,"Main2") - 0.242846413', '(13,"Main2") - 0.242846413', '(15,"Main2") - 0.242846413', '(12,"Main2") - 0.242846413', '(9,"Main2") - 0.444079276', '(10,"Main2") - 0.444079276', '(8,"Main2") - 0.444079276', '(7,"Main2") - 0.444079276', '(6,"Main2") - 0.858183744']
Red Rules #: 1290
SMT Solving time: 0.945197516
Gen Solving time: 0.94575541
SMT Solver calls: 22
General Solver calls: 26
# nrpcs = []
# post call args = 6
# func args = 0
# timeouts = 0
# branches = 3
NRPC:
hpc_exp = [('CallForHPC', '92', '83', '90', '0', '6'), ('Main2', '95', '20', '21', '1', '2')]
calculate hpc converage
[('CallForHPC', 92, 83, 90, '0', '6'), ('Main2', 95, 20, 21, '1', '2')]
[('Main2', 95, 20, 21, '1', '2')]
[('1', '2')]
Last time is: 0.794401464
hpc reached = 95.2
g2 reached = 24
total = 25
% reached = 96.0
last time = 0.794401464
all_times = ['(3,"Main2") - 0.479874030', '(17,"Main2") - 0.479874030', '(22,"Main2") - 0.479874030', '(20,"Main2") - 0.479874030', '(19,"Main2") - 0.479874030', '(1,"Main2") - 0.479874030', '(4,"Main2") - 0.479874030', '(24,"Main2") - 0.479874030', '(23,"Main2") - 0.479874030', '(21,"Main2") - 0.479874030', '(18,"Main2") - 0.479874030', '(16,"Main2") - 0.479874030', '(0,"Main2") - 0.479874030', '(2,"Main2") - 0.538883124', '(5,"Main2") - 0.538883124', '(9,"Main2") - 0.538883124', '(10,"Main2") - 0.538883124', '(8,"Main2") - 0.538883124', '(7,"Main2") - 0.538883124', '(14,"Main2") - 0.595577807', '(13,"Main2") - 0.595577807', '(15,"Main2") - 0.595577807', '(12,"Main2") - 0.595577807', '(11,"Main2") - 0.794401464']
Red Rules #: 1025
SMT Solving time: 0.582019821
Gen Solving time: 0.582487326
SMT Solver calls: 20
General Solver calls: 22
# nrpcs = [2, 0, 1, 0, 0, 1, 2]
# post call args = 2
# func args = 5
# timeouts = 0
# branches = 3


Graph latex for: rfib: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(rfib)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.19, 13) (0.24, 6) (0.44, 4) (0.86, 1)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.48, 13) (0.54, 6) (0.6, 4) (0.79, 1)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


tak
Baseline:
hpc_exp = [('CallForHPC', '90', '258', '285', '0', '56'), ('Main2', '37', '14', '37', '1', '2')]
calculate hpc converage
[('CallForHPC', 90, 258, 285, '0', '56'), ('Main2', 37, 14, 37, '1', '2')]
[('Main2', 37, 14, 37, '1', '2')]
[('1', '2')]
Last time is: 0.173625570
hpc reached = 37.8
g2 reached = 17
total = 41
% reached = 41.5
last time = 0.173625570
all_times = ['(2,"Main2") - 0.158284732', '(5,"Main2") - 0.158284732', '(9,"Main2") - 0.158284732', '(1,"Main2") - 0.158284732', '(4,"Main2") - 0.158284732', '(34,"Main2") - 0.158284732', '(38,"Main2") - 0.158284732', '(36,"Main2") - 0.158284732', '(39,"Main2") - 0.158284732', '(6,"Main2") - 0.158284732', '(37,"Main2") - 0.158284732', '(40,"Main2") - 0.158284732', '(8,"Main2") - 0.158284732', '(35,"Main2") - 0.158284732', '(33,"Main2") - 0.158284732', '(3,"Main2") - 0.173625570', '(0,"Main2") - 0.173625570']
Red Rules #: 10088
SMT Solving time: 0.569655235
Gen Solving time: 0.578806732
SMT Solver calls: 350
General Solver calls: 490
# nrpcs = []
# post call args = 10
# func args = 0
# timeouts = 0
# branches = 3
NRPC:
hpc_exp = [('CallForHPC', '91', '22', '24', '0', '4'), ('Main2', '32', '12', '37', '1', '2')]
calculate hpc converage
[('CallForHPC', 91, 22, 24, '0', '4'), ('Main2', 32, 12, 37, '1', '2')]
[('Main2', 32, 12, 37, '1', '2')]
[('1', '2')]
Last time is: 0.590596133
hpc reached = 32.4
g2 reached = 34
total = 41
% reached = 82.9
last time = 0.590596133
all_times = ['(2,"Main2") - 0.154799921', '(34,"Main2") - 0.154799921', '(39,"Main2") - 0.154799921', '(40,"Main2") - 0.154799921', '(8,"Main2") - 0.154799921', '(35,"Main2") - 0.154799921', '(33,"Main2") - 0.154799921', '(36,"Main2") - 0.156585626', '(0,"Main2") - 0.156585626', '(1,"Main2") - 0.156942408', '(37,"Main2") - 0.156942408', '(5,"Main2") - 0.174995678', '(10,"Main2") - 0.174995678', '(32,"Main2") - 0.174995678', '(7,"Main2") - 0.174995678', '(9,"Main2") - 0.199421516', '(4,"Main2") - 0.199421516', '(38,"Main2") - 0.199421516', '(6,"Main2") - 0.199421516', '(3,"Main2") - 0.213705446', '(17,"Main2") - 0.451891621', '(14,"Main2") - 0.451891621', '(13,"Main2") - 0.451891621', '(15,"Main2") - 0.451891621', '(12,"Main2") - 0.451891621', '(16,"Main2") - 0.451891621', '(11,"Main2") - 0.451891621', '(22,"Main2") - 0.590596133', '(20,"Main2") - 0.590596133', '(19,"Main2") - 0.590596133', '(24,"Main2") - 0.590596133', '(23,"Main2") - 0.590596133', '(21,"Main2") - 0.590596133', '(18,"Main2") - 0.590596133']
Red Rules #: 10779
SMT Solving time: 0.518034584
Gen Solving time: 0.52498175
SMT Solver calls: 332
General Solver calls: 495
# nrpcs = [0, 1, 0, 1, 2, 5, 2, 5, 5, 6, 7, 2]
# post call args = 1
# func args = 11
# timeouts = 11
# branches = 3


Graph latex for: tak: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(tak)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.16, 15) (0.17, 2)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.15, 7) (0.16, 4) (0.17, 4) (0.2, 4) (0.21, 1) (0.45, 7) (0.59, 7)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


wheel-sieve1
Baseline:
hpc_exp = [('CallForHPC', '80', '309', '386', '0', '70'), ('Main2', '76', '87', '114', '3', '2')]
calculate hpc converage
[('CallForHPC', 80, 309, 386, '0', '70'), ('Main2', 76, 87, 114, '3', '2')]
[('Main2', 76, 87, 114, '3', '2')]
[('3', '2')]
Last time is: 0.840286791
hpc reached = 76.3
g2 reached = 100
total = 131
% reached = 76.3
last time = 0.840286791
all_times = ['(73,"Main2") - 0.230960855', '(92,"Main2") - 0.230960855', '(100,"Main2") - 0.230960855', '(90,"Main2") - 0.230960855', '(117,"Main2") - 0.230960855', '(74,"Main2") - 0.230960855', '(116,"Main2") - 0.230960855', '(68,"Main2") - 0.230960855', '(124,"Main2") - 0.230960855', '(30,"Main2") - 0.230960855', '(126,"Main2") - 0.230960855', '(87,"Main2") - 0.230960855', '(111,"Main2") - 0.230960855', '(103,"Main2") - 0.230960855', '(86,"Main2") - 0.230960855', '(120,"Main2") - 0.230960855', '(85,"Main2") - 0.230960855', '(31,"Main2") - 0.230960855', '(129,"Main2") - 0.230960855', '(96,"Main2") - 0.230960855', '(112,"Main2") - 0.230960855', '(69,"Main2") - 0.230960855', '(113,"Main2") - 0.230960855', '(122,"Main2") - 0.230960855', '(123,"Main2") - 0.230960855', '(128,"Main2") - 0.230960855', '(105,"Main2") - 0.230960855', '(89,"Main2") - 0.230960855', '(84,"Main2") - 0.230960855', '(38,"Main2") - 0.230960855', '(65,"Main2") - 0.230960855', '(94,"Main2") - 0.230960855', '(95,"Main2") - 0.230960855', '(75,"Main2") - 0.230960855', '(77,"Main2") - 0.230960855', '(67,"Main2") - 0.230960855', '(78,"Main2") - 0.230960855', '(39,"Main2") - 0.230960855', '(79,"Main2") - 0.230960855', '(97,"Main2") - 0.230960855', '(32,"Main2") - 0.230960855', '(37,"Main2") - 0.230960855', '(63,"Main2") - 0.230960855', '(114,"Main2") - 0.230960855', '(76,"Main2") - 0.230960855', '(91,"Main2") - 0.230960855', '(98,"Main2") - 0.230960855', '(82,"Main2") - 0.230960855', '(40,"Main2") - 0.230960855', '(83,"Main2") - 0.230960855', '(64,"Main2") - 0.230960855', '(121,"Main2") - 0.230960855', '(104,"Main2") - 0.230960855', '(127,"Main2") - 0.230960855', '(125,"Main2") - 0.230960855', '(88,"Main2") - 0.230960855', '(29,"Main2") - 0.230960855', '(130,"Main2") - 0.230960855', '(81,"Main2") - 0.230960855', '(93,"Main2") - 0.230960855', '(41,"Main2") - 0.230960855', '(80,"Main2") - 0.230960855', '(102,"Main2") - 0.230960855', '(115,"Main2") - 0.263493175', '(34,"Main2") - 0.263493175', '(36,"Main2") - 0.263493175', '(35,"Main2") - 0.263493175', '(27,"Main2") - 0.274532052', '(28,"Main2") - 0.274532052', '(33,"Main2") - 0.274532052', '(25,"Main2") - 0.286723265', '(24,"Main2") - 0.286723265', '(23,"Main2") - 0.286723265', '(2,"Main2") - 0.313335037', '(3,"Main2") - 0.313335037', '(17,"Main2") - 0.313335037', '(5,"Main2") - 0.313335037', '(22,"Main2") - 0.313335037', '(14,"Main2") - 0.313335037', '(13,"Main2") - 0.313335037', '(9,"Main2") - 0.313335037', '(19,"Main2") - 0.313335037', '(1,"Main2") - 0.313335037', '(4,"Main2") - 0.313335037', '(26,"Main2") - 0.313335037', '(15,"Main2") - 0.313335037', '(12,"Main2") - 0.313335037', '(10,"Main2") - 0.313335037', '(6,"Main2") - 0.313335037', '(21,"Main2") - 0.313335037', '(8,"Main2") - 0.313335037', '(16,"Main2") - 0.313335037', '(0,"Main2") - 0.313335037', '(7,"Main2") - 0.313335037', '(11,"Main2") - 0.313335037', '(20,"Main2") - 0.326252283', '(18,"Main2") - 0.344157845', '(110,"Main2") - 0.840286791', '(107,"Main2") - 0.840286791', '(106,"Main2") - 0.840286791']
Red Rules #: 22128
SMT Solving time: 0.258148868
Gen Solving time: 0.261108933
SMT Solver calls: 82
General Solver calls: 213
# nrpcs = []
# post call args = 22
# func args = 0
# timeouts = 0
# branches = 5
NRPC:
hpc_exp = [('CallForHPC', '90', '273', '303', '0', '40'), ('Main2', '73', '84', '114', '3', '2')]
calculate hpc converage
[('CallForHPC', 90, 273, 303, '0', '40'), ('Main2', 73, 84, 114, '3', '2')]
[('Main2', 73, 84, 114, '3', '2')]
[('3', '2')]
Last time is: 0.727102315
hpc reached = 73.7
g2 reached = 102
total = 131
% reached = 77.9
last time = 0.727102315
all_times = ['(73,"Main2") - 0.240570080', '(92,"Main2") - 0.240570080', '(100,"Main2") - 0.240570080', '(90,"Main2") - 0.240570080', '(117,"Main2") - 0.240570080', '(74,"Main2") - 0.240570080', '(116,"Main2") - 0.240570080', '(68,"Main2") - 0.240570080', '(124,"Main2") - 0.240570080', '(30,"Main2") - 0.240570080', '(126,"Main2") - 0.240570080', '(87,"Main2") - 0.240570080', '(111,"Main2") - 0.240570080', '(103,"Main2") - 0.240570080', '(86,"Main2") - 0.240570080', '(120,"Main2") - 0.240570080', '(85,"Main2") - 0.240570080', '(31,"Main2") - 0.240570080', '(129,"Main2") - 0.240570080', '(96,"Main2") - 0.240570080', '(112,"Main2") - 0.240570080', '(69,"Main2") - 0.240570080', '(113,"Main2") - 0.240570080', '(122,"Main2") - 0.240570080', '(123,"Main2") - 0.240570080', '(128,"Main2") - 0.240570080', '(105,"Main2") - 0.240570080', '(89,"Main2") - 0.240570080', '(84,"Main2") - 0.240570080', '(38,"Main2") - 0.240570080', '(65,"Main2") - 0.240570080', '(94,"Main2") - 0.240570080', '(95,"Main2") - 0.240570080', '(75,"Main2") - 0.240570080', '(77,"Main2") - 0.240570080', '(67,"Main2") - 0.240570080', '(78,"Main2") - 0.240570080', '(39,"Main2") - 0.240570080', '(79,"Main2") - 0.240570080', '(97,"Main2") - 0.240570080', '(32,"Main2") - 0.240570080', '(37,"Main2") - 0.240570080', '(63,"Main2") - 0.240570080', '(114,"Main2") - 0.240570080', '(76,"Main2") - 0.240570080', '(91,"Main2") - 0.240570080', '(98,"Main2") - 0.240570080', '(82,"Main2") - 0.240570080', '(40,"Main2") - 0.240570080', '(83,"Main2") - 0.240570080', '(64,"Main2") - 0.240570080', '(121,"Main2") - 0.240570080', '(104,"Main2") - 0.240570080', '(127,"Main2") - 0.240570080', '(125,"Main2") - 0.240570080', '(88,"Main2") - 0.240570080', '(29,"Main2") - 0.240570080', '(130,"Main2") - 0.240570080', '(81,"Main2") - 0.240570080', '(93,"Main2") - 0.240570080', '(41,"Main2") - 0.240570080', '(80,"Main2") - 0.240570080', '(102,"Main2") - 0.240570080', '(115,"Main2") - 0.300427930', '(34,"Main2") - 0.300427930', '(36,"Main2") - 0.300427930', '(35,"Main2") - 0.300427930', '(27,"Main2") - 0.308979399', '(28,"Main2") - 0.308979399', '(33,"Main2") - 0.308979399', '(25,"Main2") - 0.317230077', '(24,"Main2") - 0.317230077', '(23,"Main2") - 0.317230077', '(66,"Main2") - 0.381389921', '(107,"Main2") - 0.381389921', '(72,"Main2") - 0.381389921', '(106,"Main2") - 0.381389921', '(62,"Main2") - 0.381389921', '(70,"Main2") - 0.381389921', '(2,"Main2") - 0.720071271', '(3,"Main2") - 0.720071271', '(17,"Main2") - 0.720071271', '(5,"Main2") - 0.720071271', '(22,"Main2") - 0.720071271', '(14,"Main2") - 0.720071271', '(13,"Main2") - 0.720071271', '(9,"Main2") - 0.720071271', '(19,"Main2") - 0.720071271', '(1,"Main2") - 0.720071271', '(4,"Main2") - 0.720071271', '(26,"Main2") - 0.720071271', '(15,"Main2") - 0.720071271', '(12,"Main2") - 0.720071271', '(10,"Main2") - 0.720071271', '(6,"Main2") - 0.720071271', '(21,"Main2") - 0.720071271', '(8,"Main2") - 0.720071271', '(16,"Main2") - 0.720071271', '(0,"Main2") - 0.720071271', '(7,"Main2") - 0.720071271', '(11,"Main2") - 0.720071271', '(20,"Main2") - 0.727102315']
Red Rules #: 17673
SMT Solving time: 0.362548744
Gen Solving time: 0.367327374
SMT Solver calls: 125
General Solver calls: 187
# nrpcs = [1, 0, 0, 0, 2, 0, 2, 0, 1, 0, 0, 1, 3, 1, 0, 2, 0, 1, 0, 4, 2, 0, 0, 1]
# post call args = 5
# func args = 19
# timeouts = 3
# branches = 5


Graph latex for: wheel-sieve1: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(wheel-sieve1)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.23, 63) (0.26, 4) (0.27, 3) (0.29, 3) (0.31, 22) (0.33, 1) (0.34, 1) (0.84, 3)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.24, 63) (0.3, 4) (0.31, 3) (0.32, 3) (0.38, 6) (0.72, 22) (0.73, 1)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


wheel-sieve2
Baseline:
hpc_exp = [('CallForHPC', '87', '142', '162', '0', '18'), ('Main2', '37', '57', '151', '4', '10')]
calculate hpc converage
[('CallForHPC', 87, 142, 162, '0', '18'), ('Main2', 37, 57, 151, '4', '10')]
[('Main2', 37, 57, 151, '4', '10')]
[('4', '10')]
Last time is: 0.519625836
hpc reached = 37.7
g2 reached = 68
total = 177
% reached = 38.4
last time = 0.519625836
all_times = ['(152,"Main2") - 0.216259392', '(90,"Main2") - 0.216259392', '(117,"Main2") - 0.216259392', '(159,"Main2") - 0.216259392', '(119,"Main2") - 0.216259392', '(109,"Main2") - 0.216259392', '(111,"Main2") - 0.216259392', '(141,"Main2") - 0.216259392', '(151,"Main2") - 0.216259392', '(176,"Main2") - 0.216259392', '(120,"Main2") - 0.216259392', '(129,"Main2") - 0.216259392', '(112,"Main2") - 0.216259392', '(155,"Main2") - 0.216259392', '(170,"Main2") - 0.216259392', '(113,"Main2") - 0.216259392', '(122,"Main2") - 0.216259392', '(108,"Main2") - 0.216259392', '(157,"Main2") - 0.216259392', '(172,"Main2") - 0.216259392', '(128,"Main2") - 0.216259392', '(89,"Main2") - 0.216259392', '(110,"Main2") - 0.216259392', '(168,"Main2") - 0.216259392', '(77,"Main2") - 0.216259392', '(78,"Main2") - 0.216259392', '(107,"Main2") - 0.216259392', '(169,"Main2") - 0.216259392', '(79,"Main2") - 0.216259392', '(158,"Main2") - 0.216259392', '(156,"Main2") - 0.216259392', '(167,"Main2") - 0.216259392', '(153,"Main2") - 0.216259392', '(142,"Main2") - 0.216259392', '(162,"Main2") - 0.216259392', '(175,"Main2") - 0.216259392', '(171,"Main2") - 0.216259392', '(174,"Main2") - 0.216259392', '(81,"Main2") - 0.216259392', '(80,"Main2") - 0.216259392', '(116,"Main2") - 0.322448953', '(173,"Main2") - 0.322448953', '(115,"Main2") - 0.322448953', '(96,"Main2") - 0.322448953', '(150,"Main2") - 0.322448953', '(146,"Main2") - 0.322448953', '(147,"Main2") - 0.322448953', '(148,"Main2") - 0.322448953', '(160,"Main2") - 0.322448953', '(145,"Main2") - 0.322448953', '(97,"Main2") - 0.322448953', '(114,"Main2") - 0.322448953', '(121,"Main2") - 0.322448953', '(149,"Main2") - 0.322448953', '(73,"Main2") - 0.400158322', '(74,"Main2") - 0.400158322', '(165,"Main2") - 0.400158322', '(94,"Main2") - 0.400158322', '(95,"Main2") - 0.400158322', '(75,"Main2") - 0.400158322', '(72,"Main2") - 0.400158322', '(71,"Main2") - 0.400158322', '(76,"Main2") - 0.400158322', '(164,"Main2") - 0.400158322', '(92,"Main2") - 0.519625836', '(166,"Main2") - 0.519625836', '(91,"Main2") - 0.519625836', '(93,"Main2") - 0.519625836']
Red Rules #: 28703
SMT Solving time: 0.197602613
Gen Solving time: 0.200375549
SMT Solver calls: 95
General Solver calls: 102
# nrpcs = []
# post call args = 13
# func args = 0
# timeouts = 0
# branches = 14
NRPC:
hpc_exp = [('CallForHPC', '78', '25', '32', '0', '0'), ('Main2', '29', '44', '151', '4', '10')]
calculate hpc converage
[('CallForHPC', 78, 25, 32, '0', '0'), ('Main2', 29, 44, 151, '4', '10')]
[('Main2', 29, 44, 151, '4', '10')]
[('4', '10')]
Last time is: 0.604498568
hpc reached = 29.1
g2 reached = 141
total = 177
% reached = 79.7
last time = 0.604498568
all_times = ['(152,"Main2") - 0.217029054', '(90,"Main2") - 0.217029054', '(117,"Main2") - 0.217029054', '(159,"Main2") - 0.217029054', '(119,"Main2") - 0.217029054', '(109,"Main2") - 0.217029054', '(111,"Main2") - 0.217029054', '(141,"Main2") - 0.217029054', '(151,"Main2") - 0.217029054', '(176,"Main2") - 0.217029054', '(120,"Main2") - 0.217029054', '(129,"Main2") - 0.217029054', '(112,"Main2") - 0.217029054', '(155,"Main2") - 0.217029054', '(170,"Main2") - 0.217029054', '(113,"Main2") - 0.217029054', '(122,"Main2") - 0.217029054', '(108,"Main2") - 0.217029054', '(157,"Main2") - 0.217029054', '(172,"Main2") - 0.217029054', '(128,"Main2") - 0.217029054', '(89,"Main2") - 0.217029054', '(110,"Main2") - 0.217029054', '(168,"Main2") - 0.217029054', '(77,"Main2") - 0.217029054', '(78,"Main2") - 0.217029054', '(107,"Main2") - 0.217029054', '(169,"Main2") - 0.217029054', '(79,"Main2") - 0.217029054', '(158,"Main2") - 0.217029054', '(156,"Main2") - 0.217029054', '(167,"Main2") - 0.217029054', '(153,"Main2") - 0.217029054', '(142,"Main2") - 0.217029054', '(162,"Main2") - 0.217029054', '(175,"Main2") - 0.217029054', '(171,"Main2") - 0.217029054', '(174,"Main2") - 0.217029054', '(81,"Main2") - 0.217029054', '(80,"Main2") - 0.217029054', '(116,"Main2") - 0.252037243', '(173,"Main2") - 0.252037243', '(115,"Main2") - 0.252037243', '(96,"Main2") - 0.252037243', '(150,"Main2") - 0.252037243', '(146,"Main2") - 0.252037243', '(147,"Main2") - 0.252037243', '(148,"Main2") - 0.252037243', '(160,"Main2") - 0.252037243', '(145,"Main2") - 0.252037243', '(97,"Main2") - 0.252037243', '(114,"Main2") - 0.252037243', '(121,"Main2") - 0.252037243', '(149,"Main2") - 0.252037243', '(73,"Main2") - 0.280401655', '(74,"Main2") - 0.280401655', '(165,"Main2") - 0.280401655', '(94,"Main2") - 0.280401655', '(95,"Main2") - 0.280401655', '(75,"Main2") - 0.280401655', '(72,"Main2") - 0.280401655', '(71,"Main2") - 0.280401655', '(76,"Main2") - 0.280401655', '(164,"Main2") - 0.280401655', '(92,"Main2") - 0.491703872', '(166,"Main2") - 0.491703872', '(91,"Main2") - 0.491703872', '(93,"Main2") - 0.491703872', '(2,"Main2") - 0.529776983', '(68,"Main2") - 0.529776983', '(3,"Main2") - 0.529776983', '(30,"Main2") - 0.529776983', '(126,"Main2") - 0.529776983', '(87,"Main2") - 0.529776983', '(17,"Main2") - 0.529776983', '(5,"Main2") - 0.529776983', '(56,"Main2") - 0.529776983', '(55,"Main2") - 0.529776983', '(86,"Main2") - 0.529776983', '(59,"Main2") - 0.529776983', '(85,"Main2") - 0.529776983', '(31,"Main2") - 0.529776983', '(14,"Main2") - 0.529776983', '(66,"Main2") - 0.529776983', '(20,"Main2") - 0.529776983', '(118,"Main2") - 0.529776983', '(69,"Main2") - 0.529776983', '(44,"Main2") - 0.529776983', '(53,"Main2") - 0.529776983', '(52,"Main2") - 0.529776983', '(9,"Main2") - 0.529776983', '(46,"Main2") - 0.529776983', '(54,"Main2") - 0.529776983', '(105,"Main2") - 0.529776983', '(19,"Main2") - 0.529776983', '(57,"Main2") - 0.529776983', '(1,"Main2") - 0.529776983', '(4,"Main2") - 0.529776983', '(84,"Main2") - 0.529776983', '(65,"Main2") - 0.529776983', '(58,"Main2") - 0.529776983', '(26,"Main2") - 0.529776983', '(28,"Main2") - 0.529776983', '(67,"Main2") - 0.529776983', '(15,"Main2") - 0.529776983', '(36,"Main2") - 0.529776983', '(42,"Main2") - 0.529776983', '(10,"Main2") - 0.529776983', '(106,"Main2") - 0.529776983', '(51,"Main2") - 0.529776983', '(24,"Main2") - 0.529776983', '(32,"Main2") - 0.529776983', '(6,"Main2") - 0.529776983', '(37,"Main2") - 0.529776983', '(63,"Main2") - 0.529776983', '(98,"Main2") - 0.529776983', '(82,"Main2") - 0.529776983', '(45,"Main2") - 0.529776983', '(64,"Main2") - 0.529776983', '(23,"Main2") - 0.529776983', '(127,"Main2") - 0.529776983', '(161,"Main2") - 0.529776983', '(88,"Main2") - 0.529776983', '(21,"Main2") - 0.529776983', '(61,"Main2") - 0.529776983', '(29,"Main2") - 0.529776983', '(18,"Main2") - 0.529776983', '(62,"Main2") - 0.529776983', '(70,"Main2") - 0.529776983', '(41,"Main2") - 0.529776983', '(16,"Main2") - 0.529776983', '(35,"Main2") - 0.529776983', '(99,"Main2") - 0.529776983', '(0,"Main2") - 0.529776983', '(7,"Main2") - 0.529776983', '(43,"Main2") - 0.529776983', '(124,"Main2") - 0.604498568', '(103,"Main2") - 0.604498568', '(123,"Main2") - 0.604498568', '(125,"Main2") - 0.604498568', '(102,"Main2") - 0.604498568']
Red Rules #: 21152
SMT Solving time: 0.13821266
Gen Solving time: 0.139996139
SMT Solver calls: 56
General Solver calls: 88
# nrpcs = [0, 0, 0, 0, 1, 2, 1, 3, 1, 1, 1, 1, 5, 2, 2]
# post call args = 5
# func args = 10
# timeouts = 11
# branches = 14


Graph latex for: wheel-sieve2: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(wheel-sieve2)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.22, 40) (0.32, 14) (0.4, 10) (0.52, 4)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.22, 40) (0.25, 14) (0.28, 10) (0.49, 4) (0.53, 68) (0.6, 5)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


x2n1
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '32', '0', '0')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 32, '0', '0')]
[('Main2', 0, 0, 32, '0', '0')]
[('0', '0')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 35
% reached = 0.0
last time = 
all_times = []
Red Rules #: 3179
SMT Solving time: 1.217503522
Gen Solving time: 1.217891539
SMT Solver calls: 10
General Solver calls: 15
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 0
NRPC:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '32', '0', '0')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 32, '0', '0')]
[('Main2', 0, 0, 32, '0', '0')]
[('0', '0')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 35
% reached = 0.0
last time = 
all_times = []
Red Rules #: 3071
SMT Solving time: 0.769159965
Gen Solving time: 0.769455033
SMT Solver calls: 8
General Solver calls: 13
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 0


Graph latex for: x2n1: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(x2n1)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0, 0)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| Benchmark    |   #Total Ticks |   B HPC cov % |   B cov % |   B last time |   N HPC cov % |   N cov % |   N last time | Pos 1-sec B/N   | Pos 3-sec B/N   | Pos 5-sec B/N   | Diff tick 1s   | Diff tick 3s   | Diff tick 5s   |   Avg # Nrpcs |   # Branches |
+==============+================+===============+===========+===============+===============+===========+===============+=================+=================+=================+================+================+================+===============+==============+
| bernouilli   |             96 |          12.9 |      15.6 |           0.3 |          80   |      79.2 |           0.7 | 0/0             | 0/0             | 0/0             | 0/61           | 0/61           | 0/61           |          0.29 |            8 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| digits-of-e1 |            118 |          75.2 |      77.1 |           0.4 |          74.3 |      81.4 |           0.9 | 0/0             | 0/0             | 0/0             | 0/5            | 0/5            | 0/5            |          3.16 |            5 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| digits-of-e2 |             87 |          98.7 |      98.9 |           0.9 |          92.3 |      93.1 |           0.9 | 0/0             | 0/0             | 0/0             | 5/0            | 5/0            | 5/0            |          2.08 |            4 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| exp3_8       |             55 |          89.4 |      90.9 |           1   |          38.3 |      61.8 |           0.6 | 0/0             | 0/0             | 0/0             | 16/0           | 16/0           | 16/0           |          1.54 |           13 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| gen_regexps  |            128 |          47.5 |      51.6 |           0.6 |          47.5 |      51.6 |           0.6 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0.65 |           11 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| integrate    |            143 |           3.6 |       4.9 |           0.2 |          69.1 |      44.1 |           0.3 | 0/0             | 0/0             | 0/0             | 0/56           | 0/56           | 0/56           |          0.46 |            0 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| paraffins    |            264 |          38.5 |      41.3 |           0.9 |          71.2 |      32.2 |           1   | 0/0             | 0/0             | 0/0             | 24/0           | 24/0           | 24/0           |          0.6  |           20 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| primes       |             29 |         100   |     100   |           0.3 |         100   |     100   |           0.3 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0.54 |            0 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| queens       |             95 |          28.1 |      32.6 |           0.9 |          73   |      74.7 |           1   | 0/0             | 0/0             | 0/0             | 0/40           | 0/40           | 0/40           |          3.31 |            6 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| rfib         |             25 |          95.2 |      96   |           0.9 |          95.2 |      96   |           0.8 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0.86 |            3 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| tak          |             41 |          37.8 |      41.5 |           0.2 |          32.4 |      82.9 |           0.6 | 0/0             | 0/0             | 0/0             | 0/17           | 0/17           | 0/17           |          3    |            3 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| wheel-sieve1 |            131 |          76.3 |      76.3 |           0.8 |          73.7 |      77.9 |           0.7 | 0/0             | 0/0             | 0/0             | 0/2            | 0/2            | 0/2            |          0.88 |            5 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| wheel-sieve2 |            177 |          37.7 |      38.4 |           0.5 |          29.1 |      79.7 |           0.6 | 0/0             | 0/0             | 0/0             | 0/73           | 0/73           | 0/73           |          1.33 |           14 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| x2n1         |             35 |           0   |       0   |           0   |           0   |       0   |           0   | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |            0 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+


['boyer', 'boyer2', 'calendar', 'cichelli', 'circsim', 'clausify', 'constraints', 'cryptarithm1', 'cse', 'eliza', 'expert', 'gcd', 'integer', 'lcss', 'life', 'mandel2', 'multiplier', 'power', 'primetest', 'scc', 'rewrite', 'sphere', 'treejoin']
boyer
Baseline:
hpc_exp = [('CallForHPC', '90', '86', '95', '0', '10'), ('Main2', '1', '18', '1152', '10', '35')]
calculate hpc converage
[('CallForHPC', 90, 86, 95, '0', '10'), ('Main2', 1, 18, 1152, '10', '35')]
[('Main2', 1, 18, 1152, '10', '35')]
[('10', '35')]
Last time is: 0.302375033
hpc reached = 1.6
g2 reached = 25
total = 1017
% reached = 2.5
last time = 0.302375033
all_times = ['(1217,"Main2") - 0.232949485', '(1218,"Main2") - 0.232949485', '(1211,"Main2") - 0.232949485', '(14,"Main2") - 0.232949485', '(1220,"Main2") - 0.232949485', '(1226,"Main2") - 0.232949485', '(1216,"Main2") - 0.232949485', '(1219,"Main2") - 0.232949485', '(1221,"Main2") - 0.232949485', '(187,"Main2") - 0.232949485', '(1207,"Main2") - 0.232949485', '(1225,"Main2") - 0.232949485', '(15,"Main2") - 0.232949485', '(12,"Main2") - 0.232949485', '(1212,"Main2") - 0.232949485', '(1227,"Main2") - 0.232949485', '(186,"Main2") - 0.232949485', '(1224,"Main2") - 0.232949485', '(61,"Main2") - 0.232949485', '(1222,"Main2") - 0.232949485', '(1223,"Main2") - 0.232949485', '(181,"Main2") - 0.232949485', '(1213,"Main2") - 0.232949485', '(184,"Main2") - 0.302375033', '(11,"Main2") - 0.302375033']
Red Rules #: 25185
SMT Solving time: 0.14692393
Gen Solving time: 0.148921905
SMT Solver calls: 59
General Solver calls: 66
# nrpcs = []
# post call args = 11
# func args = 0
# timeouts = 0
# branches = 45
NRPC:
hpc_exp = [('CallForHPC', '95', '198', '208', '0', '14'), ('Main2', '37', '433', '1152', '10', '35')]
calculate hpc converage
[('CallForHPC', 95, 198, 208, '0', '14'), ('Main2', 37, 433, 1152, '10', '35')]
[('Main2', 37, 433, 1152, '10', '35')]
[('10', '35')]
Last time is: 0.274585097
hpc reached = 37.6
g2 reached = 25
total = 1017
% reached = 2.5
last time = 0.274585097
all_times = ['(1217,"Main2") - 0.246577943', '(1218,"Main2") - 0.246577943', '(1211,"Main2") - 0.246577943', '(14,"Main2") - 0.246577943', '(1220,"Main2") - 0.246577943', '(1226,"Main2") - 0.246577943', '(1216,"Main2") - 0.246577943', '(1219,"Main2") - 0.246577943', '(1221,"Main2") - 0.246577943', '(187,"Main2") - 0.246577943', '(1207,"Main2") - 0.246577943', '(1225,"Main2") - 0.246577943', '(15,"Main2") - 0.246577943', '(12,"Main2") - 0.246577943', '(1212,"Main2") - 0.246577943', '(1227,"Main2") - 0.246577943', '(186,"Main2") - 0.246577943', '(1224,"Main2") - 0.246577943', '(61,"Main2") - 0.246577943', '(1222,"Main2") - 0.246577943', '(1223,"Main2") - 0.246577943', '(181,"Main2") - 0.246577943', '(1213,"Main2") - 0.246577943', '(184,"Main2") - 0.274585097', '(11,"Main2") - 0.274585097']
Red Rules #: 19634
SMT Solving time: 0.239896792
Gen Solving time: 0.243097609
SMT Solver calls: 134
General Solver calls: 178
# nrpcs = [2, 0, 0, 0, 0, 1, 1, 3, 2, 4, 3, 1, 5, 2, 4, 6, 2, 7, 3, 4, 4, 5]
# post call args = 7
# func args = 15
# timeouts = 0
# branches = 45


Graph latex for: boyer: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(boyer)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.23, 23) (0.3, 2)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.25, 23) (0.27, 2)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


boyer2
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Checker', '0', '0', '98', '6', '22'), ('Lisplikefns', '0', '0', '196', '14', '38'), ('Main2', '0', '0', '83', '2', '10'), ('Rewritefns', '0', '0', '133', '8', '26'), ('Rulebasetext', '0', '0', '107', '0', '0')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Checker', 0, 0, 98, '6', '22'), ('Lisplikefns', 0, 0, 196, '14', '38'), ('Main2', 0, 0, 83, '2', '10'), ('Rewritefns', 0, 0, 133, '8', '26'), ('Rulebasetext', 0, 0, 107, '0', '0')]
[('Checker', 0, 0, 98, '6', '22'), ('Lisplikefns', 0, 0, 196, '14', '38'), ('Main2', 0, 0, 83, '2', '10'), ('Rewritefns', 0, 0, 133, '8', '26'), ('Rulebasetext', 0, 0, 107, '0', '0')]
[('6', '22'), ('14', '38'), ('2', '10'), ('8', '26'), ('0', '0')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 709
% reached = 0.0
last time = 
all_times = []
Red Rules #: 46180
SMT Solving time: 0.0
Gen Solving time: 0.0
SMT Solver calls: 0
General Solver calls: 0
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 126
NRPC:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Checker', '0', '0', '98', '6', '22'), ('Lisplikefns', '0', '0', '196', '14', '38'), ('Main2', '0', '0', '83', '2', '10'), ('Rewritefns', '0', '0', '133', '8', '26'), ('Rulebasetext', '0', '0', '107', '0', '0')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Checker', 0, 0, 98, '6', '22'), ('Lisplikefns', 0, 0, 196, '14', '38'), ('Main2', 0, 0, 83, '2', '10'), ('Rewritefns', 0, 0, 133, '8', '26'), ('Rulebasetext', 0, 0, 107, '0', '0')]
[('Checker', 0, 0, 98, '6', '22'), ('Lisplikefns', 0, 0, 196, '14', '38'), ('Main2', 0, 0, 83, '2', '10'), ('Rewritefns', 0, 0, 133, '8', '26'), ('Rulebasetext', 0, 0, 107, '0', '0')]
[('6', '22'), ('14', '38'), ('2', '10'), ('8', '26'), ('0', '0')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 709
% reached = 0.0
last time = 
all_times = []
Red Rules #: 40560
SMT Solving time: 0.0
Gen Solving time: 0.0
SMT Solver calls: 0
General Solver calls: 0
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 126


Graph latex for: boyer2: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(boyer2)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0, 0)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


calendar
Baseline:
hpc_exp = [('CallForHPC', '59', '25', '42', '0', '0'), ('Main2', '3', '14', '360', '7', '10')]
calculate hpc converage
[('CallForHPC', 59, 25, 42, '0', '0'), ('Main2', 3, 14, 360, '7', '10')]
[('Main2', 3, 14, 360, '7', '10')]
[('7', '10')]
Last time is: 0.655181914
hpc reached = 3.9
g2 reached = 18
total = 315
% reached = 5.7
last time = 0.655181914
all_times = ['(321,"Main2") - 0.282094313', '(332,"Main2") - 0.282094313', '(315,"Main2") - 0.282094313', '(320,"Main2") - 0.282094313', '(333,"Main2") - 0.282094313', '(304,"Main2") - 0.282094313', '(329,"Main2") - 0.282094313', '(319,"Main2") - 0.282094313', '(328,"Main2") - 0.282094313', '(310,"Main2") - 0.282094313', '(316,"Main2") - 0.282094313', '(317,"Main2") - 0.282094313', '(311,"Main2") - 0.282094313', '(303,"Main2") - 0.282094313', '(302,"Main2") - 0.617364844', '(312,"Main2") - 0.655181914', '(314,"Main2") - 0.655181914', '(313,"Main2") - 0.655181914']
Red Rules #: 9555
SMT Solving time: 0.478126979
Gen Solving time: 0.483545977
SMT Solver calls: 102
General Solver calls: 126
# nrpcs = []
# post call args = 4
# func args = 0
# timeouts = 0
# branches = 17
NRPC:
hpc_exp = [('CallForHPC', '82', '117', '141', '0', '6'), ('Main2', '71', '256', '360', '7', '10')]
calculate hpc converage
[('CallForHPC', 82, 117, 141, '0', '6'), ('Main2', 71, 256, 360, '7', '10')]
[('Main2', 71, 256, 360, '7', '10')]
[('7', '10')]
Last time is: 0.487611656
hpc reached = 71.1
g2 reached = 75
total = 315
% reached = 23.8
last time = 0.487611656
all_times = ['(321,"Main2") - 0.275075723', '(332,"Main2") - 0.275075723', '(315,"Main2") - 0.275075723', '(320,"Main2") - 0.275075723', '(333,"Main2") - 0.275075723', '(304,"Main2") - 0.275075723', '(329,"Main2") - 0.275075723', '(319,"Main2") - 0.275075723', '(328,"Main2") - 0.275075723', '(310,"Main2") - 0.275075723', '(316,"Main2") - 0.275075723', '(317,"Main2") - 0.275075723', '(311,"Main2") - 0.275075723', '(303,"Main2") - 0.275075723', '(301,"Main2") - 0.464368065', '(3,"Main2") - 0.464368065', '(331,"Main2") - 0.464368065', '(17,"Main2") - 0.464368065', '(275,"Main2") - 0.464368065', '(5,"Main2") - 0.464368065', '(306,"Main2") - 0.464368065', '(283,"Main2") - 0.464368065', '(14,"Main2") - 0.464368065', '(282,"Main2") - 0.464368065', '(302,"Main2") - 0.464368065', '(13,"Main2") - 0.464368065', '(318,"Main2") - 0.464368065', '(287,"Main2") - 0.464368065', '(281,"Main2") - 0.464368065', '(272,"Main2") - 0.464368065', '(300,"Main2") - 0.464368065', '(9,"Main2") - 0.464368065', '(189,"Main2") - 0.464368065', '(19,"Main2") - 0.464368065', '(308,"Main2") - 0.464368065', '(324,"Main2") - 0.464368065', '(274,"Main2") - 0.464368065', '(312,"Main2") - 0.464368065', '(27,"Main2") - 0.464368065', '(4,"Main2") - 0.464368065', '(309,"Main2") - 0.464368065', '(26,"Main2") - 0.464368065', '(273,"Main2") - 0.464368065', '(299,"Main2") - 0.464368065', '(15,"Main2") - 0.464368065', '(12,"Main2") - 0.464368065', '(10,"Main2") - 0.464368065', '(298,"Main2") - 0.464368065', '(314,"Main2") - 0.464368065', '(325,"Main2") - 0.464368065', '(280,"Main2") - 0.464368065', '(322,"Main2") - 0.464368065', '(8,"Main2") - 0.464368065', '(18,"Main2") - 0.464368065', '(188,"Main2") - 0.464368065', '(305,"Main2") - 0.464368065', '(288,"Main2") - 0.464368065', '(326,"Main2") - 0.464368065', '(271,"Main2") - 0.464368065', '(16,"Main2") - 0.464368065', '(313,"Main2") - 0.464368065', '(0,"Main2") - 0.464368065', '(295,"Main2") - 0.464368065', '(327,"Main2") - 0.464368065', '(7,"Main2") - 0.464368065', '(11,"Main2") - 0.464368065', '(286,"Main2") - 0.464368065', '(296,"Main2") - 0.473267083', '(291,"Main2") - 0.487611656', '(292,"Main2") - 0.487611656', '(294,"Main2") - 0.487611656', '(297,"Main2") - 0.487611656', '(289,"Main2") - 0.487611656', '(290,"Main2") - 0.487611656', '(293,"Main2") - 0.487611656']
Red Rules #: 9449
SMT Solving time: 0.460149911
Gen Solving time: 0.462757592
SMT Solver calls: 78
General Solver calls: 84
# nrpcs = [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0]
# post call args = 5
# func args = 7
# timeouts = 0
# branches = 17


Graph latex for: calendar: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(calendar)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.28, 14) (0.62, 1) (0.66, 3)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.28, 14) (0.46, 53) (0.47, 1) (0.49, 7)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


cichelli
Baseline:
hpc_exp = [('Auxil', '0', '0', '188', '7', '22'), ('CallForHPC', '66', '2', '3', '0', '0'), ('Key', '0', '0', '23', '0', '0'), ('Main2', '0', '0', '3', '0', '0'), ('Prog', '0', '0', '185', '1', '20')]
calculate hpc converage
[('Auxil', 0, 0, 188, '7', '22'), ('CallForHPC', 66, 2, 3, '0', '0'), ('Key', 0, 0, 23, '0', '0'), ('Main2', 0, 0, 3, '0', '0'), ('Prog', 0, 0, 185, '1', '20')]
[('Auxil', 0, 0, 188, '7', '22'), ('Key', 0, 0, 23, '0', '0'), ('Main2', 0, 0, 3, '0', '0'), ('Prog', 0, 0, 185, '1', '20')]
[('7', '22'), ('0', '0'), ('0', '0'), ('1', '20')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 436
% reached = 0.0
last time = 
all_times = []
Red Rules #: 35180
SMT Solving time: 0.041000112
Gen Solving time: 0.042781566
SMT Solver calls: 16
General Solver calls: 217
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 50
NRPC:
hpc_exp = [('Auxil', '89', '168', '188', '7', '22'), ('CallForHPC', '98', '158', '161', '0', '8'), ('Key', '100', '23', '23', '0', '0'), ('Main2', '100', '3', '3', '0', '0'), ('Prog', '82', '152', '185', '1', '20')]
calculate hpc converage
[('Auxil', 89, 168, 188, '7', '22'), ('CallForHPC', 98, 158, 161, '0', '8'), ('Key', 100, 23, 23, '0', '0'), ('Main2', 100, 3, 3, '0', '0'), ('Prog', 82, 152, 185, '1', '20')]
[('Auxil', 89, 168, 188, '7', '22'), ('Key', 100, 23, 23, '0', '0'), ('Main2', 100, 3, 3, '0', '0'), ('Prog', 82, 152, 185, '1', '20')]
[('7', '22'), ('0', '0'), ('0', '0'), ('1', '20')]
Last time is: 0.936545249
hpc reached = 86.7
g2 reached = 126
total = 436
% reached = 28.9
last time = 0.936545249
all_times = ['(117,"Prog") - 0.255190333', '(132,"Prog") - 0.255190333', '(2,"Main2") - 0.255190333', '(50,"Prog") - 0.255190333', '(3,"Main2") - 0.255190333', '(134,"Prog") - 0.255190333', '(130,"Prog") - 0.255190333', '(22,"Key") - 0.255190333', '(131,"Prog") - 0.255190333', '(224,"Auxil") - 0.255190333', '(46,"Prog") - 0.255190333', '(49,"Prog") - 0.255190333', '(0,"Auxil") - 0.255190333', '(135,"Prog") - 0.255190333', '(179,"Prog") - 0.255190333', '(129,"Prog") - 0.255190333', '(126,"Prog") - 0.255190333', '(51,"Prog") - 0.255190333', '(2,"Auxil") - 0.255190333', '(89,"Auxil") - 0.255190333', '(141,"Prog") - 0.255190333', '(226,"Auxil") - 0.255190333', '(137,"Prog") - 0.255190333', '(92,"Auxil") - 0.255190333', '(90,"Auxil") - 0.255190333', '(45,"Prog") - 0.255190333', '(110,"Prog") - 0.255190333', '(217,"Auxil") - 0.255190333', '(152,"Auxil") - 0.255190333', '(125,"Prog") - 0.255190333', '(93,"Auxil") - 0.255190333', '(127,"Prog") - 0.255190333', '(227,"Auxil") - 0.255190333', '(118,"Prog") - 0.255190333', '(111,"Prog") - 0.255190333', '(1,"Auxil") - 0.255190333', '(139,"Prog") - 0.255190333', '(223,"Auxil") - 0.255190333', '(133,"Prog") - 0.255190333', '(119,"Prog") - 0.255190333', '(23,"Key") - 0.255190333', '(180,"Prog") - 0.255190333', '(140,"Prog") - 0.255190333', '(116,"Prog") - 0.255190333', '(140,"Auxil") - 0.255190333', '(0,"Main2") - 0.255190333', '(91,"Auxil") - 0.255190333', '(136,"Prog") - 0.255190333', '(128,"Prog") - 0.255190333', '(115,"Prog") - 0.276540917', '(44,"Prog") - 0.276540917', '(48,"Prog") - 0.276540917', '(112,"Prog") - 0.294379303', '(113,"Prog") - 0.312751770', '(114,"Prog") - 0.324540713', '(84,"Auxil") - 0.352363677', '(144,"Auxil") - 0.352363677', '(150,"Auxil") - 0.352363677', '(43,"Prog") - 0.352363677', '(147,"Auxil") - 0.352363677', '(141,"Auxil") - 0.352363677', '(142,"Auxil") - 0.352363677', '(148,"Auxil") - 0.352363677', '(83,"Auxil") - 0.352363677', '(149,"Auxil") - 0.352363677', '(145,"Auxil") - 0.352363677', '(151,"Auxil") - 0.352363677', '(0,"Key") - 0.352363677', '(143,"Auxil") - 0.352363677', '(52,"Auxil") - 0.936545249', '(62,"Auxil") - 0.936545249', '(34,"Prog") - 0.936545249', '(156,"Auxil") - 0.936545249', '(43,"Auxil") - 0.936545249', '(161,"Auxil") - 0.936545249', '(167,"Auxil") - 0.936545249', '(87,"Auxil") - 0.936545249', '(39,"Auxil") - 0.936545249', '(85,"Auxil") - 0.936545249', '(42,"Prog") - 0.936545249', '(108,"Prog") - 0.936545249', '(163,"Auxil") - 0.936545249', '(51,"Auxil") - 0.936545249', '(29,"Prog") - 0.936545249', '(80,"Auxil") - 0.936545249', '(41,"Prog") - 0.936545249', '(66,"Auxil") - 0.936545249', '(58,"Auxil") - 0.936545249', '(88,"Auxil") - 0.936545249', '(86,"Auxil") - 0.936545249', '(30,"Auxil") - 0.936545249', '(38,"Auxil") - 0.936545249', '(47,"Prog") - 0.936545249', '(60,"Auxil") - 0.936545249', '(160,"Auxil") - 0.936545249', '(59,"Auxil") - 0.936545249', '(155,"Auxil") - 0.936545249', '(170,"Auxil") - 0.936545249', '(173,"Auxil") - 0.936545249', '(26,"Prog") - 0.936545249', '(31,"Prog") - 0.936545249', '(61,"Auxil") - 0.936545249', '(162,"Auxil") - 0.936545249', '(171,"Auxil") - 0.936545249', '(157,"Auxil") - 0.936545249', '(50,"Auxil") - 0.936545249', '(81,"Auxil") - 0.936545249', '(164,"Auxil") - 0.936545249', '(165,"Auxil") - 0.936545249', '(64,"Auxil") - 0.936545249', '(154,"Auxil") - 0.936545249', '(49,"Auxil") - 0.936545249', '(27,"Prog") - 0.936545249', '(28,"Prog") - 0.936545249', '(159,"Auxil") - 0.936545249', '(109,"Prog") - 0.936545249', '(172,"Auxil") - 0.936545249', '(30,"Prog") - 0.936545249', '(33,"Prog") - 0.936545249', '(32,"Prog") - 0.936545249', '(158,"Auxil") - 0.936545249', '(69,"Auxil") - 0.936545249', '(25,"Prog") - 0.936545249', '(153,"Auxil") - 0.936545249', '(168,"Auxil") - 0.936545249', '(166,"Auxil") - 0.936545249']
Red Rules #: 16905
SMT Solving time: 0.282711679
Gen Solving time: 0.286218579
SMT Solver calls: 157
General Solver calls: 268
# nrpcs = [1, 4, 1, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3]
# post call args = 0
# func args = 17
# timeouts = 5
# branches = 50


Graph latex for: cichelli: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(cichelli)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.26, 49) (0.28, 3) (0.29, 1) (0.31, 1) (0.32, 1) (0.35, 14) (0.94, 57)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


circsim
Baseline:
hpc_exp = [('CallForHPC', '68', '31', '45', '0', '0'), ('Main2', '4', '41', '1016', '16', '50')]
calculate hpc converage
[('CallForHPC', 68, 31, 45, '0', '0'), ('Main2', 4, 41, 1016, '16', '50')]
[('Main2', 4, 41, 1016, '16', '50')]
[('16', '50')]
Last time is: 0.307019471
hpc reached = 4.0
g2 reached = 53
total = 1015
% reached = 5.2
last time = 0.307019471
all_times = ['(791,"Main2") - 0.307019471', '(198,"Main2") - 0.307019471', '(1053,"Main2") - 0.307019471', '(244,"Main2") - 0.307019471', '(197,"Main2") - 0.307019471', '(1077,"Main2") - 0.307019471', '(205,"Main2") - 0.307019471', '(195,"Main2") - 0.307019471', '(1049,"Main2") - 0.307019471', '(245,"Main2") - 0.307019471', '(204,"Main2") - 0.307019471', '(1081,"Main2") - 0.307019471', '(1070,"Main2") - 0.307019471', '(799,"Main2") - 0.307019471', '(193,"Main2") - 0.307019471', '(1080,"Main2") - 0.307019471', '(1068,"Main2") - 0.307019471', '(1030,"Main2") - 0.307019471', '(1047,"Main2") - 0.307019471', '(242,"Main2") - 0.307019471', '(1050,"Main2") - 0.307019471', '(1073,"Main2") - 0.307019471', '(196,"Main2") - 0.307019471', '(1083,"Main2") - 0.307019471', '(1046,"Main2") - 0.307019471', '(1067,"Main2") - 0.307019471', '(1051,"Main2") - 0.307019471', '(206,"Main2") - 0.307019471', '(1069,"Main2") - 0.307019471', '(194,"Main2") - 0.307019471', '(1082,"Main2") - 0.307019471', '(1078,"Main2") - 0.307019471', '(1054,"Main2") - 0.307019471', '(1065,"Main2") - 0.307019471', '(608,"Main2") - 0.307019471', '(1071,"Main2") - 0.307019471', '(1048,"Main2") - 0.307019471', '(1031,"Main2") - 0.307019471', '(798,"Main2") - 0.307019471', '(1076,"Main2") - 0.307019471', '(1056,"Main2") - 0.307019471', '(1037,"Main2") - 0.307019471', '(1057,"Main2") - 0.307019471', '(1055,"Main2") - 0.307019471', '(1072,"Main2") - 0.307019471', '(607,"Main2") - 0.307019471', '(1041,"Main2") - 0.307019471', '(609,"Main2") - 0.307019471', '(1075,"Main2") - 0.307019471', '(1042,"Main2") - 0.307019471', '(1028,"Main2") - 0.307019471', '(1045,"Main2") - 0.307019471', '(192,"Main2") - 0.307019471']
Red Rules #: 19377
SMT Solving time: 0.29221893
Gen Solving time: 0.294931014
SMT Solver calls: 117
General Solver calls: 121
# nrpcs = []
# post call args = 6
# func args = 0
# timeouts = 0
# branches = 66
NRPC:
hpc_exp = [('CallForHPC', '67', '21', '31', '0', '0'), ('Main2', '4', '41', '1016', '16', '50')]
calculate hpc converage
[('CallForHPC', 67, 21, 31, '0', '0'), ('Main2', 4, 41, 1016, '16', '50')]
[('Main2', 4, 41, 1016, '16', '50')]
[('16', '50')]
Last time is: 0.708422119
hpc reached = 4.0
g2 reached = 53
total = 1015
% reached = 5.2
last time = 0.708422119
all_times = ['(791,"Main2") - 0.708422119', '(198,"Main2") - 0.708422119', '(1053,"Main2") - 0.708422119', '(244,"Main2") - 0.708422119', '(197,"Main2") - 0.708422119', '(1077,"Main2") - 0.708422119', '(205,"Main2") - 0.708422119', '(195,"Main2") - 0.708422119', '(1049,"Main2") - 0.708422119', '(245,"Main2") - 0.708422119', '(204,"Main2") - 0.708422119', '(1081,"Main2") - 0.708422119', '(1070,"Main2") - 0.708422119', '(799,"Main2") - 0.708422119', '(193,"Main2") - 0.708422119', '(1080,"Main2") - 0.708422119', '(1068,"Main2") - 0.708422119', '(1030,"Main2") - 0.708422119', '(1047,"Main2") - 0.708422119', '(242,"Main2") - 0.708422119', '(1050,"Main2") - 0.708422119', '(1073,"Main2") - 0.708422119', '(196,"Main2") - 0.708422119', '(1083,"Main2") - 0.708422119', '(1046,"Main2") - 0.708422119', '(1067,"Main2") - 0.708422119', '(1051,"Main2") - 0.708422119', '(206,"Main2") - 0.708422119', '(1069,"Main2") - 0.708422119', '(194,"Main2") - 0.708422119', '(1082,"Main2") - 0.708422119', '(1078,"Main2") - 0.708422119', '(1054,"Main2") - 0.708422119', '(1065,"Main2") - 0.708422119', '(608,"Main2") - 0.708422119', '(1071,"Main2") - 0.708422119', '(1048,"Main2") - 0.708422119', '(1031,"Main2") - 0.708422119', '(798,"Main2") - 0.708422119', '(1076,"Main2") - 0.708422119', '(1056,"Main2") - 0.708422119', '(1037,"Main2") - 0.708422119', '(1057,"Main2") - 0.708422119', '(1055,"Main2") - 0.708422119', '(1072,"Main2") - 0.708422119', '(607,"Main2") - 0.708422119', '(1041,"Main2") - 0.708422119', '(609,"Main2") - 0.708422119', '(1075,"Main2") - 0.708422119', '(1042,"Main2") - 0.708422119', '(1028,"Main2") - 0.708422119', '(1045,"Main2") - 0.708422119', '(192,"Main2") - 0.708422119']
Red Rules #: 8237
SMT Solving time: 0.15974792
Gen Solving time: 0.160959464
SMT Solver calls: 53
General Solver calls: 56
# nrpcs = [0, 0, 0, 0]
# post call args = 4
# func args = 0
# timeouts = 0
# branches = 66


Graph latex for: circsim: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(circsim)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.31, 53)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.71, 53)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


clausify
Baseline:
hpc_exp = [('CallForHPC', '60', '6', '10', '0', '0'), ('Main2', '2', '7', '324', '8', '60')]
calculate hpc converage
[('CallForHPC', 60, 6, 10, '0', '0'), ('Main2', 2, 7, 324, '8', '60')]
[('Main2', 2, 7, 324, '8', '60')]
[('8', '60')]
Last time is: 0.839603799
hpc reached = 2.2
g2 reached = 10
total = 369
% reached = 2.7
last time = 0.839603799
all_times = ['(368,"Main2") - 0.839603799', '(362,"Main2") - 0.839603799', '(363,"Main2") - 0.839603799', '(354,"Main2") - 0.839603799', '(358,"Main2") - 0.839603799', '(367,"Main2") - 0.839603799', '(366,"Main2") - 0.839603799', '(361,"Main2") - 0.839603799', '(364,"Main2") - 0.839603799', '(357,"Main2") - 0.839603799']
Red Rules #: 5398
SMT Solving time: 0.262637543
Gen Solving time: 0.265315152
SMT Solver calls: 137
General Solver calls: 186
# nrpcs = []
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 68
NRPC:
hpc_exp = [('CallForHPC', '78', '22', '28', '0', '0'), ('Main2', '24', '80', '324', '8', '60')]
calculate hpc converage
[('CallForHPC', 78, 22, 28, '0', '0'), ('Main2', 24, 80, 324, '8', '60')]
[('Main2', 24, 80, 324, '8', '60')]
[('8', '60')]
Last time is: 0.784562514
hpc reached = 24.7
g2 reached = 51
total = 369
% reached = 13.8
last time = 0.784562514
all_times = ['(368,"Main2") - 0.504451104', '(339,"Main2") - 0.504451104', '(349,"Main2") - 0.504451104', '(362,"Main2") - 0.504451104', '(342,"Main2") - 0.504451104', '(356,"Main2") - 0.504451104', '(363,"Main2") - 0.504451104', '(359,"Main2") - 0.504451104', '(343,"Main2") - 0.504451104', '(354,"Main2") - 0.504451104', '(31,"Main2") - 0.504451104', '(360,"Main2") - 0.504451104', '(335,"Main2") - 0.504451104', '(358,"Main2") - 0.504451104', '(367,"Main2") - 0.504451104', '(34,"Main2") - 0.504451104', '(366,"Main2") - 0.504451104', '(336,"Main2") - 0.504451104', '(361,"Main2") - 0.504451104', '(341,"Main2") - 0.504451104', '(348,"Main2") - 0.504451104', '(350,"Main2") - 0.504451104', '(347,"Main2") - 0.504451104', '(32,"Main2") - 0.504451104', '(365,"Main2") - 0.504451104', '(296,"Main2") - 0.504451104', '(353,"Main2") - 0.504451104', '(364,"Main2") - 0.504451104', '(351,"Main2") - 0.504451104', '(352,"Main2") - 0.504451104', '(334,"Main2") - 0.504451104', '(337,"Main2") - 0.504451104', '(340,"Main2") - 0.504451104', '(357,"Main2") - 0.504451104', '(35,"Main2") - 0.504451104', '(321,"Main2") - 0.784562514', '(332,"Main2") - 0.784562514', '(30,"Main2") - 0.784562514', '(320,"Main2") - 0.784562514', '(331,"Main2") - 0.784562514', '(330,"Main2") - 0.784562514', '(22,"Main2") - 0.784562514', '(319,"Main2") - 0.784562514', '(318,"Main2") - 0.784562514', '(312,"Main2") - 0.784562514', '(28,"Main2") - 0.784562514', '(325,"Main2") - 0.784562514', '(317,"Main2") - 0.784562514', '(322,"Main2") - 0.784562514', '(313,"Main2") - 0.784562514', '(295,"Main2") - 0.784562514']
Red Rules #: 9413
SMT Solving time: 0.465630929
Gen Solving time: 0.471323041
SMT Solver calls: 224
General Solver calls: 293
# nrpcs = [0, 0, 1]
# post call args = 2
# func args = 1
# timeouts = 0
# branches = 68


Graph latex for: clausify: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(clausify)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.84, 10)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.5, 35) (0.78, 16)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


constraints
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '502', '11', '42')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 502, '11', '42')]
[('Main2', 0, 0, 502, '11', '42')]
[('11', '42')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 604
% reached = 0.0
last time = 
all_times = []
Red Rules #: 28774
SMT Solving time: 0.11981987
Gen Solving time: 0.122830803
SMT Solver calls: 50
General Solver calls: 674
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 53
NRPC:
hpc_exp = [('CallForHPC', '89', '402', '451', '0', '16'), ('Main2', '52', '266', '502', '11', '42')]
calculate hpc converage
[('CallForHPC', 89, 402, 451, '0', '16'), ('Main2', 52, 266, 502, '11', '42')]
[('Main2', 52, 266, 502, '11', '42')]
[('11', '42')]
Last time is: 0.771095635
hpc reached = 53.0
g2 reached = 297
total = 604
% reached = 49.2
last time = 0.771095635
all_times = ['(152,"Main2") - 0.333082362', '(587,"Main2") - 0.333082362', '(423,"Main2") - 0.333082362', '(445,"Main2") - 0.333082362', '(301,"Main2") - 0.333082362', '(184,"Main2") - 0.333082362', '(173,"Main2") - 0.333082362', '(385,"Main2") - 0.333082362', '(315,"Main2") - 0.333082362', '(436,"Main2") - 0.333082362', '(198,"Main2") - 0.333082362', '(548,"Main2") - 0.333082362', '(185,"Main2") - 0.333082362', '(48,"Main2") - 0.333082362', '(569,"Main2") - 0.333082362', '(441,"Main2") - 0.333082362', '(589,"Main2") - 0.333082362', '(179,"Main2") - 0.333082362', '(579,"Main2") - 0.333082362', '(275,"Main2") - 0.333082362', '(197,"Main2") - 0.333082362', '(191,"Main2") - 0.333082362', '(5,"Main2") - 0.333082362', '(422,"Main2") - 0.333082362', '(151,"Main2") - 0.333082362', '(139,"Main2") - 0.333082362', '(56,"Main2") - 0.333082362', '(176,"Main2") - 0.333082362', '(195,"Main2") - 0.333082362', '(544,"Main2") - 0.333082362', '(444,"Main2") - 0.333082362', '(166,"Main2") - 0.333082362', '(59,"Main2") - 0.333082362', '(165,"Main2") - 0.333082362', '(578,"Main2") - 0.333082362', '(304,"Main2") - 0.333082362', '(570,"Main2") - 0.333082362', '(574,"Main2") - 0.333082362', '(190,"Main2") - 0.333082362', '(218,"Main2") - 0.333082362', '(170,"Main2") - 0.333082362', '(549,"Main2") - 0.333082362', '(211,"Main2") - 0.333082362', '(576,"Main2") - 0.333082362', '(302,"Main2") - 0.333082362', '(318,"Main2") - 0.333082362', '(157,"Main2") - 0.333082362', '(438,"Main2") - 0.333082362', '(172,"Main2") - 0.333082362', '(539,"Main2") - 0.333082362', '(300,"Main2") - 0.333082362', '(591,"Main2") - 0.333082362', '(196,"Main2") - 0.333082362', '(545,"Main2") - 0.333082362', '(277,"Main2") - 0.333082362', '(440,"Main2") - 0.333082362', '(46,"Main2") - 0.333082362', '(443,"Main2") - 0.333082362', '(571,"Main2") - 0.333082362', '(292,"Main2") - 0.333082362', '(189,"Main2") - 0.333082362', '(308,"Main2") - 0.333082362', '(590,"Main2") - 0.333082362', '(150,"Main2") - 0.333082362', '(57,"Main2") - 0.333082362', '(312,"Main2") - 0.333082362', '(279,"Main2") - 0.333082362', '(310,"Main2") - 0.333082362', '(146,"Main2") - 0.333082362', '(200,"Main2") - 0.333082362', '(209,"Main2") - 0.333082362', '(137,"Main2") - 0.333082362', '(60,"Main2") - 0.333082362', '(575,"Main2") - 0.333082362', '(147,"Main2") - 0.333082362', '(386,"Main2") - 0.333082362', '(148,"Main2") - 0.333082362', '(309,"Main2") - 0.333082362', '(419,"Main2") - 0.333082362', '(421,"Main2") - 0.333082362', '(535,"Main2") - 0.333082362', '(163,"Main2") - 0.333082362', '(194,"Main2") - 0.333082362', '(58,"Main2") - 0.333082362', '(187,"Main2") - 0.333082362', '(199,"Main2") - 0.333082362', '(276,"Main2") - 0.333082362', '(237,"Main2") - 0.333082362', '(257,"Main2") - 0.333082362', '(387,"Main2") - 0.333082362', '(299,"Main2") - 0.333082362', '(169,"Main2") - 0.333082362', '(294,"Main2") - 0.333082362', '(297,"Main2") - 0.333082362', '(536,"Main2") - 0.333082362', '(178,"Main2") - 0.333082362', '(217,"Main2") - 0.333082362', '(207,"Main2") - 0.333082362', '(158,"Main2") - 0.333082362', '(203,"Main2") - 0.333082362', '(392,"Main2") - 0.333082362', '(182,"Main2") - 0.333082362', '(572,"Main2") - 0.333082362', '(71,"Main2") - 0.333082362', '(314,"Main2") - 0.333082362', '(47,"Main2") - 0.333082362', '(442,"Main2") - 0.333082362', '(393,"Main2") - 0.333082362', '(162,"Main2") - 0.333082362', '(180,"Main2") - 0.333082362', '(573,"Main2") - 0.333082362', '(208,"Main2") - 0.333082362', '(233,"Main2") - 0.333082362', '(316,"Main2") - 0.333082362', '(384,"Main2") - 0.333082362', '(420,"Main2") - 0.333082362', '(317,"Main2") - 0.333082362', '(394,"Main2") - 0.333082362', '(296,"Main2") - 0.333082362', '(534,"Main2") - 0.333082362', '(213,"Main2") - 0.333082362', '(547,"Main2") - 0.333082362', '(175,"Main2") - 0.333082362', '(280,"Main2") - 0.333082362', '(259,"Main2") - 0.333082362', '(161,"Main2") - 0.333082362', '(501,"Main2") - 0.333082362', '(171,"Main2") - 0.333082362', '(435,"Main2") - 0.333082362', '(236,"Main2") - 0.333082362', '(592,"Main2") - 0.333082362', '(212,"Main2") - 0.333082362', '(293,"Main2") - 0.333082362', '(149,"Main2") - 0.333082362', '(485,"Main2") - 0.333082362', '(188,"Main2") - 0.333082362', '(588,"Main2") - 0.333082362', '(70,"Main2") - 0.333082362', '(580,"Main2") - 0.333082362', '(546,"Main2") - 0.333082362', '(577,"Main2") - 0.333082362', '(181,"Main2") - 0.333082362', '(313,"Main2") - 0.333082362', '(143,"Main2") - 0.333082362', '(0,"Main2") - 0.333082362', '(295,"Main2") - 0.333082362', '(311,"Main2") - 0.333082362', '(303,"Main2") - 0.333082362', '(192,"Main2") - 0.333082362', '(581,"Main2") - 0.333082362', '(164,"Main2") - 0.333082362', '(210,"Main2") - 0.333082362', '(537,"Main2") - 0.340685607', '(234,"Main2") - 0.350046867', '(231,"Main2") - 0.355417073', '(235,"Main2") - 0.355417073', '(219,"Main2") - 0.355417073', '(221,"Main2") - 0.355417073', '(232,"Main2") - 0.355417073', '(220,"Main2") - 0.355417073', '(538,"Main2") - 0.376913873', '(223,"Main2") - 0.388452294', '(230,"Main2") - 0.388452294', '(225,"Main2") - 0.388452294', '(222,"Main2") - 0.388452294', '(224,"Main2") - 0.388452294', '(226,"Main2") - 0.388452294', '(229,"Main2") - 0.388452294', '(227,"Main2") - 0.388452294', '(228,"Main2") - 0.388452294', '(359,"Main2") - 0.439489019', '(564,"Main2") - 0.439489019', '(354,"Main2") - 0.439489019', '(586,"Main2") - 0.439489019', '(567,"Main2") - 0.439489019', '(355,"Main2") - 0.439489019', '(360,"Main2") - 0.439489019', '(358,"Main2") - 0.439489019', '(585,"Main2") - 0.439489019', '(361,"Main2") - 0.439489019', '(565,"Main2") - 0.439489019', '(566,"Main2") - 0.439489019', '(562,"Main2") - 0.439489019', '(353,"Main2") - 0.439489019', '(352,"Main2") - 0.439489019', '(357,"Main2") - 0.439489019', '(563,"Main2") - 0.439489019', '(138,"Main2") - 0.602014225', '(368,"Main2") - 0.680147153', '(141,"Main2") - 0.680147153', '(382,"Main2") - 0.680147153', '(363,"Main2") - 0.680147153', '(333,"Main2") - 0.680147153', '(383,"Main2") - 0.680147153', '(380,"Main2") - 0.680147153', '(319,"Main2") - 0.680147153', '(367,"Main2") - 0.680147153', '(366,"Main2") - 0.680147153', '(369,"Main2") - 0.680147153', '(381,"Main2") - 0.680147153', '(365,"Main2") - 0.680147153', '(142,"Main2") - 0.680147153', '(364,"Main2") - 0.680147153', '(371,"Main2") - 0.680147153', '(372,"Main2") - 0.680147153', '(379,"Main2") - 0.680147153', '(416,"Main2") - 0.771095635', '(159,"Main2") - 0.771095635', '(68,"Main2") - 0.771095635', '(401,"Main2") - 0.771095635', '(410,"Main2") - 0.771095635', '(215,"Main2") - 0.771095635', '(278,"Main2") - 0.771095635', '(408,"Main2") - 0.771095635', '(177,"Main2") - 0.771095635', '(214,"Main2") - 0.771095635', '(205,"Main2") - 0.771095635', '(306,"Main2") - 0.771095635', '(55,"Main2") - 0.771095635', '(405,"Main2") - 0.771095635', '(204,"Main2") - 0.771095635', '(291,"Main2") - 0.771095635', '(201,"Main2") - 0.771095635', '(270,"Main2") - 0.771095635', '(283,"Main2") - 0.771095635', '(388,"Main2") - 0.771095635', '(66,"Main2") - 0.771095635', '(389,"Main2") - 0.771095635', '(282,"Main2") - 0.771095635', '(155,"Main2") - 0.771095635', '(69,"Main2") - 0.771095635', '(202,"Main2") - 0.771095635', '(258,"Main2") - 0.771095635', '(260,"Main2") - 0.771095635', '(53,"Main2") - 0.771095635', '(287,"Main2") - 0.771095635', '(281,"Main2") - 0.771095635', '(412,"Main2") - 0.771095635', '(52,"Main2") - 0.771095635', '(417,"Main2") - 0.771095635', '(418,"Main2") - 0.771095635', '(54,"Main2") - 0.771095635', '(274,"Main2") - 0.771095635', '(415,"Main2") - 0.771095635', '(409,"Main2") - 0.771095635', '(154,"Main2") - 0.771095635', '(266,"Main2") - 0.771095635', '(265,"Main2") - 0.771095635', '(160,"Main2") - 0.771095635', '(206,"Main2") - 0.771095635', '(65,"Main2") - 0.771095635', '(284,"Main2") - 0.771095635', '(273,"Main2") - 0.771095635', '(168,"Main2") - 0.771095635', '(50,"Main2") - 0.771095635', '(67,"Main2") - 0.771095635', '(264,"Main2") - 0.771095635', '(145,"Main2") - 0.771095635', '(599,"Main2") - 0.771095635', '(407,"Main2") - 0.771095635', '(398,"Main2") - 0.771095635', '(396,"Main2") - 0.771095635', '(404,"Main2") - 0.771095635', '(289,"Main2") - 0.771095635', '(263,"Main2") - 0.771095635', '(402,"Main2") - 0.771095635', '(156,"Main2") - 0.771095635', '(167,"Main2") - 0.771095635', '(6,"Main2") - 0.771095635', '(413,"Main2") - 0.771095635', '(186,"Main2") - 0.771095635', '(63,"Main2") - 0.771095635', '(183,"Main2") - 0.771095635', '(153,"Main2") - 0.771095635', '(267,"Main2") - 0.771095635', '(397,"Main2") - 0.771095635', '(269,"Main2") - 0.771095635', '(45,"Main2") - 0.771095635', '(144,"Main2") - 0.771095635', '(399,"Main2") - 0.771095635', '(64,"Main2") - 0.771095635', '(307,"Main2") - 0.771095635', '(61,"Main2") - 0.771095635', '(400,"Main2") - 0.771095635', '(174,"Main2") - 0.771095635', '(403,"Main2") - 0.771095635', '(305,"Main2") - 0.771095635', '(261,"Main2") - 0.771095635', '(62,"Main2") - 0.771095635', '(288,"Main2") - 0.771095635', '(262,"Main2") - 0.771095635', '(437,"Main2") - 0.771095635', '(216,"Main2") - 0.771095635', '(285,"Main2") - 0.771095635', '(395,"Main2") - 0.771095635', '(286,"Main2") - 0.771095635']
Red Rules #: 19931
SMT Solving time: 0.200512515
Gen Solving time: 0.202902436
SMT Solver calls: 129
General Solver calls: 161
# nrpcs = [0, 3, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 6, 1, 4, 1, 1, 1, 1, 4, 1, 1, 0, 3, 0, 1, 0, 1, 0, 0, 1, 1]
# post call args = 0
# func args = 32
# timeouts = 0
# branches = 53


Graph latex for: constraints: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(constraints)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.33, 152) (0.34, 1) (0.35, 1) (0.36, 6) (0.38, 1) (0.39, 9) (0.44, 17) (0.6, 1) (0.68, 18) (0.77, 90)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


cryptarithm1
Baseline:
hpc_exp = [('CallForHPC', '95', '545', '568', '0', '136'), ('Main2', '42', '40', '94', '1', '6')]
calculate hpc converage
[('CallForHPC', 95, 545, 568, '0', '136'), ('Main2', 42, 40, 94, '1', '6')]
[('Main2', 42, 40, 94, '1', '6')]
[('1', '6')]
Last time is: 0.298855492
hpc reached = 42.6
g2 reached = 47
total = 102
% reached = 46.1
last time = 0.298855492
all_times = ['(92,"Main2") - 0.202739850', '(100,"Main2") - 0.202739850', '(90,"Main2") - 0.202739850', '(3,"Main2") - 0.202739850', '(87,"Main2") - 0.202739850', '(101,"Main2") - 0.202739850', '(86,"Main2") - 0.202739850', '(31,"Main2") - 0.202739850', '(96,"Main2") - 0.202739850', '(1,"Main2") - 0.202739850', '(89,"Main2") - 0.202739850', '(4,"Main2") - 0.202739850', '(34,"Main2") - 0.202739850', '(38,"Main2") - 0.202739850', '(94,"Main2") - 0.202739850', '(95,"Main2") - 0.202739850', '(36,"Main2") - 0.202739850', '(32,"Main2") - 0.202739850', '(37,"Main2") - 0.202739850', '(91,"Main2") - 0.202739850', '(98,"Main2") - 0.202739850', '(88,"Main2") - 0.202739850', '(29,"Main2") - 0.202739850', '(93,"Main2") - 0.202739850', '(35,"Main2") - 0.202739850', '(99,"Main2") - 0.202739850', '(0,"Main2") - 0.202739850', '(17,"Main2") - 0.227361705', '(19,"Main2") - 0.227361705', '(27,"Main2") - 0.227361705', '(28,"Main2") - 0.227361705', '(10,"Main2") - 0.227361705', '(97,"Main2") - 0.227361705', '(6,"Main2") - 0.227361705', '(8,"Main2") - 0.227361705', '(18,"Main2") - 0.227361705', '(33,"Main2") - 0.227361705', '(11,"Main2") - 0.227361705', '(2,"Main2") - 0.233743511', '(5,"Main2") - 0.233743511', '(14,"Main2") - 0.233743511', '(13,"Main2") - 0.233743511', '(9,"Main2") - 0.233743511', '(7,"Main2") - 0.233743511', '(30,"Main2") - 0.272543735', '(15,"Main2") - 0.272543735', '(12,"Main2") - 0.298855492']
Red Rules #: 17477
SMT Solving time: 0.291043356
Gen Solving time: 0.294832392
SMT Solver calls: 154
General Solver calls: 234
# nrpcs = []
# post call args = 23
# func args = 0
# timeouts = 0
# branches = 7
NRPC:
hpc_exp = [('CallForHPC', '98', '384', '391', '0', '34'), ('Main2', '42', '40', '94', '1', '6')]
calculate hpc converage
[('CallForHPC', 98, 384, 391, '0', '34'), ('Main2', 42, 40, 94, '1', '6')]
[('Main2', 42, 40, 94, '1', '6')]
[('1', '6')]
Last time is: 0.317845023
hpc reached = 42.6
g2 reached = 47
total = 102
% reached = 46.1
last time = 0.317845023
all_times = ['(92,"Main2") - 0.205188141', '(100,"Main2") - 0.205188141', '(90,"Main2") - 0.205188141', '(3,"Main2") - 0.205188141', '(87,"Main2") - 0.205188141', '(101,"Main2") - 0.205188141', '(86,"Main2") - 0.205188141', '(31,"Main2") - 0.205188141', '(96,"Main2") - 0.205188141', '(1,"Main2") - 0.205188141', '(89,"Main2") - 0.205188141', '(4,"Main2") - 0.205188141', '(34,"Main2") - 0.205188141', '(38,"Main2") - 0.205188141', '(94,"Main2") - 0.205188141', '(95,"Main2") - 0.205188141', '(36,"Main2") - 0.205188141', '(32,"Main2") - 0.205188141', '(37,"Main2") - 0.205188141', '(91,"Main2") - 0.205188141', '(98,"Main2") - 0.205188141', '(88,"Main2") - 0.205188141', '(29,"Main2") - 0.205188141', '(93,"Main2") - 0.205188141', '(35,"Main2") - 0.205188141', '(99,"Main2") - 0.205188141', '(0,"Main2") - 0.205188141', '(17,"Main2") - 0.233049511', '(19,"Main2") - 0.233049511', '(27,"Main2") - 0.233049511', '(28,"Main2") - 0.233049511', '(10,"Main2") - 0.233049511', '(97,"Main2") - 0.233049511', '(6,"Main2") - 0.233049511', '(8,"Main2") - 0.233049511', '(18,"Main2") - 0.233049511', '(33,"Main2") - 0.233049511', '(11,"Main2") - 0.233049511', '(2,"Main2") - 0.244687236', '(5,"Main2") - 0.244687236', '(14,"Main2") - 0.244687236', '(13,"Main2") - 0.244687236', '(9,"Main2") - 0.244687236', '(7,"Main2") - 0.244687236', '(30,"Main2") - 0.300448881', '(15,"Main2") - 0.307697455', '(12,"Main2") - 0.317845023']
Red Rules #: 19752
SMT Solving time: 0.210028748
Gen Solving time: 0.215357514
SMT Solver calls: 101
General Solver calls: 443
# nrpcs = [0, 0, 2, 4, 1, 0, 1, 3, 2, 4, 4, 1, 3, 3, 0, 3, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 2, 2, 3]
# post call args = 4
# func args = 30
# timeouts = 2
# branches = 7


Graph latex for: cryptarithm1: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(cryptarithm1)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 27) (0.23, 17) (0.27, 2) (0.3, 1)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.21, 27) (0.23, 11) (0.24, 6) (0.3, 1) (0.31, 1) (0.32, 1)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


cse
Baseline:
hpc_exp = [('CallForHPC', '90', '90', '99', '0', '16'), ('Main2', '28', '108', '381', '9', '17'), ('StateMonad', '34', '36', '105', '1', '10')]
calculate hpc converage
[('CallForHPC', 90, 90, 99, '0', '16'), ('Main2', 28, 108, 381, '9', '17'), ('StateMonad', 34, 36, 105, '1', '10')]
[('Main2', 28, 108, 381, '9', '17'), ('StateMonad', 34, 36, 105, '1', '10')]
[('9', '17'), ('1', '10')]
Last time is: 0.416420586
hpc reached = 29.6
g2 reached = 174
total = 243
% reached = 71.6
last time = 0.416420586
all_times = ['(385,"Main2") - 0.203145585', '(388,"Main2") - 0.203145585', '(389,"Main2") - 0.203145585', '(386,"Main2") - 0.203145585', '(390,"Main2") - 0.203145585', '(384,"Main2") - 0.203145585', '(368,"Main2") - 0.234453375', '(247,"Main2") - 0.234453375', '(14,"StateMonad") - 0.234453375', '(10,"StateMonad") - 0.234453375', '(362,"Main2") - 0.234453375', '(87,"Main2") - 0.234453375', '(64,"StateMonad") - 0.234453375', '(17,"Main2") - 0.234453375', '(363,"Main2") - 0.234453375', '(219,"Main2") - 0.234453375', '(28,"StateMonad") - 0.234453375', '(359,"Main2") - 0.234453375', '(7,"StateMonad") - 0.234453375', '(343,"Main2") - 0.234453375', '(223,"Main2") - 0.234453375', '(245,"Main2") - 0.234453375', '(383,"Main2") - 0.234453375', '(86,"Main2") - 0.234453375', '(354,"Main2") - 0.234453375', '(376,"Main2") - 0.234453375', '(380,"Main2") - 0.234453375', '(270,"Main2") - 0.234453375', '(14,"Main2") - 0.234453375', '(81,"StateMonad") - 0.234453375', '(46,"StateMonad") - 0.234453375', '(251,"Main2") - 0.234453375', '(377,"Main2") - 0.234453375', '(346,"Main2") - 0.234453375', '(13,"Main2") - 0.234453375', '(260,"Main2") - 0.234453375', '(355,"Main2") - 0.234453375', '(360,"Main2") - 0.234453375', '(344,"Main2") - 0.234453375', '(358,"Main2") - 0.234453375', '(367,"Main2") - 0.234453375', '(63,"StateMonad") - 0.234453375', '(239,"Main2") - 0.234453375', '(266,"Main2") - 0.234453375', '(66,"StateMonad") - 0.234453375', '(49,"StateMonad") - 0.234453375', '(366,"Main2") - 0.234453375', '(243,"Main2") - 0.234453375', '(369,"Main2") - 0.234453375', '(238,"Main2") - 0.234453375', '(361,"Main2") - 0.234453375', '(221,"Main2") - 0.234453375', '(268,"Main2") - 0.234453375', '(29,"StateMonad") - 0.234453375', '(62,"StateMonad") - 0.234453375', '(225,"Main2") - 0.234453375', '(387,"Main2") - 0.234453375', '(374,"Main2") - 0.234453375', '(224,"Main2") - 0.234453375', '(264,"Main2") - 0.234453375', '(15,"Main2") - 0.234453375', '(348,"Main2") - 0.234453375', '(350,"Main2") - 0.234453375', '(13,"StateMonad") - 0.234453375', '(12,"Main2") - 0.234453375', '(226,"Main2") - 0.234453375', '(381,"Main2") - 0.234453375', '(249,"Main2") - 0.234453375', '(347,"Main2") - 0.234453375', '(8,"StateMonad") - 0.234453375', '(241,"Main2") - 0.234453375', '(27,"StateMonad") - 0.234453375', '(9,"StateMonad") - 0.234453375', '(365,"Main2") - 0.234453375', '(48,"StateMonad") - 0.234453375', '(67,"StateMonad") - 0.234453375', '(246,"Main2") - 0.234453375', '(267,"Main2") - 0.234453375', '(269,"Main2") - 0.234453375', '(45,"StateMonad") - 0.234453375', '(44,"StateMonad") - 0.234453375', '(252,"Main2") - 0.234453375', '(353,"Main2") - 0.234453375', '(373,"Main2") - 0.234453375', '(364,"Main2") - 0.234453375', '(26,"StateMonad") - 0.234453375', '(378,"Main2") - 0.234453375', '(351,"Main2") - 0.234453375', '(65,"StateMonad") - 0.234453375', '(352,"Main2") - 0.234453375', '(240,"Main2") - 0.234453375', '(371,"Main2") - 0.234453375', '(372,"Main2") - 0.234453375', '(248,"Main2") - 0.234453375', '(379,"Main2") - 0.234453375', '(50,"StateMonad") - 0.234453375', '(370,"Main2") - 0.234453375', '(261,"Main2") - 0.234453375', '(262,"Main2") - 0.234453375', '(16,"Main2") - 0.234453375', '(357,"Main2") - 0.234453375', '(220,"Main2") - 0.234453375', '(250,"Main2") - 0.234453375', '(80,"Main2") - 0.234453375', '(231,"Main2") - 0.381112797', '(349,"Main2") - 0.381112797', '(75,"StateMonad") - 0.381112797', '(79,"StateMonad") - 0.381112797', '(215,"Main2") - 0.381112797', '(80,"StateMonad") - 0.381112797', '(356,"Main2") - 0.381112797', '(256,"Main2") - 0.381112797', '(382,"Main2") - 0.381112797', '(244,"Main2") - 0.381112797', '(11,"StateMonad") - 0.381112797', '(214,"Main2") - 0.381112797', '(234,"Main2") - 0.381112797', '(77,"StateMonad") - 0.381112797', '(74,"StateMonad") - 0.381112797', '(375,"Main2") - 0.381112797', '(230,"Main2") - 0.381112797', '(61,"StateMonad") - 0.381112797', '(218,"Main2") - 0.381112797', '(211,"Main2") - 0.381112797', '(258,"Main2") - 0.381112797', '(242,"Main2") - 0.381112797', '(78,"StateMonad") - 0.381112797', '(209,"Main2") - 0.381112797', '(76,"StateMonad") - 0.381112797', '(34,"Main2") - 0.381112797', '(265,"Main2") - 0.381112797', '(38,"Main2") - 0.381112797', '(6,"StateMonad") - 0.381112797', '(232,"Main2") - 0.381112797', '(257,"Main2") - 0.381112797', '(222,"Main2") - 0.381112797', '(71,"StateMonad") - 0.381112797', '(36,"Main2") - 0.381112797', '(39,"Main2") - 0.381112797', '(5,"StateMonad") - 0.381112797', '(69,"StateMonad") - 0.381112797', '(217,"Main2") - 0.381112797', '(263,"Main2") - 0.381112797', '(70,"StateMonad") - 0.381112797', '(229,"Main2") - 0.381112797', '(227,"Main2") - 0.381112797', '(32,"Main2") - 0.381112797', '(37,"Main2") - 0.381112797', '(47,"StateMonad") - 0.381112797', '(12,"StateMonad") - 0.381112797', '(228,"Main2") - 0.381112797', '(253,"Main2") - 0.381112797', '(208,"Main2") - 0.381112797', '(233,"Main2") - 0.381112797', '(40,"Main2") - 0.381112797', '(259,"Main2") - 0.381112797', '(236,"Main2") - 0.381112797', '(212,"Main2") - 0.381112797', '(73,"StateMonad") - 0.381112797', '(81,"Main2") - 0.381112797', '(41,"Main2") - 0.381112797', '(216,"Main2") - 0.381112797', '(35,"Main2") - 0.381112797', '(33,"Main2") - 0.381112797', '(68,"StateMonad") - 0.381112797', '(72,"StateMonad") - 0.381112797', '(342,"Main2") - 0.416420586', '(255,"Main2") - 0.416420586', '(345,"Main2") - 0.416420586', '(237,"Main2") - 0.416420586', '(341,"Main2") - 0.416420586', '(213,"Main2") - 0.416420586', '(254,"Main2") - 0.416420586', '(210,"Main2") - 0.416420586']
Red Rules #: 35876
SMT Solving time: 0.11421709
Gen Solving time: 0.115837857
SMT Solver calls: 52
General Solver calls: 96
# nrpcs = []
# post call args = 8
# func args = 0
# timeouts = 0
# branches = 37
NRPC:
hpc_exp = [('CallForHPC', '93', '78', '83', '0', '4'), ('Main2', '28', '108', '381', '9', '17'), ('StateMonad', '34', '36', '105', '1', '10')]
calculate hpc converage
[('CallForHPC', 93, 78, 83, '0', '4'), ('Main2', 28, 108, 381, '9', '17'), ('StateMonad', 34, 36, 105, '1', '10')]
[('Main2', 28, 108, 381, '9', '17'), ('StateMonad', 34, 36, 105, '1', '10')]
[('9', '17'), ('1', '10')]
Last time is: 0.337323405
hpc reached = 29.6
g2 reached = 174
total = 243
% reached = 71.6
last time = 0.337323405
all_times = ['(385,"Main2") - 0.203302649', '(388,"Main2") - 0.203302649', '(389,"Main2") - 0.203302649', '(386,"Main2") - 0.203302649', '(390,"Main2") - 0.203302649', '(384,"Main2") - 0.203302649', '(368,"Main2") - 0.237842872', '(247,"Main2") - 0.237842872', '(14,"StateMonad") - 0.237842872', '(10,"StateMonad") - 0.237842872', '(362,"Main2") - 0.237842872', '(87,"Main2") - 0.237842872', '(64,"StateMonad") - 0.237842872', '(17,"Main2") - 0.237842872', '(363,"Main2") - 0.237842872', '(219,"Main2") - 0.237842872', '(28,"StateMonad") - 0.237842872', '(359,"Main2") - 0.237842872', '(7,"StateMonad") - 0.237842872', '(343,"Main2") - 0.237842872', '(223,"Main2") - 0.237842872', '(245,"Main2") - 0.237842872', '(383,"Main2") - 0.237842872', '(86,"Main2") - 0.237842872', '(354,"Main2") - 0.237842872', '(376,"Main2") - 0.237842872', '(380,"Main2") - 0.237842872', '(270,"Main2") - 0.237842872', '(14,"Main2") - 0.237842872', '(81,"StateMonad") - 0.237842872', '(46,"StateMonad") - 0.237842872', '(251,"Main2") - 0.237842872', '(377,"Main2") - 0.237842872', '(346,"Main2") - 0.237842872', '(13,"Main2") - 0.237842872', '(260,"Main2") - 0.237842872', '(355,"Main2") - 0.237842872', '(360,"Main2") - 0.237842872', '(344,"Main2") - 0.237842872', '(358,"Main2") - 0.237842872', '(367,"Main2") - 0.237842872', '(63,"StateMonad") - 0.237842872', '(239,"Main2") - 0.237842872', '(266,"Main2") - 0.237842872', '(66,"StateMonad") - 0.237842872', '(49,"StateMonad") - 0.237842872', '(366,"Main2") - 0.237842872', '(243,"Main2") - 0.237842872', '(369,"Main2") - 0.237842872', '(238,"Main2") - 0.237842872', '(361,"Main2") - 0.237842872', '(221,"Main2") - 0.237842872', '(268,"Main2") - 0.237842872', '(29,"StateMonad") - 0.237842872', '(62,"StateMonad") - 0.237842872', '(225,"Main2") - 0.237842872', '(387,"Main2") - 0.237842872', '(374,"Main2") - 0.237842872', '(224,"Main2") - 0.237842872', '(264,"Main2") - 0.237842872', '(15,"Main2") - 0.237842872', '(348,"Main2") - 0.237842872', '(350,"Main2") - 0.237842872', '(13,"StateMonad") - 0.237842872', '(12,"Main2") - 0.237842872', '(226,"Main2") - 0.237842872', '(381,"Main2") - 0.237842872', '(249,"Main2") - 0.237842872', '(347,"Main2") - 0.237842872', '(8,"StateMonad") - 0.237842872', '(241,"Main2") - 0.237842872', '(27,"StateMonad") - 0.237842872', '(9,"StateMonad") - 0.237842872', '(365,"Main2") - 0.237842872', '(48,"StateMonad") - 0.237842872', '(67,"StateMonad") - 0.237842872', '(246,"Main2") - 0.237842872', '(267,"Main2") - 0.237842872', '(269,"Main2") - 0.237842872', '(45,"StateMonad") - 0.237842872', '(44,"StateMonad") - 0.237842872', '(252,"Main2") - 0.237842872', '(353,"Main2") - 0.237842872', '(373,"Main2") - 0.237842872', '(364,"Main2") - 0.237842872', '(26,"StateMonad") - 0.237842872', '(378,"Main2") - 0.237842872', '(351,"Main2") - 0.237842872', '(65,"StateMonad") - 0.237842872', '(352,"Main2") - 0.237842872', '(240,"Main2") - 0.237842872', '(371,"Main2") - 0.237842872', '(372,"Main2") - 0.237842872', '(248,"Main2") - 0.237842872', '(379,"Main2") - 0.237842872', '(50,"StateMonad") - 0.237842872', '(370,"Main2") - 0.237842872', '(261,"Main2") - 0.237842872', '(262,"Main2") - 0.237842872', '(16,"Main2") - 0.237842872', '(357,"Main2") - 0.237842872', '(220,"Main2") - 0.237842872', '(250,"Main2") - 0.237842872', '(80,"Main2") - 0.237842872', '(231,"Main2") - 0.319492818', '(349,"Main2") - 0.319492818', '(75,"StateMonad") - 0.319492818', '(79,"StateMonad") - 0.319492818', '(215,"Main2") - 0.319492818', '(80,"StateMonad") - 0.319492818', '(356,"Main2") - 0.319492818', '(256,"Main2") - 0.319492818', '(382,"Main2") - 0.319492818', '(244,"Main2") - 0.319492818', '(11,"StateMonad") - 0.319492818', '(214,"Main2") - 0.319492818', '(234,"Main2") - 0.319492818', '(77,"StateMonad") - 0.319492818', '(74,"StateMonad") - 0.319492818', '(375,"Main2") - 0.319492818', '(230,"Main2") - 0.319492818', '(61,"StateMonad") - 0.319492818', '(218,"Main2") - 0.319492818', '(211,"Main2") - 0.319492818', '(258,"Main2") - 0.319492818', '(242,"Main2") - 0.319492818', '(78,"StateMonad") - 0.319492818', '(209,"Main2") - 0.319492818', '(76,"StateMonad") - 0.319492818', '(34,"Main2") - 0.319492818', '(265,"Main2") - 0.319492818', '(38,"Main2") - 0.319492818', '(6,"StateMonad") - 0.319492818', '(232,"Main2") - 0.319492818', '(257,"Main2") - 0.319492818', '(222,"Main2") - 0.319492818', '(71,"StateMonad") - 0.319492818', '(36,"Main2") - 0.319492818', '(39,"Main2") - 0.319492818', '(5,"StateMonad") - 0.319492818', '(69,"StateMonad") - 0.319492818', '(217,"Main2") - 0.319492818', '(263,"Main2") - 0.319492818', '(70,"StateMonad") - 0.319492818', '(229,"Main2") - 0.319492818', '(227,"Main2") - 0.319492818', '(32,"Main2") - 0.319492818', '(37,"Main2") - 0.319492818', '(47,"StateMonad") - 0.319492818', '(12,"StateMonad") - 0.319492818', '(228,"Main2") - 0.319492818', '(253,"Main2") - 0.319492818', '(208,"Main2") - 0.319492818', '(233,"Main2") - 0.319492818', '(40,"Main2") - 0.319492818', '(259,"Main2") - 0.319492818', '(236,"Main2") - 0.319492818', '(212,"Main2") - 0.319492818', '(73,"StateMonad") - 0.319492818', '(81,"Main2") - 0.319492818', '(41,"Main2") - 0.319492818', '(216,"Main2") - 0.319492818', '(35,"Main2") - 0.319492818', '(33,"Main2") - 0.319492818', '(68,"StateMonad") - 0.319492818', '(72,"StateMonad") - 0.319492818', '(342,"Main2") - 0.329231833', '(345,"Main2") - 0.329231833', '(341,"Main2") - 0.329231833', '(255,"Main2") - 0.337323405', '(237,"Main2") - 0.337323405', '(213,"Main2") - 0.337323405', '(254,"Main2") - 0.337323405', '(210,"Main2") - 0.337323405']
Red Rules #: 31784
SMT Solving time: 0.094229597
Gen Solving time: 0.09715075
SMT Solver calls: 43
General Solver calls: 220
# nrpcs = [0, 0, 1, 2, 1, 0, 1, 2, 2]
# post call args = 3
# func args = 6
# timeouts = 0
# branches = 37


Graph latex for: cse: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(cse)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 6) (0.23, 98) (0.38, 62) (0.42, 8)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.2, 6) (0.24, 98) (0.32, 62) (0.33, 3) (0.34, 5)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


eliza
Baseline:
hpc_exp = [('CallForHPC', '76', '98', '128', '0', '0'), ('Main2', '6', '33', '524', '10', '18')]
calculate hpc converage
[('CallForHPC', 76, 98, 128, '0', '0'), ('Main2', 6, 33, 524, '10', '18')]
[('Main2', 6, 33, 524, '10', '18')]
[('10', '18')]
Last time is: 0.451748102
hpc reached = 6.3
g2 reached = 37
total = 599
% reached = 6.2
last time = 0.451748102
all_times = ['(589,"Main2") - 0.232059518', '(539,"Main2") - 0.232059518', '(591,"Main2") - 0.232059518', '(597,"Main2") - 0.232059518', '(590,"Main2") - 0.232059518', '(585,"Main2") - 0.232059518', '(595,"Main2") - 0.232059518', '(599,"Main2") - 0.232059518', '(602,"Main2") - 0.232059518', '(598,"Main2") - 0.232059518', '(601,"Main2") - 0.232059518', '(594,"Main2") - 0.232059518', '(515,"Main2") - 0.232059518', '(596,"Main2") - 0.232059518', '(593,"Main2") - 0.232059518', '(600,"Main2") - 0.232059518', '(592,"Main2") - 0.232059518', '(577,"Main2") - 0.232059518', '(581,"Main2") - 0.232059518', '(587,"Main2") - 0.387684772', '(584,"Main2") - 0.387684772', '(569,"Main2") - 0.387684772', '(564,"Main2") - 0.387684772', '(586,"Main2") - 0.387684772', '(570,"Main2") - 0.387684772', '(582,"Main2") - 0.387684772', '(571,"Main2") - 0.387684772', '(565,"Main2") - 0.387684772', '(583,"Main2") - 0.387684772', '(588,"Main2") - 0.387684772', '(540,"Main2") - 0.451748102', '(567,"Main2") - 0.451748102', '(545,"Main2") - 0.451748102', '(568,"Main2") - 0.451748102', '(566,"Main2") - 0.451748102', '(541,"Main2") - 0.451748102', '(546,"Main2") - 0.451748102']
Red Rules #: 19114
SMT Solving time: 0.291495569
Gen Solving time: 0.297200018
SMT Solver calls: 177
General Solver calls: 181
# nrpcs = []
# post call args = 14
# func args = 0
# timeouts = 0
# branches = 28
NRPC:
hpc_exp = [('CallForHPC', '76', '89', '117', '0', '0'), ('Main2', '6', '33', '524', '10', '18')]
calculate hpc converage
[('CallForHPC', 76, 89, 117, '0', '0'), ('Main2', 6, 33, 524, '10', '18')]
[('Main2', 6, 33, 524, '10', '18')]
[('10', '18')]
Last time is: 0.467843732
hpc reached = 6.3
g2 reached = 37
total = 599
% reached = 6.2
last time = 0.467843732
all_times = ['(589,"Main2") - 0.234260586', '(539,"Main2") - 0.234260586', '(591,"Main2") - 0.234260586', '(597,"Main2") - 0.234260586', '(590,"Main2") - 0.234260586', '(585,"Main2") - 0.234260586', '(595,"Main2") - 0.234260586', '(599,"Main2") - 0.234260586', '(602,"Main2") - 0.234260586', '(598,"Main2") - 0.234260586', '(601,"Main2") - 0.234260586', '(594,"Main2") - 0.234260586', '(515,"Main2") - 0.234260586', '(596,"Main2") - 0.234260586', '(593,"Main2") - 0.234260586', '(600,"Main2") - 0.234260586', '(592,"Main2") - 0.234260586', '(577,"Main2") - 0.234260586', '(581,"Main2") - 0.234260586', '(587,"Main2") - 0.402971277', '(584,"Main2") - 0.402971277', '(569,"Main2") - 0.402971277', '(564,"Main2") - 0.402971277', '(586,"Main2") - 0.402971277', '(570,"Main2") - 0.402971277', '(582,"Main2") - 0.402971277', '(571,"Main2") - 0.402971277', '(565,"Main2") - 0.402971277', '(583,"Main2") - 0.402971277', '(588,"Main2") - 0.402971277', '(540,"Main2") - 0.467843732', '(567,"Main2") - 0.467843732', '(545,"Main2") - 0.467843732', '(568,"Main2") - 0.467843732', '(566,"Main2") - 0.467843732', '(541,"Main2") - 0.467843732', '(546,"Main2") - 0.467843732']
Red Rules #: 17634
SMT Solving time: 0.289647201
Gen Solving time: 0.294948772
SMT Solver calls: 165
General Solver calls: 170
# nrpcs = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# post call args = 13
# func args = 0
# timeouts = 0
# branches = 28


Graph latex for: eliza: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(eliza)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.23, 19) (0.39, 11) (0.45, 7)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.23, 19) (0.4, 11) (0.47, 7)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


expert
Baseline:
hpc_exp = [('CallForHPC', '65', '48', '73', '0', '0'), ('Knowledge', '25', '37', '145', '8', '13'), ('Main2', '7', '12', '154', '3', '11'), ('Match', '0', '0', '92', '8', '18'), ('Result', '0', '0', '14', '0', '4'), ('Search', '0', '0', '116', '3', '10'), ('Table', '0', '0', '310', '21', '39')]
calculate hpc converage
[('CallForHPC', 65, 48, 73, '0', '0'), ('Knowledge', 25, 37, 145, '8', '13'), ('Main2', 7, 12, 154, '3', '11'), ('Match', 0, 0, 92, '8', '18'), ('Result', 0, 0, 14, '0', '4'), ('Search', 0, 0, 116, '3', '10'), ('Table', 0, 0, 310, '21', '39')]
[('Knowledge', 25, 37, 145, '8', '13'), ('Main2', 7, 12, 154, '3', '11'), ('Match', 0, 0, 92, '8', '18'), ('Result', 0, 0, 14, '0', '4'), ('Search', 0, 0, 116, '3', '10'), ('Table', 0, 0, 310, '21', '39')]
[('8', '13'), ('3', '11'), ('8', '18'), ('0', '4'), ('3', '10'), ('21', '39')]
Last time is: 0.249905719
hpc reached = 5.9
g2 reached = 43
total = 889
% reached = 4.8
last time = 0.249905719
all_times = ['(159,"Main2") - 0.202559904', '(170,"Main2") - 0.202559904', '(93,"Knowledge") - 0.202559904', '(114,"Knowledge") - 0.202559904', '(172,"Main2") - 0.202559904', '(160,"Main2") - 0.202559904', '(167,"Knowledge") - 0.202559904', '(168,"Main2") - 0.202559904', '(131,"Main2") - 0.202559904', '(90,"Knowledge") - 0.202559904', '(169,"Main2") - 0.202559904', '(158,"Main2") - 0.202559904', '(132,"Main2") - 0.202559904', '(133,"Main2") - 0.202559904', '(134,"Main2") - 0.202559904', '(175,"Main2") - 0.202559904', '(174,"Main2") - 0.202559904', '(130,"Main2") - 0.202559904', '(135,"Main2") - 0.202559904', '(25,"Knowledge") - 0.249905719', '(102,"Knowledge") - 0.249905719', '(103,"Knowledge") - 0.249905719', '(92,"Knowledge") - 0.249905719', '(100,"Knowledge") - 0.249905719', '(157,"Knowledge") - 0.249905719', '(84,"Knowledge") - 0.249905719', '(33,"Knowledge") - 0.249905719', '(156,"Knowledge") - 0.249905719', '(113,"Knowledge") - 0.249905719', '(109,"Knowledge") - 0.249905719', '(23,"Knowledge") - 0.249905719', '(83,"Knowledge") - 0.249905719', '(87,"Knowledge") - 0.249905719', '(28,"Knowledge") - 0.249905719', '(111,"Knowledge") - 0.249905719', '(112,"Knowledge") - 0.249905719', '(65,"Knowledge") - 0.249905719', '(27,"Knowledge") - 0.249905719', '(166,"Knowledge") - 0.249905719', '(88,"Knowledge") - 0.249905719', '(31,"Knowledge") - 0.249905719', '(24,"Knowledge") - 0.249905719', '(32,"Knowledge") - 0.249905719']
Red Rules #: 10199
SMT Solving time: 0.510174549
Gen Solving time: 0.51247099
SMT Solver calls: 76
General Solver calls: 80
# nrpcs = []
# post call args = 8
# func args = 0
# timeouts = 0
# branches = 138
NRPC:
hpc_exp = [('CallForHPC', '65', '30', '46', '0', '0'), ('Knowledge', '25', '37', '145', '8', '13'), ('Main2', '7', '12', '154', '3', '11'), ('Match', '0', '0', '92', '8', '18'), ('Result', '0', '0', '14', '0', '4'), ('Search', '0', '0', '116', '3', '10'), ('Table', '0', '0', '310', '21', '39')]
calculate hpc converage
[('CallForHPC', 65, 30, 46, '0', '0'), ('Knowledge', 25, 37, 145, '8', '13'), ('Main2', 7, 12, 154, '3', '11'), ('Match', 0, 0, 92, '8', '18'), ('Result', 0, 0, 14, '0', '4'), ('Search', 0, 0, 116, '3', '10'), ('Table', 0, 0, 310, '21', '39')]
[('Knowledge', 25, 37, 145, '8', '13'), ('Main2', 7, 12, 154, '3', '11'), ('Match', 0, 0, 92, '8', '18'), ('Result', 0, 0, 14, '0', '4'), ('Search', 0, 0, 116, '3', '10'), ('Table', 0, 0, 310, '21', '39')]
[('8', '13'), ('3', '11'), ('8', '18'), ('0', '4'), ('3', '10'), ('21', '39')]
Last time is: 0.622774874
hpc reached = 5.9
g2 reached = 43
total = 889
% reached = 4.8
last time = 0.622774874
all_times = ['(159,"Main2") - 0.572921392', '(170,"Main2") - 0.572921392', '(93,"Knowledge") - 0.572921392', '(114,"Knowledge") - 0.572921392', '(172,"Main2") - 0.572921392', '(160,"Main2") - 0.572921392', '(167,"Knowledge") - 0.572921392', '(168,"Main2") - 0.572921392', '(131,"Main2") - 0.572921392', '(90,"Knowledge") - 0.572921392', '(169,"Main2") - 0.572921392', '(158,"Main2") - 0.572921392', '(132,"Main2") - 0.572921392', '(133,"Main2") - 0.572921392', '(134,"Main2") - 0.572921392', '(175,"Main2") - 0.572921392', '(174,"Main2") - 0.572921392', '(130,"Main2") - 0.572921392', '(135,"Main2") - 0.572921392', '(25,"Knowledge") - 0.622774874', '(102,"Knowledge") - 0.622774874', '(103,"Knowledge") - 0.622774874', '(92,"Knowledge") - 0.622774874', '(100,"Knowledge") - 0.622774874', '(157,"Knowledge") - 0.622774874', '(84,"Knowledge") - 0.622774874', '(33,"Knowledge") - 0.622774874', '(156,"Knowledge") - 0.622774874', '(113,"Knowledge") - 0.622774874', '(109,"Knowledge") - 0.622774874', '(23,"Knowledge") - 0.622774874', '(83,"Knowledge") - 0.622774874', '(87,"Knowledge") - 0.622774874', '(28,"Knowledge") - 0.622774874', '(111,"Knowledge") - 0.622774874', '(112,"Knowledge") - 0.622774874', '(65,"Knowledge") - 0.622774874', '(27,"Knowledge") - 0.622774874', '(166,"Knowledge") - 0.622774874', '(88,"Knowledge") - 0.622774874', '(31,"Knowledge") - 0.622774874', '(24,"Knowledge") - 0.622774874', '(32,"Knowledge") - 0.622774874']
Red Rules #: 6332
SMT Solving time: 0.249758998
Gen Solving time: 0.251129782
SMT Solver calls: 47
General Solver calls: 51
# nrpcs = [0, 0, 0, 0, 0]
# post call args = 5
# func args = 0
# timeouts = 0
# branches = 138


Graph latex for: expert: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(expert)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 19) (0.25, 24)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.57, 19) (0.62, 24)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


gcd
Baseline:
hpc_exp = [('CallForHPC', '88', '71', '80', '0', '8'), ('Main2', '72', '88', '121', '3', '10')]
calculate hpc converage
[('CallForHPC', 88, 71, 80, '0', '8'), ('Main2', 72, 88, 121, '3', '10')]
[('Main2', 72, 88, 121, '3', '10')]
[('3', '10')]
Last time is: 0.372114921
hpc reached = 72.7
g2 reached = 103
total = 123
% reached = 83.7
last time = 0.372114921
all_times = ['(138,"Main2") - 0.195786548', '(87,"Main2") - 0.195786548', '(111,"Main2") - 0.195786548', '(101,"Main2") - 0.195786548', '(86,"Main2") - 0.195786548', '(85,"Main2") - 0.195786548', '(96,"Main2") - 0.195786548', '(112,"Main2") - 0.195786548', '(137,"Main2") - 0.195786548', '(89,"Main2") - 0.195786548', '(110,"Main2") - 0.195786548', '(84,"Main2") - 0.195786548', '(136,"Main2") - 0.195786548', '(77,"Main2") - 0.195786548', '(78,"Main2") - 0.195786548', '(133,"Main2") - 0.195786548', '(82,"Main2") - 0.195786548', '(83,"Main2") - 0.195786548', '(134,"Main2") - 0.195786548', '(88,"Main2") - 0.195786548', '(135,"Main2") - 0.195786548', '(81,"Main2") - 0.195786548', '(80,"Main2") - 0.195786548', '(102,"Main2") - 0.195786548', '(92,"Main2") - 0.299904675', '(100,"Main2") - 0.299904675', '(90,"Main2") - 0.299904675', '(117,"Main2") - 0.299904675', '(119,"Main2") - 0.299904675', '(116,"Main2") - 0.299904675', '(30,"Main2") - 0.299904675', '(126,"Main2") - 0.299904675', '(109,"Main2") - 0.299904675', '(25,"Main2") - 0.299904675', '(115,"Main2") - 0.299904675', '(17,"Main2") - 0.299904675', '(5,"Main2") - 0.299904675', '(22,"Main2") - 0.299904675', '(31,"Main2") - 0.299904675', '(129,"Main2") - 0.299904675', '(14,"Main2") - 0.299904675', '(20,"Main2") - 0.299904675', '(118,"Main2") - 0.299904675', '(113,"Main2") - 0.299904675', '(13,"Main2") - 0.299904675', '(44,"Main2") - 0.299904675', '(108,"Main2") - 0.299904675', '(123,"Main2") - 0.299904675', '(128,"Main2") - 0.299904675', '(9,"Main2") - 0.299904675', '(105,"Main2") - 0.299904675', '(19,"Main2") - 0.299904675', '(27,"Main2") - 0.299904675', '(4,"Main2") - 0.299904675', '(34,"Main2") - 0.299904675', '(38,"Main2") - 0.299904675', '(94,"Main2") - 0.299904675', '(95,"Main2") - 0.299904675', '(26,"Main2") - 0.299904675', '(131,"Main2") - 0.299904675', '(28,"Main2") - 0.299904675', '(15,"Main2") - 0.299904675', '(107,"Main2") - 0.299904675', '(36,"Main2") - 0.299904675', '(12,"Main2") - 0.299904675', '(39,"Main2") - 0.299904675', '(42,"Main2") - 0.299904675', '(79,"Main2") - 0.299904675', '(10,"Main2") - 0.299904675', '(97,"Main2") - 0.299904675', '(106,"Main2") - 0.299904675', '(132,"Main2") - 0.299904675', '(24,"Main2") - 0.299904675', '(32,"Main2") - 0.299904675', '(6,"Main2") - 0.299904675', '(37,"Main2") - 0.299904675', '(114,"Main2") - 0.299904675', '(91,"Main2") - 0.299904675', '(98,"Main2") - 0.299904675', '(45,"Main2") - 0.299904675', '(40,"Main2") - 0.299904675', '(23,"Main2") - 0.299904675', '(121,"Main2") - 0.299904675', '(125,"Main2") - 0.299904675', '(21,"Main2") - 0.299904675', '(29,"Main2") - 0.299904675', '(8,"Main2") - 0.299904675', '(18,"Main2") - 0.299904675', '(130,"Main2") - 0.299904675', '(93,"Main2") - 0.299904675', '(62,"Main2") - 0.299904675', '(41,"Main2") - 0.299904675', '(16,"Main2") - 0.299904675', '(35,"Main2") - 0.299904675', '(33,"Main2") - 0.299904675', '(99,"Main2") - 0.299904675', '(7,"Main2") - 0.299904675', '(43,"Main2") - 0.299904675', '(11,"Main2") - 0.299904675', '(122,"Main2") - 0.341423276', '(124,"Main2") - 0.346841565', '(127,"Main2") - 0.346841565', '(120,"Main2") - 0.372114921']
Red Rules #: 37172
SMT Solving time: 0.101968954
Gen Solving time: 0.103233629
SMT Solver calls: 42
General Solver calls: 73
# nrpcs = []
# post call args = 6
# func args = 0
# timeouts = 0
# branches = 13
NRPC:
hpc_exp = [('CallForHPC', '95', '137', '144', '0', '8'), ('Main2', '82', '100', '121', '3', '10')]
calculate hpc converage
[('CallForHPC', 95, 137, 144, '0', '8'), ('Main2', 82, 100, 121, '3', '10')]
[('Main2', 82, 100, 121, '3', '10')]
[('3', '10')]
Last time is: 0.717307819
hpc reached = 82.6
g2 reached = 112
total = 123
% reached = 91.1
last time = 0.717307819
all_times = ['(138,"Main2") - 0.198049937', '(87,"Main2") - 0.198049937', '(111,"Main2") - 0.198049937', '(101,"Main2") - 0.198049937', '(86,"Main2") - 0.198049937', '(85,"Main2") - 0.198049937', '(96,"Main2") - 0.198049937', '(112,"Main2") - 0.198049937', '(137,"Main2") - 0.198049937', '(89,"Main2") - 0.198049937', '(110,"Main2") - 0.198049937', '(84,"Main2") - 0.198049937', '(136,"Main2") - 0.198049937', '(77,"Main2") - 0.198049937', '(78,"Main2") - 0.198049937', '(133,"Main2") - 0.198049937', '(82,"Main2") - 0.198049937', '(83,"Main2") - 0.198049937', '(134,"Main2") - 0.198049937', '(88,"Main2") - 0.198049937', '(135,"Main2") - 0.198049937', '(81,"Main2") - 0.198049937', '(80,"Main2") - 0.198049937', '(102,"Main2") - 0.198049937', '(92,"Main2") - 0.278677785', '(100,"Main2") - 0.278677785', '(90,"Main2") - 0.278677785', '(30,"Main2") - 0.278677785', '(126,"Main2") - 0.278677785', '(109,"Main2") - 0.278677785', '(5,"Main2") - 0.278677785', '(31,"Main2") - 0.278677785', '(14,"Main2") - 0.278677785', '(13,"Main2") - 0.278677785', '(44,"Main2") - 0.278677785', '(108,"Main2") - 0.278677785', '(123,"Main2") - 0.278677785', '(105,"Main2") - 0.278677785', '(19,"Main2") - 0.278677785', '(4,"Main2") - 0.278677785', '(34,"Main2") - 0.278677785', '(38,"Main2") - 0.278677785', '(94,"Main2") - 0.278677785', '(95,"Main2") - 0.278677785', '(131,"Main2") - 0.278677785', '(15,"Main2") - 0.278677785', '(107,"Main2") - 0.278677785', '(12,"Main2") - 0.278677785', '(39,"Main2") - 0.278677785', '(42,"Main2") - 0.278677785', '(79,"Main2") - 0.278677785', '(97,"Main2") - 0.278677785', '(106,"Main2") - 0.278677785', '(132,"Main2") - 0.278677785', '(32,"Main2") - 0.278677785', '(6,"Main2") - 0.278677785', '(91,"Main2") - 0.278677785', '(98,"Main2") - 0.278677785', '(45,"Main2") - 0.278677785', '(121,"Main2") - 0.278677785', '(8,"Main2") - 0.278677785', '(18,"Main2") - 0.278677785', '(93,"Main2") - 0.278677785', '(62,"Main2") - 0.278677785', '(35,"Main2") - 0.278677785', '(33,"Main2") - 0.278677785', '(99,"Main2") - 0.278677785', '(7,"Main2") - 0.278677785', '(43,"Main2") - 0.278677785', '(117,"Main2") - 0.291303760', '(119,"Main2") - 0.291303760', '(116,"Main2") - 0.291303760', '(25,"Main2") - 0.291303760', '(115,"Main2") - 0.291303760', '(17,"Main2") - 0.291303760', '(22,"Main2") - 0.291303760', '(129,"Main2") - 0.291303760', '(20,"Main2") - 0.291303760', '(118,"Main2") - 0.291303760', '(113,"Main2") - 0.291303760', '(128,"Main2") - 0.291303760', '(9,"Main2") - 0.291303760', '(27,"Main2") - 0.291303760', '(26,"Main2") - 0.291303760', '(28,"Main2") - 0.291303760', '(36,"Main2") - 0.291303760', '(10,"Main2") - 0.291303760', '(24,"Main2") - 0.291303760', '(37,"Main2") - 0.291303760', '(114,"Main2") - 0.291303760', '(40,"Main2") - 0.291303760', '(23,"Main2") - 0.291303760', '(125,"Main2") - 0.291303760', '(21,"Main2") - 0.291303760', '(29,"Main2") - 0.291303760', '(130,"Main2") - 0.291303760', '(41,"Main2") - 0.291303760', '(16,"Main2") - 0.291303760', '(11,"Main2") - 0.291303760', '(122,"Main2") - 0.333410624', '(67,"Main2") - 0.350152907', '(63,"Main2") - 0.350152907', '(76,"Main2") - 0.350152907', '(124,"Main2") - 0.392736350', '(127,"Main2") - 0.392736350', '(120,"Main2") - 0.403905324', '(64,"Main2") - 0.466815985', '(73,"Main2") - 0.717307819', '(74,"Main2") - 0.717307819', '(66,"Main2") - 0.717307819', '(75,"Main2") - 0.717307819', '(72,"Main2") - 0.717307819']
Red Rules #: 32295
SMT Solving time: 0.08069702
Gen Solving time: 0.081898934
SMT Solver calls: 31
General Solver calls: 96
# nrpcs = [0, 1, 0, 2, 2, 1, 2, 1, 3, 2, 5, 6]
# post call args = 3
# func args = 9
# timeouts = 0
# branches = 13


Graph latex for: gcd: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(gcd)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 24) (0.3, 75) (0.34, 1) (0.35, 2) (0.37, 1)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.2, 24) (0.28, 45) (0.29, 30) (0.33, 1) (0.35, 3) (0.39, 2) (0.4, 1) (0.47, 1) (0.72, 5)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


integer
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '113', '0', '2')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 113, '0', '2')]
[('Main2', 0, 0, 113, '0', '2')]
[('0', '2')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 110
% reached = 0.0
last time = 
all_times = []
Red Rules #: 19032
SMT Solving time: 0.413288535
Gen Solving time: 0.419022439
SMT Solver calls: 212
General Solver calls: 247
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 2
NRPC:
hpc_exp = [('CallForHPC', '69', '487', '700', '0', '32'), ('Main2', '77', '88', '113', '0', '2')]
calculate hpc converage
[('CallForHPC', 69, 487, 700, '0', '32'), ('Main2', 77, 88, 113, '0', '2')]
[('Main2', 77, 88, 113, '0', '2')]
[('0', '2')]
Last time is: 0.914987523
hpc reached = 77.9
g2 reached = 84
total = 110
% reached = 76.4
last time = 0.914987523
all_times = ['(73,"Main2") - 0.320411421', '(100,"Main2") - 0.320411421', '(74,"Main2") - 0.320411421', '(2,"Main2") - 0.320411421', '(116,"Main2") - 0.320411421', '(68,"Main2") - 0.320411421', '(3,"Main2") - 0.320411421', '(30,"Main2") - 0.320411421', '(111,"Main2") - 0.320411421', '(25,"Main2") - 0.320411421', '(103,"Main2") - 0.320411421', '(115,"Main2") - 0.320411421', '(17,"Main2") - 0.320411421', '(5,"Main2") - 0.320411421', '(101,"Main2") - 0.320411421', '(22,"Main2") - 0.320411421', '(56,"Main2") - 0.320411421', '(55,"Main2") - 0.320411421', '(120,"Main2") - 0.320411421', '(31,"Main2") - 0.320411421', '(14,"Main2") - 0.320411421', '(20,"Main2") - 0.320411421', '(13,"Main2") - 0.320411421', '(53,"Main2") - 0.320411421', '(52,"Main2") - 0.320411421', '(9,"Main2") - 0.320411421', '(54,"Main2") - 0.320411421', '(105,"Main2") - 0.320411421', '(19,"Main2") - 0.320411421', '(57,"Main2") - 0.320411421', '(1,"Main2") - 0.320411421', '(4,"Main2") - 0.320411421', '(58,"Main2") - 0.320411421', '(28,"Main2") - 0.320411421', '(67,"Main2") - 0.320411421', '(15,"Main2") - 0.320411421', '(78,"Main2") - 0.320411421', '(107,"Main2") - 0.320411421', '(12,"Main2") - 0.320411421', '(72,"Main2") - 0.320411421', '(10,"Main2") - 0.320411421', '(106,"Main2") - 0.320411421', '(51,"Main2") - 0.320411421', '(24,"Main2") - 0.320411421', '(6,"Main2") - 0.320411421', '(114,"Main2") - 0.320411421', '(23,"Main2") - 0.320411421', '(121,"Main2") - 0.320411421', '(104,"Main2") - 0.320411421', '(21,"Main2") - 0.320411421', '(29,"Main2") - 0.320411421', '(8,"Main2") - 0.320411421', '(18,"Main2") - 0.320411421', '(70,"Main2") - 0.320411421', '(16,"Main2") - 0.320411421', '(7,"Main2") - 0.320411421', '(11,"Main2") - 0.320411421', '(102,"Main2") - 0.320411421', '(26,"Main2") - 0.332112819', '(27,"Main2") - 0.339658321', '(92,"Main2") - 0.914987523', '(48,"Main2") - 0.914987523', '(66,"Main2") - 0.914987523', '(60,"Main2") - 0.914987523', '(84,"Main2") - 0.914987523', '(34,"Main2") - 0.914987523', '(94,"Main2") - 0.914987523', '(50,"Main2") - 0.914987523', '(36,"Main2") - 0.914987523', '(32,"Main2") - 0.914987523', '(37,"Main2") - 0.914987523', '(49,"Main2") - 0.914987523', '(47,"Main2") - 0.914987523', '(98,"Main2") - 0.914987523', '(82,"Main2") - 0.914987523', '(83,"Main2") - 0.914987523', '(88,"Main2") - 0.914987523', '(61,"Main2") - 0.914987523', '(93,"Main2") - 0.914987523', '(62,"Main2") - 0.914987523', '(35,"Main2") - 0.914987523', '(33,"Main2") - 0.914987523', '(99,"Main2") - 0.914987523', '(0,"Main2") - 0.914987523']
Red Rules #: 15734
SMT Solving time: 0.396091811
Gen Solving time: 0.402851801
SMT Solver calls: 191
General Solver calls: 310
# nrpcs = [1, 2, 3, 3, 0, 1, 0, 1, 1, 5, 1, 0, 1, 0, 3, 1, 0, 1, 0, 1, 2, 2, 3, 0, 1, 0, 1, 3, 0]
# post call args = 1
# func args = 28
# timeouts = 7
# branches = 2


Graph latex for: integer: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(integer)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.32, 58) (0.33, 1) (0.34, 1) (0.91, 24)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


lcss
Baseline:
hpc_exp = [('CallForHPC', '51', '14', '27', '0', '0'), ('Main2', '6', '9', '134', '4', '14')]
calculate hpc converage
[('CallForHPC', 51, 14, 27, '0', '0'), ('Main2', 6, 9, 134, '4', '14')]
[('Main2', 6, 9, 134, '4', '14')]
[('4', '14')]
Last time is: 0.191101648
hpc reached = 6.7
g2 reached = 12
total = 155
% reached = 7.7
last time = 0.191101648
all_times = ['(152,"Main2") - 0.191101648', '(141,"Main2") - 0.191101648', '(151,"Main2") - 0.191101648', '(155,"Main2") - 0.191101648', '(150,"Main2") - 0.191101648', '(154,"Main2") - 0.191101648', '(153,"Main2") - 0.191101648', '(142,"Main2") - 0.191101648', '(144,"Main2") - 0.191101648', '(134,"Main2") - 0.191101648', '(143,"Main2") - 0.191101648', '(43,"Main2") - 0.191101648']
Red Rules #: 33796
SMT Solving time: 0.159953807
Gen Solving time: 0.164602696
SMT Solver calls: 69
General Solver calls: 1130
# nrpcs = []
# post call args = 2
# func args = 0
# timeouts = 0
# branches = 18
NRPC:
hpc_exp = [('CallForHPC', '89', '142', '158', '0', '8'), ('Main2', '78', '105', '134', '4', '14')]
calculate hpc converage
[('CallForHPC', 89, 142, 158, '0', '8'), ('Main2', 78, 105, 134, '4', '14')]
[('Main2', 78, 105, 134, '4', '14')]
[('4', '14')]
Last time is: 0.335942613
hpc reached = 78.4
g2 reached = 28
total = 155
% reached = 18.1
last time = 0.335942613
all_times = ['(152,"Main2") - 0.195827606', '(141,"Main2") - 0.195827606', '(151,"Main2") - 0.195827606', '(155,"Main2") - 0.195827606', '(150,"Main2") - 0.195827606', '(154,"Main2") - 0.195827606', '(153,"Main2") - 0.195827606', '(142,"Main2") - 0.195827606', '(144,"Main2") - 0.195827606', '(134,"Main2") - 0.195827606', '(143,"Main2") - 0.195827606', '(43,"Main2") - 0.195827606', '(119,"Main2") - 0.335942613', '(116,"Main2") - 0.335942613', '(87,"Main2") - 0.335942613', '(86,"Main2") - 0.335942613', '(120,"Main2") - 0.335942613', '(118,"Main2") - 0.335942613', '(113,"Main2") - 0.335942613', '(140,"Main2") - 0.335942613', '(146,"Main2") - 0.335942613', '(147,"Main2") - 0.335942613', '(148,"Main2") - 0.335942613', '(145,"Main2") - 0.335942613', '(133,"Main2") - 0.335942613', '(88,"Main2") - 0.335942613', '(149,"Main2") - 0.335942613', '(135,"Main2") - 0.335942613']
Red Rules #: 16402
SMT Solving time: 0.373156083
Gen Solving time: 0.379375169
SMT Solver calls: 202
General Solver calls: 507
# nrpcs = [0, 0, 10, 1, 0, 0, 0, 0, 1, 9]
# post call args = 2
# func args = 8
# timeouts = 1
# branches = 18


Graph latex for: lcss: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(lcss)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.19, 12)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.2, 12) (0.34, 16)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


life
Baseline:
hpc_exp = [('CallForHPC', '66', '6', '9', '0', '0'), ('Main2', '21', '40', '186', '5', '9')]
calculate hpc converage
[('CallForHPC', 66, 6, 9, '0', '0'), ('Main2', 21, 40, 186, '5', '9')]
[('Main2', 21, 40, 186, '5', '9')]
[('5', '9')]
Last time is: 0.393156368
hpc reached = 21.5
g2 reached = 48
total = 161
% reached = 29.8
last time = 0.393156368
all_times = ['(2,"Main2") - 0.393156368', '(184,"Main2") - 0.393156368', '(173,"Main2") - 0.393156368', '(30,"Main2") - 0.393156368', '(185,"Main2") - 0.393156368', '(126,"Main2") - 0.393156368', '(179,"Main2") - 0.393156368', '(5,"Main2") - 0.393156368', '(177,"Main2") - 0.393156368', '(205,"Main2") - 0.393156368', '(176,"Main2") - 0.393156368', '(31,"Main2") - 0.393156368', '(204,"Main2") - 0.393156368', '(66,"Main2") - 0.393156368', '(128,"Main2") - 0.393156368', '(27,"Main2") - 0.393156368', '(209,"Main2") - 0.393156368', '(1,"Main2") - 0.393156368', '(4,"Main2") - 0.393156368', '(38,"Main2") - 0.393156368', '(206,"Main2") - 0.393156368', '(65,"Main2") - 0.393156368', '(58,"Main2") - 0.393156368', '(187,"Main2") - 0.393156368', '(26,"Main2") - 0.393156368', '(36,"Main2") - 0.393156368', '(39,"Main2") - 0.393156368', '(178,"Main2") - 0.393156368', '(207,"Main2") - 0.393156368', '(6,"Main2") - 0.393156368', '(71,"Main2") - 0.393156368', '(37,"Main2") - 0.393156368', '(186,"Main2") - 0.393156368', '(183,"Main2") - 0.393156368', '(180,"Main2") - 0.393156368', '(208,"Main2") - 0.393156368', '(40,"Main2") - 0.393156368', '(175,"Main2") - 0.393156368', '(127,"Main2") - 0.393156368', '(125,"Main2") - 0.393156368', '(61,"Main2") - 0.393156368', '(174,"Main2") - 0.393156368', '(62,"Main2") - 0.393156368', '(70,"Main2") - 0.393156368', '(41,"Main2") - 0.393156368', '(16,"Main2") - 0.393156368', '(0,"Main2") - 0.393156368', '(210,"Main2") - 0.393156368']
Red Rules #: 34430
SMT Solving time: 0.167669392
Gen Solving time: 0.170496167
SMT Solver calls: 71
General Solver calls: 313
# nrpcs = []
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 14
NRPC:
hpc_exp = [('CallForHPC', '95', '503', '529', '0', '52'), ('Main2', '51', '96', '186', '5', '9')]
calculate hpc converage
[('CallForHPC', 95, 503, 529, '0', '52'), ('Main2', 51, 96, 186, '5', '9')]
[('Main2', 51, 96, 186, '5', '9')]
[('5', '9')]
Last time is: 0.522650281
hpc reached = 51.6
g2 reached = 98
total = 161
% reached = 60.9
last time = 0.522650281
all_times = ['(184,"Main2") - 0.276520120', '(68,"Main2") - 0.276520120', '(185,"Main2") - 0.276520120', '(126,"Main2") - 0.276520120', '(179,"Main2") - 0.276520120', '(197,"Main2") - 0.276520120', '(191,"Main2") - 0.276520120', '(177,"Main2") - 0.276520120', '(205,"Main2") - 0.276520120', '(56,"Main2") - 0.276520120', '(176,"Main2") - 0.276520120', '(195,"Main2") - 0.276520120', '(55,"Main2") - 0.276520120', '(129,"Main2") - 0.276520120', '(204,"Main2") - 0.276520120', '(66,"Main2") - 0.276520120', '(190,"Main2") - 0.276520120', '(193,"Main2") - 0.276520120', '(69,"Main2") - 0.276520120', '(172,"Main2") - 0.276520120', '(52,"Main2") - 0.276520120', '(128,"Main2") - 0.276520120', '(196,"Main2") - 0.276520120', '(54,"Main2") - 0.276520120', '(189,"Main2") - 0.276520120', '(209,"Main2") - 0.276520120', '(1,"Main2") - 0.276520120', '(4,"Main2") - 0.276520120', '(206,"Main2") - 0.276520120', '(65,"Main2") - 0.276520120', '(194,"Main2") - 0.276520120', '(58,"Main2") - 0.276520120', '(187,"Main2") - 0.276520120', '(50,"Main2") - 0.276520120', '(178,"Main2") - 0.276520120', '(207,"Main2") - 0.276520120', '(203,"Main2") - 0.276520120', '(51,"Main2") - 0.276520120', '(71,"Main2") - 0.276520120', '(186,"Main2") - 0.276520120', '(49,"Main2") - 0.276520120', '(183,"Main2") - 0.276520120', '(180,"Main2") - 0.276520120', '(208,"Main2") - 0.276520120', '(121,"Main2") - 0.276520120', '(127,"Main2") - 0.276520120', '(125,"Main2") - 0.276520120', '(61,"Main2") - 0.276520120', '(171,"Main2") - 0.276520120', '(174,"Main2") - 0.276520120', '(188,"Main2") - 0.276520120', '(62,"Main2") - 0.276520120', '(70,"Main2") - 0.276520120', '(16,"Main2") - 0.276520120', '(181,"Main2") - 0.276520120', '(0,"Main2") - 0.276520120', '(210,"Main2") - 0.276520120', '(192,"Main2") - 0.321668977', '(43,"Main2") - 0.321668977', '(124,"Main2") - 0.358100643', '(122,"Main2") - 0.358100643', '(53,"Main2") - 0.358100643', '(67,"Main2") - 0.358100643', '(182,"Main2") - 0.358100643', '(123,"Main2") - 0.375220398', '(48,"Main2") - 0.463683492', '(44,"Main2") - 0.463683492', '(46,"Main2") - 0.463683492', '(42,"Main2") - 0.463683492', '(45,"Main2") - 0.463683492', '(2,"Main2") - 0.470282042', '(173,"Main2") - 0.470282042', '(30,"Main2") - 0.470282042', '(5,"Main2") - 0.470282042', '(31,"Main2") - 0.470282042', '(27,"Main2") - 0.470282042', '(38,"Main2") - 0.470282042', '(26,"Main2") - 0.470282042', '(36,"Main2") - 0.470282042', '(39,"Main2") - 0.470282042', '(6,"Main2") - 0.470282042', '(37,"Main2") - 0.470282042', '(40,"Main2") - 0.470282042', '(175,"Main2") - 0.470282042', '(41,"Main2") - 0.470282042', '(57,"Main2") - 0.474137875', '(63,"Main2") - 0.474137875', '(3,"Main2") - 0.522650281', '(59,"Main2") - 0.522650281', '(14,"Main2") - 0.522650281', '(13,"Main2") - 0.522650281', '(9,"Main2") - 0.522650281', '(60,"Main2") - 0.522650281', '(15,"Main2") - 0.522650281', '(12,"Main2") - 0.522650281', '(64,"Main2") - 0.522650281', '(7,"Main2") - 0.522650281', '(11,"Main2") - 0.522650281']
Red Rules #: 20507
SMT Solving time: 0.292678466
Gen Solving time: 0.295781383
SMT Solver calls: 111
General Solver calls: 296
# nrpcs = [0, 3, 0, 0, 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 0, 2, 1, 7, 4, 1, 1, 4, 3, 1, 0, 0, 0, 0, 0, 3, 1]
# post call args = 1
# func args = 33
# timeouts = 0
# branches = 14


Graph latex for: life: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(life)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.39, 48)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.28, 57) (0.32, 2) (0.36, 5) (0.38, 1) (0.46, 5) (0.47, 17) (0.52, 11)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


mandel2
Baseline:
hpc_exp = [('CallForHPC', '50', '5', '10', '0', '0'), ('Main2', '70', '249', '353', '19', '41')]
calculate hpc converage
[('CallForHPC', 50, 5, 10, '0', '0'), ('Main2', 70, 249, 353, '19', '41')]
[('Main2', 70, 249, 353, '19', '41')]
[('19', '41')]
Last time is: 0.731496862
hpc reached = 70.5
g2 reached = 310
total = 445
% reached = 69.7
last time = 0.731496862
all_times = ['(152,"Main2") - 0.731496862', '(247,"Main2") - 0.731496862', '(73,"Main2") - 0.731496862', '(92,"Main2") - 0.731496862', '(90,"Main2") - 0.731496862', '(117,"Main2") - 0.731496862', '(74,"Main2") - 0.731496862', '(231,"Main2") - 0.731496862', '(321,"Main2") - 0.731496862', '(2,"Main2") - 0.731496862', '(159,"Main2") - 0.731496862', '(119,"Main2") - 0.731496862', '(184,"Main2") - 0.731496862', '(116,"Main2") - 0.731496862', '(68,"Main2") - 0.731496862', '(173,"Main2") - 0.731496862', '(124,"Main2") - 0.731496862', '(401,"Main2") - 0.731496862', '(436,"Main2") - 0.731496862', '(30,"Main2") - 0.731496862', '(138,"Main2") - 0.731496862', '(198,"Main2") - 0.731496862', '(185,"Main2") - 0.731496862', '(126,"Main2") - 0.731496862', '(431,"Main2") - 0.731496862', '(48,"Main2") - 0.731496862', '(320,"Main2") - 0.731496862', '(109,"Main2") - 0.731496862', '(215,"Main2") - 0.731496862', '(87,"Main2") - 0.731496862', '(441,"Main2") - 0.731496862', '(111,"Main2") - 0.731496862', '(434,"Main2") - 0.731496862', '(141,"Main2") - 0.731496862', '(25,"Main2") - 0.731496862', '(256,"Main2") - 0.731496862', '(179,"Main2") - 0.731496862', '(115,"Main2") - 0.731496862', '(17,"Main2") - 0.731496862', '(235,"Main2") - 0.731496862', '(197,"Main2") - 0.731496862', '(191,"Main2") - 0.731496862', '(408,"Main2") - 0.731496862', '(177,"Main2") - 0.731496862', '(101,"Main2") - 0.731496862', '(214,"Main2") - 0.731496862', '(151,"Main2") - 0.731496862', '(22,"Main2") - 0.731496862', '(205,"Main2") - 0.731496862', '(139,"Main2") - 0.731496862', '(56,"Main2") - 0.731496862', '(176,"Main2") - 0.731496862', '(195,"Main2") - 0.731496862', '(223,"Main2") - 0.731496862', '(306,"Main2") - 0.731496862', '(245,"Main2") - 0.731496862', '(55,"Main2") - 0.731496862', '(86,"Main2") - 0.731496862', '(255,"Main2") - 0.731496862', '(444,"Main2") - 0.731496862', '(166,"Main2") - 0.731496862', '(59,"Main2") - 0.731496862', '(234,"Main2") - 0.731496862', '(120,"Main2") - 0.731496862', '(85,"Main2") - 0.731496862', '(31,"Main2") - 0.731496862', '(129,"Main2") - 0.731496862', '(165,"Main2") - 0.731496862', '(96,"Main2") - 0.731496862', '(204,"Main2") - 0.731496862', '(291,"Main2") - 0.731496862', '(201,"Main2") - 0.731496862', '(304,"Main2") - 0.731496862', '(270,"Main2") - 0.731496862', '(283,"Main2") - 0.731496862', '(14,"Main2") - 0.731496862', '(112,"Main2") - 0.731496862', '(230,"Main2") - 0.731496862', '(66,"Main2") - 0.731496862', '(20,"Main2") - 0.731496862', '(190,"Main2") - 0.731496862', '(193,"Main2") - 0.731496862', '(218,"Main2") - 0.731496862', '(155,"Main2") - 0.731496862', '(170,"Main2") - 0.731496862', '(118,"Main2") - 0.731496862', '(69,"Main2") - 0.731496862', '(113,"Main2") - 0.731496862', '(202,"Main2") - 0.731496862', '(211,"Main2") - 0.731496862', '(258,"Main2") - 0.731496862', '(302,"Main2") - 0.731496862', '(13,"Main2") - 0.731496862', '(44,"Main2") - 0.731496862', '(122,"Main2") - 0.731496862', '(140,"Main2") - 0.731496862', '(53,"Main2") - 0.731496862', '(287,"Main2") - 0.731496862', '(108,"Main2") - 0.731496862', '(123,"Main2") - 0.731496862', '(157,"Main2") - 0.731496862', '(438,"Main2") - 0.731496862', '(172,"Main2") - 0.731496862', '(52,"Main2") - 0.731496862', '(300,"Main2") - 0.731496862', '(128,"Main2") - 0.731496862', '(196,"Main2") - 0.731496862', '(277,"Main2") - 0.731496862', '(440,"Main2") - 0.731496862', '(46,"Main2") - 0.731496862', '(54,"Main2") - 0.731496862', '(443,"Main2") - 0.731496862', '(105,"Main2") - 0.731496862', '(292,"Main2") - 0.731496862', '(189,"Main2") - 0.731496862', '(19,"Main2") - 0.731496862', '(308,"Main2") - 0.731496862', '(150,"Main2") - 0.731496862', '(274,"Main2") - 0.731496862', '(57,"Main2") - 0.731496862', '(312,"Main2") - 0.731496862', '(27,"Main2") - 0.731496862', '(146,"Main2") - 0.731496862', '(200,"Main2") - 0.731496862', '(209,"Main2") - 0.731496862', '(1,"Main2") - 0.731496862', '(137,"Main2") - 0.731496862', '(154,"Main2") - 0.731496862', '(89,"Main2") - 0.731496862', '(432,"Main2") - 0.731496862', '(60,"Main2") - 0.731496862', '(239,"Main2") - 0.731496862', '(110,"Main2") - 0.731496862', '(266,"Main2") - 0.731496862', '(84,"Main2") - 0.731496862', '(34,"Main2") - 0.731496862', '(147,"Main2") - 0.731496862', '(265,"Main2") - 0.731496862', '(38,"Main2") - 0.731496862', '(148,"Main2") - 0.731496862', '(309,"Main2") - 0.731496862', '(160,"Main2") - 0.731496862', '(136,"Main2") - 0.731496862', '(323,"Main2") - 0.731496862', '(206,"Main2") - 0.731496862', '(65,"Main2") - 0.731496862', '(243,"Main2") - 0.731496862', '(238,"Main2") - 0.731496862', '(94,"Main2") - 0.731496862', '(163,"Main2") - 0.731496862', '(194,"Main2") - 0.731496862', '(284,"Main2") - 0.731496862', '(221,"Main2") - 0.731496862', '(58,"Main2") - 0.731496862', '(268,"Main2") - 0.731496862', '(187,"Main2") - 0.731496862', '(95,"Main2") - 0.731496862', '(199,"Main2") - 0.731496862', '(232,"Main2") - 0.731496862', '(237,"Main2") - 0.731496862', '(26,"Main2") - 0.731496862', '(257,"Main2") - 0.731496862', '(225,"Main2") - 0.731496862', '(75,"Main2") - 0.731496862', '(168,"Main2") - 0.731496862', '(50,"Main2") - 0.731496862', '(131,"Main2") - 0.731496862', '(77,"Main2") - 0.731496862', '(28,"Main2") - 0.731496862', '(67,"Main2") - 0.731496862', '(299,"Main2") - 0.731496862', '(224,"Main2") - 0.731496862', '(264,"Main2") - 0.731496862', '(145,"Main2") - 0.731496862', '(15,"Main2") - 0.731496862', '(407,"Main2") - 0.731496862', '(78,"Main2") - 0.731496862', '(107,"Main2") - 0.731496862', '(36,"Main2") - 0.731496862', '(398,"Main2") - 0.731496862', '(169,"Main2") - 0.731496862', '(39,"Main2") - 0.731496862', '(226,"Main2") - 0.731496862', '(72,"Main2") - 0.731496862', '(42,"Main2") - 0.731496862', '(79,"Main2") - 0.731496862', '(294,"Main2") - 0.731496862', '(297,"Main2") - 0.731496862', '(404,"Main2") - 0.731496862', '(249,"Main2") - 0.731496862', '(289,"Main2") - 0.731496862', '(178,"Main2") - 0.731496862', '(217,"Main2") - 0.731496862', '(207,"Main2") - 0.731496862', '(97,"Main2") - 0.731496862', '(263,"Main2") - 0.731496862', '(158,"Main2") - 0.731496862', '(229,"Main2") - 0.731496862', '(402,"Main2") - 0.731496862', '(203,"Main2") - 0.731496862', '(106,"Main2") - 0.731496862', '(51,"Main2") - 0.731496862', '(132,"Main2") - 0.731496862', '(24,"Main2") - 0.731496862', '(241,"Main2") - 0.731496862', '(182,"Main2") - 0.731496862', '(156,"Main2") - 0.731496862', '(167,"Main2") - 0.731496862', '(227,"Main2") - 0.731496862', '(32,"Main2") - 0.731496862', '(71,"Main2") - 0.731496862', '(37,"Main2") - 0.731496862', '(186,"Main2") - 0.731496862', '(246,"Main2") - 0.731496862', '(49,"Main2") - 0.731496862', '(47,"Main2") - 0.731496862', '(63,"Main2") - 0.731496862', '(183,"Main2") - 0.731496862', '(114,"Main2") - 0.731496862', '(76,"Main2") - 0.731496862', '(442,"Main2") - 0.731496862', '(228,"Main2") - 0.731496862', '(153,"Main2") - 0.731496862', '(267,"Main2") - 0.731496862', '(91,"Main2") - 0.731496862', '(253,"Main2") - 0.731496862', '(397,"Main2") - 0.731496862', '(133,"Main2") - 0.731496862', '(98,"Main2") - 0.731496862', '(142,"Main2") - 0.731496862', '(162,"Main2") - 0.731496862', '(180,"Main2") - 0.731496862', '(82,"Main2") - 0.731496862', '(45,"Main2") - 0.731496862', '(208,"Main2") - 0.731496862', '(144,"Main2") - 0.731496862', '(233,"Main2") - 0.731496862', '(316,"Main2") - 0.731496862', '(252,"Main2") - 0.731496862', '(429,"Main2") - 0.731496862', '(317,"Main2") - 0.731496862', '(40,"Main2") - 0.731496862', '(83,"Main2") - 0.731496862', '(296,"Main2") - 0.731496862', '(290,"Main2") - 0.731496862', '(399,"Main2") - 0.731496862', '(213,"Main2") - 0.731496862', '(64,"Main2") - 0.731496862', '(23,"Main2") - 0.731496862', '(134,"Main2") - 0.731496862', '(175,"Main2") - 0.731496862', '(121,"Main2") - 0.731496862', '(104,"Main2") - 0.731496862', '(127,"Main2") - 0.731496862', '(280,"Main2") - 0.731496862', '(259,"Main2") - 0.731496862', '(125,"Main2") - 0.731496862', '(307,"Main2") - 0.731496862', '(161,"Main2") - 0.731496862', '(88,"Main2") - 0.731496862', '(21,"Main2") - 0.731496862', '(61,"Main2") - 0.731496862', '(29,"Main2") - 0.731496862', '(171,"Main2") - 0.731496862', '(435,"Main2") - 0.731496862', '(236,"Main2") - 0.731496862', '(240,"Main2") - 0.731496862', '(322,"Main2") - 0.731496862', '(400,"Main2") - 0.731496862', '(212,"Main2") - 0.731496862', '(174,"Main2") - 0.731496862', '(248,"Main2") - 0.731496862', '(149,"Main2") - 0.731496862', '(18,"Main2") - 0.731496862', '(188,"Main2") - 0.731496862', '(130,"Main2") - 0.731496862', '(430,"Main2") - 0.731496862', '(439,"Main2") - 0.731496862', '(403,"Main2") - 0.731496862', '(135,"Main2") - 0.731496862', '(81,"Main2") - 0.731496862', '(93,"Main2") - 0.731496862', '(261,"Main2") - 0.731496862', '(62,"Main2") - 0.731496862', '(70,"Main2") - 0.731496862', '(271,"Main2") - 0.731496862', '(41,"Main2") - 0.731496862', '(437,"Main2") - 0.731496862', '(16,"Main2") - 0.731496862', '(216,"Main2") - 0.731496862', '(35,"Main2") - 0.731496862', '(33,"Main2") - 0.731496862', '(99,"Main2") - 0.731496Loaded package environment from /home/niooi/.ghc/x86_64-linux-9.4.8/environments/default', '(181,"Main2") - 0.731496862', '(254,"Main2") - 0.731496862', '(143,"Main2") - 0.731496862', '(220,"Main2") - 0.731496862', '(250,"Main2") - 0.731496862', '(0,"Main2") - 0.731496862', '(295,"Main2") - 0.731496862', '(80,"Main2") - 0.731496862', '(311,"Main2") - 0.731496862', '(192,"Main2") - 0.731496862', '(285,"Main2") - 0.731496862', '(43,"Main2") - 0.731496862', '(286,"Main2") - 0.731496862', '(102,"Main2") - 0.731496862', '(164,"Main2") - 0.731496862', '(210,"Main2") - 0.731496862', '(406,"Main2") - 0.731496862']
Red Rules #: -1
SMT Solving time: 0.0
Gen Solving time: 3.95e-06
SMT Solver calls: 0
General Solver calls: 1
# nrpcs = []
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 60
NRPC:
hpc_exp = [('CallForHPC', '50', '5', '10', '0', '0'), ('Main2', '70', '249', '353', '19', '41')]
calculate hpc converage
[('CallForHPC', 50, 5, 10, '0', '0'), ('Main2', 70, 249, 353, '19', '41')]
[('Main2', 70, 249, 353, '19', '41')]
[('19', '41')]
Last time is: 0.780417723
hpc reached = 70.5
g2 reached = 310
total = 445
% reached = 69.7
last time = 0.780417723
all_times = ['(152,"Main2") - 0.780417723', '(247,"Main2") - 0.780417723', '(73,"Main2") - 0.780417723', '(92,"Main2") - 0.780417723', '(90,"Main2") - 0.780417723', '(117,"Main2") - 0.780417723', '(74,"Main2") - 0.780417723', '(231,"Main2") - 0.780417723', '(321,"Main2") - 0.780417723', '(2,"Main2") - 0.780417723', '(159,"Main2") - 0.780417723', '(119,"Main2") - 0.780417723', '(184,"Main2") - 0.780417723', '(116,"Main2") - 0.780417723', '(68,"Main2") - 0.780417723', '(173,"Main2") - 0.780417723', '(124,"Main2") - 0.780417723', '(401,"Main2") - 0.780417723', '(436,"Main2") - 0.780417723', '(30,"Main2") - 0.780417723', '(138,"Main2") - 0.780417723', '(198,"Main2") - 0.780417723', '(185,"Main2") - 0.780417723', '(126,"Main2") - 0.780417723', '(431,"Main2") - 0.780417723', '(48,"Main2") - 0.780417723', '(320,"Main2") - 0.780417723', '(109,"Main2") - 0.780417723', '(215,"Main2") - 0.780417723', '(87,"Main2") - 0.780417723', '(441,"Main2") - 0.780417723', '(111,"Main2") - 0.780417723', '(434,"Main2") - 0.780417723', '(141,"Main2") - 0.780417723', '(25,"Main2") - 0.780417723', '(256,"Main2") - 0.780417723', '(179,"Main2") - 0.780417723', '(115,"Main2") - 0.780417723', '(17,"Main2") - 0.780417723', '(235,"Main2") - 0.780417723', '(197,"Main2") - 0.780417723', '(191,"Main2") - 0.780417723', '(408,"Main2") - 0.780417723', '(177,"Main2") - 0.780417723', '(101,"Main2") - 0.780417723', '(214,"Main2") - 0.780417723', '(151,"Main2") - 0.780417723', '(22,"Main2") - 0.780417723', '(205,"Main2") - 0.780417723', '(139,"Main2") - 0.780417723', '(56,"Main2") - 0.780417723', '(176,"Main2") - 0.780417723', '(195,"Main2") - 0.780417723', '(223,"Main2") - 0.780417723', '(306,"Main2") - 0.780417723', '(245,"Main2") - 0.780417723', '(55,"Main2") - 0.780417723', '(86,"Main2") - 0.780417723', '(255,"Main2") - 0.780417723', '(444,"Main2") - 0.780417723', '(166,"Main2") - 0.780417723', '(59,"Main2") - 0.780417723', '(234,"Main2") - 0.780417723', '(120,"Main2") - 0.780417723', '(85,"Main2") - 0.780417723', '(31,"Main2") - 0.780417723', '(129,"Main2") - 0.780417723', '(165,"Main2") - 0.780417723', '(96,"Main2") - 0.780417723', '(204,"Main2") - 0.780417723', '(291,"Main2") - 0.780417723', '(201,"Main2") - 0.780417723', '(304,"Main2") - 0.780417723', '(270,"Main2") - 0.780417723', '(283,"Main2") - 0.780417723', '(14,"Main2") - 0.780417723', '(112,"Main2") - 0.780417723', '(230,"Main2") - 0.780417723', '(66,"Main2") - 0.780417723', '(20,"Main2") - 0.780417723', '(190,"Main2") - 0.780417723', '(193,"Main2") - 0.780417723', '(218,"Main2") - 0.780417723', '(155,"Main2") - 0.780417723', '(170,"Main2") - 0.780417723', '(118,"Main2") - 0.780417723', '(69,"Main2") - 0.780417723', '(113,"Main2") - 0.780417723', '(202,"Main2") - 0.780417723', '(211,"Main2") - 0.780417723', '(258,"Main2") - 0.780417723', '(302,"Main2") - 0.780417723', '(13,"Main2") - 0.780417723', '(44,"Main2") - 0.780417723', '(122,"Main2") - 0.780417723', '(140,"Main2") - 0.780417723', '(53,"Main2") - 0.780417723', '(287,"Main2") - 0.780417723', '(108,"Main2") - 0.780417723', '(123,"Main2") - 0.780417723', '(157,"Main2") - 0.780417723', '(438,"Main2") - 0.780417723', '(172,"Main2") - 0.780417723', '(52,"Main2") - 0.780417723', '(300,"Main2") - 0.780417723', '(128,"Main2") - 0.780417723', '(196,"Main2") - 0.780417723', '(277,"Main2") - 0.780417723', '(440,"Main2") - 0.780417723', '(46,"Main2") - 0.780417723', '(54,"Main2") - 0.780417723', '(443,"Main2") - 0.780417723', '(105,"Main2") - 0.780417723', '(292,"Main2") - 0.780417723', '(189,"Main2") - 0.780417723', '(19,"Main2") - 0.780417723', '(308,"Main2") - 0.780417723', '(150,"Main2") - 0.780417723', '(274,"Main2") - 0.780417723', '(57,"Main2") - 0.780417723', '(312,"Main2") - 0.780417723', '(27,"Main2") - 0.780417723', '(146,"Main2") - 0.780417723', '(200,"Main2") - 0.780417723', '(209,"Main2") - 0.780417723', '(1,"Main2") - 0.780417723', '(137,"Main2") - 0.780417723', '(154,"Main2") - 0.780417723', '(89,"Main2") - 0.780417723', '(432,"Main2") - 0.780417723', '(60,"Main2") - 0.780417723', '(239,"Main2") - 0.780417723', '(110,"Main2") - 0.780417723', '(266,"Main2") - 0.780417723', '(84,"Main2") - 0.780417723', '(34,"Main2") - 0.780417723', '(147,"Main2") - 0.780417723', '(265,"Main2") - 0.780417723', '(38,"Main2") - 0.780417723', '(148,"Main2") - 0.780417723', '(309,"Main2") - 0.780417723', '(160,"Main2") - 0.780417723', '(136,"Main2") - 0.780417723', '(323,"Main2") - 0.780417723', '(206,"Main2") - 0.780417723', '(65,"Main2") - 0.780417723', '(243,"Main2") - 0.780417723', '(238,"Main2") - 0.780417723', '(94,"Main2") - 0.780417723', '(163,"Main2") - 0.780417723', '(194,"Main2") - 0.780417723', '(284,"Main2") - 0.780417723', '(221,"Main2") - 0.780417723', '(58,"Main2") - 0.780417723', '(268,"Main2") - 0.780417723', '(187,"Main2") - 0.780417723', '(95,"Main2") - 0.780417723', '(199,"Main2") - 0.780417723', '(232,"Main2") - 0.780417723', '(237,"Main2") - 0.780417723', '(26,"Main2") - 0.780417723', '(257,"Main2") - 0.780417723', '(225,"Main2") - 0.780417723', '(75,"Main2") - 0.780417723', '(168,"Main2") - 0.780417723', '(50,"Main2") - 0.780417723', '(131,"Main2") - 0.780417723', '(77,"Main2") - 0.780417723', '(28,"Main2") - 0.780417723', '(67,"Main2") - 0.780417723', '(299,"Main2") - 0.780417723', '(224,"Main2") - 0.780417723', '(264,"Main2") - 0.780417723', '(145,"Main2") - 0.780417723', '(15,"Main2") - 0.780417723', '(407,"Main2") - 0.780417723', '(78,"Main2") - 0.780417723', '(107,"Main2") - 0.780417723', '(36,"Main2") - 0.780417723', '(398,"Main2") - 0.780417723', '(169,"Main2") - 0.780417723', '(39,"Main2") - 0.780417723', '(226,"Main2") - 0.780417723', '(72,"Main2") - 0.780417723', '(42,"Main2") - 0.780417723', '(79,"Main2") - 0.780417723', '(294,"Main2") - 0.780417723', '(297,"Main2") - 0.780417723', '(404,"Main2") - 0.780417723', '(249,"Main2") - 0.780417723', '(289,"Main2") - 0.780417723', '(178,"Main2") - 0.780417723', '(217,"Main2") - 0.780417723', '(207,"Main2") - 0.780417723', '(97,"Main2") - 0.780417723', '(263,"Main2") - 0.780417723', '(158,"Main2") - 0.780417723', '(229,"Main2") - 0.780417723', '(402,"Main2") - 0.780417723', '(203,"Main2") - 0.780417723', '(106,"Main2") - 0.780417723', '(51,"Main2") - 0.780417723', '(132,"Main2") - 0.780417723', '(24,"Main2") - 0.780417723', '(241,"Main2") - 0.780417723', '(182,"Main2") - 0.780417723', '(156,"Main2") - 0.780417723', '(167,"Main2") - 0.780417723', '(227,"Main2") - 0.780417723', '(32,"Main2") - 0.780417723', '(71,"Main2") - 0.780417723', '(37,"Main2") - 0.780417723', '(186,"Main2") - 0.780417723', '(246,"Main2") - 0.780417723', '(49,"Main2") - 0.780417723', '(47,"Main2") - 0.780417723', '(63,"Main2") - 0.780417723', '(183,"Main2") - 0.780417723', '(114,"Main2") - 0.780417723', '(76,"Main2") - 0.780417723', '(442,"Main2") - 0.780417723', '(228,"Main2") - 0.780417723', '(153,"Main2") - 0.780417723', '(267,"Main2") - 0.780417723', '(91,"Main2") - 0.780417723', '(253,"Main2") - 0.780417723', '(397,"Main2") - 0.780417723', '(133,"Main2") - 0.780417723', '(98,"Main2") - 0.780417723', '(142,"Main2") - 0.780417723', '(162,"Main2") - 0.780417723', '(180,"Main2") - 0.780417723', '(82,"Main2") - 0.780417723', '(45,"Main2") - 0.780417723', '(208,"Main2") - 0.780417723', '(144,"Main2") - 0.780417723', '(233,"Main2") - 0.780417723', '(316,"Main2") - 0.780417723', '(252,"Main2") - 0.780417723', '(429,"Main2") - 0.780417723', '(317,"Main2") - 0.780417723', '(40,"Main2") - 0.780417723', '(83,"Main2") - 0.780417723', '(296,"Main2") - 0.780417723', '(290,"Main2") - 0.780417723', '(399,"Main2") - 0.780417723', '(213,"Main2") - 0.780417723', '(64,"Main2") - 0.780417723', '(23,"Main2") - 0.780417723', '(134,"Main2") - 0.780417723', '(175,"Main2") - 0.780417723', '(121,"Main2") - 0.780417723', '(104,"Main2") - 0.780417723', '(127,"Main2") - 0.780417723', '(280,"Main2") - 0.780417723', '(259,"Main2") - 0.780417723', '(125,"Main2") - 0.780417723', '(307,"Main2") - 0.780417723', '(161,"Main2") - 0.780417723', '(88,"Main2") - 0.780417723', '(21,"Main2") - 0.780417723', '(61,"Main2") - 0.780417723', '(29,"Main2") - 0.780417723', '(171,"Main2") - 0.780417723', '(435,"Main2") - 0.780417723', '(236,"Main2") - 0.780417723', '(240,"Main2") - 0.780417723', '(322,"Main2") - 0.780417723', '(400,"Main2") - 0.780417723', '(212,"Main2") - 0.780417723', '(174,"Main2") - 0.780417723', '(248,"Main2") - 0.780417723', '(149,"Main2") - 0.780417723', '(18,"Main2") - 0.780417723', '(188,"Main2") - 0.780417723', '(130,"Main2") - 0.780417723', '(430,"Main2") - 0.780417723', '(439,"Main2") - 0.780417723', '(403,"Main2") - 0.780417723', '(135,"Main2") - 0.780417723', '(81,"Main2") - 0.780417723', '(93,"Main2") - 0.780417723', '(261,"Main2") - 0.780417723', '(62,"Main2") - 0.780417723', '(70,"Main2") - 0.780417723', '(271,"Main2") - 0.780417723', '(41,"Main2") - 0.780417723', '(437,"Main2") - 0.780417723', '(16,"Main2") - 0.780417723', '(216,"Main2") - 0.780417723', '(35,"Main2") - 0.780417723', '(33,"Main2") - 0.780417723', '(99,"Main2") - 0.780417Loaded package environment from /home/niooi/.ghc/x86_64-linux-9.4.8/environments/default', '(181,"Main2") - 0.780417723', '(254,"Main2") - 0.780417723', '(143,"Main2") - 0.780417723', '(220,"Main2") - 0.780417723', '(250,"Main2") - 0.780417723', '(0,"Main2") - 0.780417723', '(295,"Main2") - 0.780417723', '(80,"Main2") - 0.780417723', '(311,"Main2") - 0.780417723', '(192,"Main2") - 0.780417723', '(285,"Main2") - 0.780417723', '(43,"Main2") - 0.780417723', '(286,"Main2") - 0.780417723', '(102,"Main2") - 0.780417723', '(164,"Main2") - 0.780417723', '(210,"Main2") - 0.780417723', '(406,"Main2") - 0.780417723']
Red Rules #: -1
SMT Solving time: 0.0
Gen Solving time: 3.822e-06
SMT Solver calls: 0
General Solver calls: 1
# nrpcs = [0]
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 60


Graph latex for: mandel2: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(mandel2)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.73, 310)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.78, 310)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


multiplier
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '793', '14', '99')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 793, '14', '99')]
[('Main2', 0, 0, 793, '14', '99')]
[('14', '99')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 736
% reached = 0.0
last time = 
all_times = []
Red Rules #: 38102
SMT Solving time: 0.005124806
Gen Solving time: 0.005197043
SMT Solver calls: 1
General Solver calls: 5
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 113
NRPC:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Main2', '0', '0', '793', '14', '99')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Main2', 0, 0, 793, '14', '99')]
[('Main2', 0, 0, 793, '14', '99')]
[('14', '99')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 736
% reached = 0.0
last time = 
all_times = []
Red Rules #: 23631
SMT Solving time: 0.004907232
Gen Solving time: 0.004971275
SMT Solver calls: 1
General Solver calls: 5
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 113


Graph latex for: multiplier: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(multiplier)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0, 0)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


power
Baseline:
hpc_exp = [('CallForHPC', '66', '6', '9', '0', '0'), ('Main2', '6', '20', '287', '0', '43')]
calculate hpc converage
[('CallForHPC', 66, 6, 9, '0', '0'), ('Main2', 6, 20, 287, '0', '43')]
[('Main2', 6, 20, 287, '0', '43')]
[('0', '43')]
Last time is: 0.259207381
hpc reached = 7.0
g2 reached = 28
total = 278
% reached = 10.1
last time = 0.259207381
all_times = ['(152,"Main2") - 0.259207381', '(159,"Main2") - 0.259207381', '(124,"Main2") - 0.259207381', '(198,"Main2") - 0.259207381', '(179,"Main2") - 0.259207381', '(115,"Main2") - 0.259207381', '(197,"Main2") - 0.259207381', '(151,"Main2") - 0.259207381', '(205,"Main2") - 0.259207381', '(204,"Main2") - 0.259207381', '(201,"Main2") - 0.259207381', '(155,"Main2") - 0.259207381', '(202,"Main2") - 0.259207381', '(157,"Main2") - 0.259207381', '(150,"Main2") - 0.259207381', '(200,"Main2") - 0.259207381', '(154,"Main2") - 0.259207381', '(147,"Main2") - 0.259207381', '(148,"Main2") - 0.259207381', '(160,"Main2") - 0.259207381', '(199,"Main2") - 0.259207381', '(178,"Main2") - 0.259207381', '(203,"Main2") - 0.259207381', '(156,"Main2") - 0.259207381', '(167,"Main2") - 0.259207381', '(180,"Main2") - 0.259207381', '(161,"Main2") - 0.259207381', '(149,"Main2") - 0.259207381']
Red Rules #: 36917
SMT Solving time: 0.067370499
Gen Solving time: 0.068091742
SMT Solver calls: 31
General Solver calls: 44
# nrpcs = []
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 43
NRPC:
hpc_exp = [('CallForHPC', '87', '136', '155', '0', '28'), ('Main2', '60', '174', '287', '0', '43')]
calculate hpc converage
[('CallForHPC', 87, 136, 155, '0', '28'), ('Main2', 60, 174, 287, '0', '43')]
[('Main2', 60, 174, 287, '0', '43')]
[('0', '43')]
Last time is: 0.984653908
hpc reached = 60.6
g2 reached = 138
total = 278
% reached = 49.6
last time = 0.984653908
all_times = ['(152,"Main2") - 0.261197923', '(159,"Main2") - 0.261197923', '(124,"Main2") - 0.261197923', '(198,"Main2") - 0.261197923', '(179,"Main2") - 0.261197923', '(115,"Main2") - 0.261197923', '(197,"Main2") - 0.261197923', '(151,"Main2") - 0.261197923', '(205,"Main2") - 0.261197923', '(204,"Main2") - 0.261197923', '(201,"Main2") - 0.261197923', '(155,"Main2") - 0.261197923', '(202,"Main2") - 0.261197923', '(157,"Main2") - 0.261197923', '(150,"Main2") - 0.261197923', '(200,"Main2") - 0.261197923', '(154,"Main2") - 0.261197923', '(147,"Main2") - 0.261197923', '(148,"Main2") - 0.261197923', '(160,"Main2") - 0.261197923', '(199,"Main2") - 0.261197923', '(178,"Main2") - 0.261197923', '(203,"Main2") - 0.261197923', '(156,"Main2") - 0.261197923', '(167,"Main2") - 0.261197923', '(180,"Main2") - 0.261197923', '(161,"Main2") - 0.261197923', '(149,"Main2") - 0.261197923', '(117,"Main2") - 0.835463846', '(301,"Main2") - 0.835463846', '(119,"Main2") - 0.835463846', '(68,"Main2") - 0.835463846', '(138,"Main2") - 0.835463846', '(126,"Main2") - 0.835463846', '(141,"Main2") - 0.835463846', '(25,"Main2") - 0.835463846', '(256,"Main2") - 0.835463846', '(275,"Main2") - 0.835463846', '(139,"Main2") - 0.835463846', '(195,"Main2") - 0.835463846', '(120,"Main2") - 0.835463846', '(129,"Main2") - 0.835463846', '(291,"Main2") - 0.835463846', '(304,"Main2") - 0.835463846', '(270,"Main2") - 0.835463846', '(118,"Main2") - 0.835463846', '(302,"Main2") - 0.835463846', '(122,"Main2") - 0.835463846', '(140,"Main2") - 0.835463846', '(123,"Main2") - 0.835463846', '(272,"Main2") - 0.835463846', '(128,"Main2") - 0.835463846', '(196,"Main2") - 0.835463846', '(277,"Main2") - 0.835463846', '(292,"Main2") - 0.835463846', '(27,"Main2") - 0.835463846', '(146,"Main2") - 0.835463846', '(137,"Main2") - 0.835463846', '(266,"Main2") - 0.835463846', '(265,"Main2") - 0.835463846', '(136,"Main2") - 0.835463846', '(58,"Main2") - 0.835463846', '(276,"Main2") - 0.835463846', '(257,"Main2") - 0.835463846', '(50,"Main2") - 0.835463846', '(131,"Main2") - 0.835463846', '(28,"Main2") - 0.835463846', '(299,"Main2") - 0.835463846', '(264,"Main2") - 0.835463846', '(145,"Main2") - 0.835463846', '(15,"Main2") - 0.835463846', '(294,"Main2") - 0.835463846', '(158,"Main2") - 0.835463846', '(24,"Main2") - 0.835463846', '(182,"Main2") - 0.835463846', '(298,"Main2") - 0.835463846', '(183,"Main2") - 0.835463846', '(153,"Main2") - 0.835463846', '(133,"Main2") - 0.835463846', '(142,"Main2") - 0.835463846', '(144,"Main2") - 0.835463846', '(23,"Main2") - 0.835463846', '(134,"Main2") - 0.835463846', '(121,"Main2") - 0.835463846', '(127,"Main2") - 0.835463846', '(125,"Main2") - 0.835463846', '(29,"Main2") - 0.835463846', '(130,"Main2") - 0.835463846', '(135,"Main2") - 0.835463846', '(305,"Main2") - 0.835463846', '(271,"Main2") - 0.835463846', '(16,"Main2") - 0.835463846', '(181,"Main2") - 0.835463846', '(143,"Main2") - 0.835463846', '(295,"Main2") - 0.835463846', '(11,"Main2") - 0.835463846', '(193,"Main2") - 0.860154975', '(194,"Main2") - 0.860154975', '(75,"Main2") - 0.860154975', '(77,"Main2") - 0.860154975', '(76,"Main2") - 0.860154975', '(88,"Main2") - 0.860154975', '(69,"Main2") - 0.866391351', '(73,"Main2") - 0.958040236', '(74,"Main2") - 0.958040236', '(184,"Main2") - 0.958040236', '(185,"Main2") - 0.958040236', '(191,"Main2") - 0.958040236', '(166,"Main2") - 0.958040236', '(165,"Main2") - 0.958040236', '(14,"Main2") - 0.958040236', '(190,"Main2") - 0.958040236', '(9,"Main2") - 0.958040236', '(105,"Main2") - 0.958040236', '(189,"Main2") - 0.958040236', '(163,"Main2") - 0.958040236', '(187,"Main2") - 0.958040236', '(12,"Main2") - 0.958040236', '(72,"Main2") - 0.958040236', '(10,"Main2") - 0.958040236', '(71,"Main2") - 0.958040236', '(186,"Main2") - 0.958040236', '(162,"Main2") - 0.958040236', '(104,"Main2") - 0.958040236', '(188,"Main2") - 0.958040236', '(70,"Main2") - 0.958040236', '(192,"Main2") - 0.958040236', '(164,"Main2") - 0.958040236', '(100,"Main2") - 0.984653908', '(2,"Main2") - 0.984653908', '(3,"Main2") - 0.984653908', '(244,"Main2") - 0.984653908', '(245,"Main2") - 0.984653908', '(13,"Main2") - 0.984653908', '(242,"Main2") - 0.984653908', '(1,"Main2") - 0.984653908', '(243,"Main2") - 0.984653908', '(246,"Main2") - 0.984653908']
Red Rules #: 31022
SMT Solving time: 0.084147889
Gen Solving time: 0.084837353
SMT Solver calls: 38
General Solver calls: 43
# nrpcs = [0, 0, 2, 0, 1, 0, 2, 0, 0, 1]
# post call args = 1
# func args = 9
# timeouts = 0
# branches = 43


Graph latex for: power: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(power)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.26, 28)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.26, 28) (0.84, 68) (0.86, 6) (0.87, 1) (0.96, 25) (0.98, 10)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


primetest
Baseline:
hpc_exp = [('CallForHPC', '61', '11', '18', '0', '0'), ('IntLib', '1', '2', '118', '4', '10'), ('Main2', '33', '12', '36', '1', '4'), ('MyRandom', '0', '0', '86', '5', '10'), ('Prime', '2', '4', '156', '6', '18')]
calculate hpc converage
[('CallForHPC', 61, 11, 18, '0', '0'), ('IntLib', 1, 2, 118, '4', '10'), ('Main2', 33, 12, 36, '1', '4'), ('MyRandom', 0, 0, 86, '5', '10'), ('Prime', 2, 4, 156, '6', '18')]
[('IntLib', 1, 2, 118, '4', '10'), ('Main2', 33, 12, 36, '1', '4'), ('MyRandom', 0, 0, 86, '5', '10'), ('Prime', 2, 4, 156, '6', '18')]
[('4', '10'), ('1', '4'), ('5', '10'), ('6', '18')]
Last time is: 0.858819649
hpc reached = 4.5
g2 reached = 25
total = 470
% reached = 5.3
last time = 0.858819649
all_times = ['(44,"Main2") - 0.432706299', '(26,"Main2") - 0.432706299', '(36,"Main2") - 0.432706299', '(39,"Main2") - 0.432706299', '(42,"Main2") - 0.432706299', '(40,"Main2") - 0.432706299', '(43,"Main2") - 0.432706299', '(25,"Main2") - 0.858819649', '(164,"Prime") - 0.858819649', '(17,"Main2") - 0.858819649', '(5,"Main2") - 0.858819649', '(162,"Prime") - 0.858819649', '(4,"Main2") - 0.858819649', '(140,"IntLib") - 0.858819649', '(28,"Main2") - 0.858819649', '(139,"IntLib") - 0.858819649', '(10,"Main2") - 0.858819649', '(24,"Main2") - 0.858819649', '(6,"Main2") - 0.858819649', '(169,"Prime") - 0.858819649', '(178,"Prime") - 0.858819649', '(179,"Prime") - 0.858819649', '(35,"Main2") - 0.858819649', '(11,"Main2") - 0.858819649', '(138,"IntLib") - 0.858819649']
Red Rules #: 13794
SMT Solving time: 0.271843062
Gen Solving time: 0.273375166
SMT Solver calls: 59
General Solver calls: 64
# nrpcs = []
# post call args = 2
# func args = 0
# timeouts = 0
# branches = 58
NRPC:
hpc_exp = [('CallForHPC', '61', '11', '18', '0', '0'), ('IntLib', '1', '2', '118', '4', '10'), ('Main2', '33', '12', '36', '1', '4'), ('MyRandom', '0', '0', '86', '5', '10'), ('Prime', '2', '4', '156', '6', '18')]
calculate hpc converage
[('CallForHPC', 61, 11, 18, '0', '0'), ('IntLib', 1, 2, 118, '4', '10'), ('Main2', 33, 12, 36, '1', '4'), ('MyRandom', 0, 0, 86, '5', '10'), ('Prime', 2, 4, 156, '6', '18')]
[('IntLib', 1, 2, 118, '4', '10'), ('Main2', 33, 12, 36, '1', '4'), ('MyRandom', 0, 0, 86, '5', '10'), ('Prime', 2, 4, 156, '6', '18')]
[('4', '10'), ('1', '4'), ('5', '10'), ('6', '18')]
Last time is: 0.897403158
hpc reached = 4.5
g2 reached = 25
total = 470
% reached = 5.3
last time = 0.897403158
all_times = ['(44,"Main2") - 0.451866113', '(26,"Main2") - 0.451866113', '(36,"Main2") - 0.451866113', '(39,"Main2") - 0.451866113', '(42,"Main2") - 0.451866113', '(40,"Main2") - 0.451866113', '(43,"Main2") - 0.451866113', '(25,"Main2") - 0.897403158', '(164,"Prime") - 0.897403158', '(17,"Main2") - 0.897403158', '(5,"Main2") - 0.897403158', '(162,"Prime") - 0.897403158', '(4,"Main2") - 0.897403158', '(140,"IntLib") - 0.897403158', '(28,"Main2") - 0.897403158', '(139,"IntLib") - 0.897403158', '(10,"Main2") - 0.897403158', '(24,"Main2") - 0.897403158', '(6,"Main2") - 0.897403158', '(169,"Prime") - 0.897403158', '(178,"Prime") - 0.897403158', '(179,"Prime") - 0.897403158', '(35,"Main2") - 0.897403158', '(11,"Main2") - 0.897403158', '(138,"IntLib") - 0.897403158']
Red Rules #: 12825
SMT Solving time: 0.243315454
Gen Solving time: 0.244979554
SMT Solver calls: 55
General Solver calls: 60
# nrpcs = [0, 0]
# post call args = 2
# func args = 0
# timeouts = 0
# branches = 58


Graph latex for: primetest: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(primetest)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.43, 7) (0.86, 18)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.45, 7) (0.9, 18)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


scc
Baseline:
hpc_exp = [('CallForHPC', '66', '2', '3', '0', '0'), ('Digraph', '0', '0', '121', '6', '11'), ('Main2', '0', '0', '50', '0', '0')]
calculate hpc converage
[('CallForHPC', 66, 2, 3, '0', '0'), ('Digraph', 0, 0, 121, '6', '11'), ('Main2', 0, 0, 50, '0', '0')]
[('Digraph', 0, 0, 121, '6', '11'), ('Main2', 0, 0, 50, '0', '0')]
[('6', '11'), ('0', '0')]
Last time is: 
hpc reached = 0.0
g2 reached = 0
total = 197
% reached = 0.0
last time = 
all_times = []
Red Rules #: 31595
SMT Solving time: 0.160175982
Gen Solving time: 0.162704189
SMT Solver calls: 71
General Solver calls: 355
# nrpcs = []
# post call args = 0
# func args = 0
# timeouts = 0
# branches = 17
NRPC:
hpc_exp = [('CallForHPC', '98', '86', '87', '0', '8'), ('Digraph', '90', '109', '121', '6', '11'), ('Main2', '100', '50', '50', '0', '0')]
calculate hpc converage
[('CallForHPC', 98, 86, 87, '0', '8'), ('Digraph', 90, 109, 121, '6', '11'), ('Main2', 100, 50, 50, '0', '0')]
[('Digraph', 90, 109, 121, '6', '11'), ('Main2', 100, 50, 50, '0', '0')]
[('6', '11'), ('0', '0')]
Last time is: 0.208942586
hpc reached = 93.0
g2 reached = 32
total = 197
% reached = 16.2
last time = 0.208942586
all_times = ['(134,"Digraph") - 0.176867318', '(126,"Digraph") - 0.176867318', '(137,"Digraph") - 0.176867318', '(97,"Digraph") - 0.176867318', '(22,"Main2") - 0.176867318', '(127,"Digraph") - 0.176867318', '(55,"Main2") - 0.176867318', '(59,"Main2") - 0.176867318', '(30,"Digraph") - 0.176867318', '(133,"Digraph") - 0.176867318', '(17,"Digraph") - 0.176867318', '(57,"Main2") - 0.176867318', '(27,"Digraph") - 0.176867318', '(130,"Digraph") - 0.176867318', '(58,"Main2") - 0.176867318', '(135,"Digraph") - 0.176867318', '(136,"Digraph") - 0.176867318', '(59,"Digraph") - 0.176867318', '(132,"Digraph") - 0.176867318', '(21,"Main2") - 0.176867318', '(16,"Digraph") - 0.176867318', '(33,"Digraph") - 0.176867318', '(138,"Digraph") - 0.176867318', '(14,"Digraph") - 0.176867318', '(14,"Main2") - 0.193483598', '(13,"Main2") - 0.193483598', '(12,"Main2") - 0.193483598', '(25,"Digraph") - 0.193483598', '(28,"Digraph") - 0.193483598', '(26,"Digraph") - 0.208942586', '(131,"Digraph") - 0.208942586', '(29,"Digraph") - 0.208942586']
Red Rules #: 20370
SMT Solving time: 0.376020074
Gen Solving time: 0.382693686
SMT Solver calls: 243
General Solver calls: 653
# nrpcs = [1, 2, 1, 0, 1, 0, 0, 1]
# post call args = 0
# func args = 8
# timeouts = 0
# branches = 17


Graph latex for: scc: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(scc)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0, 0)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.18, 24) (0.19, 5) (0.21, 3)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


rewrite
Baseline:
hpc_exp = [('CallForHPC', '54', '6', '11', '0', '0'), ('Main2', '0', '6', '1284', '32', '156')]
calculate hpc converage
[('CallForHPC', 54, 6, 11, '0', '0'), ('Main2', 0, 6, 1284, '32', '156')]
[('Main2', 0, 6, 1284, '32', '156')]
[('32', '156')]
Last time is: 0.519280964
hpc reached = 0.5
g2 reached = 9
total = 1518
% reached = 0.6
last time = 0.519280964
all_times = ['(1495,"Main2") - 0.519280964', '(1500,"Main2") - 0.519280964', '(1503,"Main2") - 0.519280964', '(1504,"Main2") - 0.519280964', '(1505,"Main2") - 0.519280964', '(1499,"Main2") - 0.519280964', '(1501,"Main2") - 0.519280964', '(1496,"Main2") - 0.519280964', '(1490,"Main2") - 0.519280964']
Red Rules #: 26812
SMT Solving time: 0.005407158
Gen Solving time: 0.00546859
SMT Solver calls: 1
General Solver calls: 4
# nrpcs = []
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 188
NRPC:
hpc_exp = [('CallForHPC', '72', '13', '18', '0', '0'), ('Main2', '21', '270', '1284', '32', '156')]
calculate hpc converage
[('CallForHPC', 72, 13, 18, '0', '0'), ('Main2', 21, 270, 1284, '32', '156')]
[('Main2', 21, 270, 1284, '32', '156')]
[('32', '156')]
Last time is: 0.958086872
hpc reached = 21.0
g2 reached = 341
total = 1518
% reached = 22.5
last time = 0.958086872
all_times = ['(1495,"Main2") - 0.220216132', '(1500,"Main2") - 0.220216132', '(1503,"Main2") - 0.220216132', '(1504,"Main2") - 0.220216132', '(1505,"Main2") - 0.220216132', '(1499,"Main2") - 0.220216132', '(1501,"Main2") - 0.220216132', '(1496,"Main2") - 0.220216132', '(1490,"Main2") - 0.220216132', '(368,"Main2") - 0.958086872', '(691,"Main2") - 0.958086872', '(945,"Main2") - 0.958086872', '(774,"Main2") - 0.958086872', '(910,"Main2") - 0.958086872', '(385,"Main2") - 0.958086872', '(915,"Main2") - 0.958086872', '(998,"Main2") - 0.958086872', '(897,"Main2") - 0.958086872', '(869,"Main2") - 0.958086872', '(712,"Main2") - 0.958086872', '(733,"Main2") - 0.958086872', '(729,"Main2") - 0.958086872', '(930,"Main2") - 0.958086872', '(921,"Main2") - 0.958086872', '(1088,"Main2") - 0.958086872', '(1012,"Main2") - 0.958086872', '(781,"Main2") - 0.958086872', '(687,"Main2") - 0.958086872', '(973,"Main2") - 0.958086872', '(700,"Main2") - 0.958086872', '(436,"Main2") - 0.958086872', '(30,"Main2") - 0.958086872', '(991,"Main2") - 0.958086872', '(431,"Main2") - 0.958086872', '(898,"Main2") - 0.958086872', '(999,"Main2") - 0.958086872', '(768,"Main2") - 0.958086872', '(48,"Main2") - 0.958086872', '(1483,"Main2") - 0.958086872', '(746,"Main2") - 0.958086872', '(961,"Main2") - 0.958086872', '(434,"Main2") - 0.958086872', '(937,"Main2") - 0.958086872', '(1003,"Main2") - 0.958086872', '(894,"Main2") - 0.958086872', '(690,"Main2") - 0.958086872', '(870,"Main2") - 0.958086872', '(783,"Main2") - 0.958086872', '(908,"Main2") - 0.958086872', '(749,"Main2") - 0.958086872', '(1497,"Main2") - 0.958086872', '(899,"Main2") - 0.958086872', '(963,"Main2") - 0.958086872', '(278,"Main2") - 0.958086872', '(450,"Main2") - 0.958086872', '(970,"Main2") - 0.958086872', '(629,"Main2") - 0.958086872', '(1498,"Main2") - 0.958086872', '(1455,"Main2") - 0.958086872', '(873,"Main2") - 0.958086872', '(721,"Main2") - 0.958086872', '(1014,"Main2") - 0.958086872', '(56,"Main2") - 0.958086872', '(711,"Main2") - 0.958086872', '(666,"Main2") - 0.958086872', '(788,"Main2") - 0.958086872', '(776,"Main2") - 0.958086872', '(376,"Main2") - 0.958086872', '(444,"Main2") - 0.958086872', '(727,"Main2") - 0.958086872', '(730,"Main2") - 0.958086872', '(779,"Main2") - 0.958086872', '(59,"Main2") - 0.958086872', '(919,"Main2") - 0.958086872', '(740,"Main2") - 0.958086872', '(380,"Main2") - 0.958086872', '(965,"Main2") - 0.958086872', '(896,"Main2") - 0.958086872', '(914,"Main2") - 0.958086872', '(1081,"Main2") - 0.958086872', '(291,"Main2") - 0.958086872', '(887,"Main2") - 0.958086872', '(942,"Main2") - 0.958086872', '(911,"Main2") - 0.958086872', '(707,"Main2") - 0.958086872', '(925,"Main2") - 0.958086872', '(769,"Main2") - 0.958086872', '(748,"Main2") - 0.958086872', '(630,"Main2") - 0.958086872', '(752,"Main2") - 0.958086872', '(388,"Main2") - 0.958086872', '(375,"Main2") - 0.958086872', '(720,"Main2") - 0.958086872', '(66,"Main2") - 0.958086872', '(389,"Main2") - 0.958086872', '(731,"Main2") - 0.958086872', '(427,"Main2") - 0.958086872', '(872,"Main2") - 0.958086872', '(782,"Main2") - 0.958086872', '(750,"Main2") - 0.958086872', '(724,"Main2") - 0.958086872', '(886,"Main2") - 0.958086872', '(972,"Main2") - 0.958086872', '(693,"Main2") - 0.958086872', '(900,"Main2") - 0.958086872', '(377,"Main2") - 0.958086872', '(1456,"Main2") - 0.958086872', '(694,"Main2") - 0.958086872', '(433,"Main2") - 0.958086872', '(736,"Main2") - 0.958086872', '(1488,"Main2") - 0.958086872', '(903,"Main2") - 0.958086872', '(664,"Main2") - 0.958086872', '(53,"Main2") - 0.958086872', '(739,"Main2") - 0.958086872', '(695,"Main2") - 0.958086872', '(957,"Main2") - 0.958086872', '(1494,"Main2") - 0.958086872', '(738,"Main2") - 0.958086872', '(994,"Main2") - 0.958086872', '(438,"Main2") - 0.958086872', '(969,"Main2") - 0.958086872', '(52,"Main2") - 0.958086872', '(891,"Main2") - 0.958086872', '(696,"Main2") - 0.958086872', '(703,"Main2") - 0.958086872', '(747,"Main2") - 0.958086872', '(1524,"Main2") - 0.958086872', '(1478,"Main2") - 0.958086872', '(778,"Main2") - 0.958086872', '(905,"Main2") - 0.958086872', '(451,"Main2") - 0.958086872', '(1459,"Main2") - 0.958086872', '(277,"Main2") - 0.958086872', '(440,"Main2") - 0.958086872', '(46,"Main2") - 0.958086872', '(54,"Main2") - 0.958086872', '(443,"Main2") - 0.958086872', '(777,"Main2") - 0.958086872', '(292,"Main2") - 0.958086872', '(1083,"Main2") - 0.958086872', '(1469,"Main2") - 0.958086872', '(907,"Main2") - 0.958086872', '(57,"Main2") - 0.958086872', '(1475,"Main2") - 0.958086872', '(1491,"Main2") - 0.958086872', '(706,"Main2") - 0.958086872', '(990,"Main2") - 0.958086872', '(859,"Main2") - 0.958086872', '(605,"Main2") - 0.958086872', '(367,"Main2") - 0.958086872', '(773,"Main2") - 0.958086872', '(432,"Main2") - 0.958086872', '(1086,"Main2") - 0.958086872', '(60,"Main2") - 0.958086872', '(716,"Main2") - 0.958086872', '(1502,"Main2") - 0.958086872', '(993,"Main2") - 0.958086872', '(386,"Main2") - 0.958086872', '(755,"Main2") - 0.958086872', '(1472,"Main2") - 0.958086872', '(366,"Main2") - 0.958086872', '(988,"Main2") - 0.958086872', '(1006,"Main2") - 0.958086872', '(1464,"Main2") - 0.958086872', '(65,"Main2") - 0.958086872', '(369,"Main2") - 0.958086872', '(701,"Main2") - 0.958086872', '(928,"Main2") - 0.958086872', '(1454,"Main2") - 0.958086872', '(734,"Main2") - 0.958086872', '(780,"Main2") - 0.958086872', '(1082,"Main2") - 0.958086872', '(58,"Main2") - 0.958086872', '(933,"Main2") - 0.958086872', '(863,"Main2") - 0.958086872', '(704,"Main2") - 0.958086872', '(697,"Main2") - 0.958086872', '(979,"Main2") - 0.958086872', '(742,"Main2") - 0.958086872', '(968,"Main2") - 0.958086872', '(785,"Main2") - 0.958086872', '(387,"Main2") - 0.958086872', '(390,"Main2") - 0.958086872', '(722,"Main2") - 0.958086872', '(920,"Main2") - 0.958086872', '(604,"Main2") - 0.958086872', '(50,"Main2") - 0.958086872', '(1458,"Main2") - 0.958086872', '(978,"Main2") - 0.958086872', '(28,"Main2") - 0.958086872', '(874,"Main2") - 0.958086872', '(374,"Main2") - 0.958086872', '(1008,"Main2") - 0.958086872', '(737,"Main2") - 0.958086872', '(1457,"Main2") - 0.958086872', '(599,"Main2") - 0.958086872', '(631,"Main2") - 0.958086872', '(1476,"Main2") - 0.958086872', '(725,"Main2") - 0.958086872', '(461,"Main2") - 0.958086872', '(904,"Main2") - 0.958086872', '(926,"Main2") - 0.958086872', '(924,"Main2") - 0.958086872', '(913,"Main2") - 0.958086872', '(717,"Main2") - 0.958086872', '(598,"Main2") - 0.958086872', '(982,"Main2") - 0.958086872', '(770,"Main2") - 0.958086872', '(723,"Main2") - 0.958086872', '(958,"Main2") - 0.958086872', '(449,"Main2") - 0.958086872', '(1087,"Main2") - 0.958086872', '(941,"Main2") - 0.958086872', '(710,"Main2") - 0.958086872', '(1010,"Main2") - 0.958086872', '(775,"Main2") - 0.958086872', '(868,"Main2") - 0.958086872', '(980,"Main2") - 0.958086872', '(923,"Main2") - 0.958086872', '(51,"Main2") - 0.958086872', '(1005,"Main2") - 0.958086872', '(944,"Main2") - 0.958086872', '(718,"Main2") - 0.958086872', '(365,"Main2") - 0.958086872', '(966,"Main2") - 0.958086872', '(705,"Main2") - 0.958086872', '(391,"Main2") - 0.958086872', '(702,"Main2") - 0.958086872', '(1480,"Main2") - 0.958086872', '(601,"Main2") - 0.958086872', '(962,"Main2") - 0.958086872', '(906,"Main2") - 0.958086872', '(49,"Main2") - 0.958086872', '(728,"Main2") - 0.958086872', '(47,"Main2") - 0.958086872', '(63,"Main2") - 0.958086872', '(871,"Main2") - 0.958086872', '(628,"Main2") - 0.958086872', '(1493,"Main2") - 0.958086872', '(787,"Main2") - 0.958086872', '(1002,"Main2") - 0.958086872', '(892,"Main2") - 0.958086872', '(1479,"Main2") - 0.958086872', '(784,"Main2") - 0.958086872', '(665,"Main2") - 0.958086872', '(1468,"Main2") - 0.958086872', '(686,"Main2") - 0.958086872', '(1465,"Main2") - 0.958086872', '(922,"Main2") - 0.958086872', '(384,"Main2") - 0.958086872', '(743,"Main2") - 0.958086872', '(971,"Main2") - 0.958086872', '(901,"Main2") - 0.958086872', '(429,"Main2") - 0.958086872', '(929,"Main2") - 0.958086872', '(1001,"Main2") - 0.958086872', '(373,"Main2") - 0.958086872', '(1007,"Main2") - 0.958086872', '(989,"Main2") - 0.958086872', '(964,"Main2") - 0.958086872', '(626,"Main2") - 0.958086872', '(364,"Main2") - 0.958086872', '(428,"Main2") - 0.958086872', '(974,"Main2") - 0.958086872', '(64,"Main2") - 0.958086872', '(940,"Main2") - 0.958086872', '(860,"Main2") - 0.958086872', '(927,"Main2") - 0.958086872', '(1482,"Main2") - 0.958086872', '(856,"Main2") - 0.958086872', '(378,"Main2") - 0.958086872', '(997,"Main2") - 0.958086872', '(902,"Main2") - 0.958086872', '(893,"Main2") - 0.958086872', '(61,"Main2") - 0.958086872', '(1013,"Main2") - 0.958086872', '(1090,"Main2") - 0.958086872', '(939,"Main2") - 0.958086872', '(688,"Main2") - 0.958086872', '(29,"Main2") - 0.958086872', '(692,"Main2") - 0.958086872', '(719,"Main2") - 0.958086872', '(435,"Main2") - 0.958086872', '(1471,"Main2") - 0.958086872', '(699,"Main2") - 0.958086872', '(627,"Main2") - 0.958086872', '(975,"Main2") - 0.95808Loaded package environment from /home/niooi/.ghc/x86_64-linux-9.4.8/environments/default', '(698,"Main2") - 0.958086872', '(371,"Main2") - 0.958086872', '(943,"Main2") - 0.958086872', '(689,"Main2") - 0.958086872', '(992,"Main2") - 0.958086872', '(936,"Main2") - 0.958086872', '(600,"Main2") - 0.958086872', '(426,"Main2") - 0.958086872', '(946,"Main2") - 0.958086872', '(372,"Main2") - 0.958086872', '(987,"Main2") - 0.958086872', '(744,"Main2") - 0.958086872', '(967,"Main2") - 0.958086872', '(708,"Main2") - 0.958086872', '(1474,"Main2") - 0.958086872', '(430,"Main2") - 0.958086872', '(976,"Main2") - 0.958086872', '(379,"Main2") - 0.958086872', '(751,"Main2") - 0.958086872', '(439,"Main2") - 0.958086872', '(370,"Main2") - 0.958086872', '(1489,"Main2") - 0.958086872', '(1477,"Main2") - 0.958086872', '(912,"Main2") - 0.958086872', '(726,"Main2") - 0.958086872', '(62,"Main2") - 0.958086872', '(1484,"Main2") - 0.958086872', '(986,"Main2") - 0.958086872', '(709,"Main2") - 0.958086872', '(437,"Main2") - 0.958086872', '(1466,"Main2") - 0.958086872', '(895,"Main2") - 0.958086872', '(977,"Main2") - 0.958086872', '(35,"Main2") - 0.958086872', '(934,"Main2") - 0.958086872', '(1085,"Main2") - 0.958086872', '(984,"Main2") - 0.958086872', '(985,"Main2") - 0.958086872', '(861,"Main2") - 0.958086872', '(1407,"Main2") - 0.958086872', '(995,"Main2") - 0.958086872', '(981,"Main2") - 0.958086872', '(862,"Main2") - 0.958086872', '(772,"Main2") - 0.958086872', '(1470,"Main2") - 0.958086872', '(960,"Main2") - 0.958086872', '(1000,"Main2") - 0.958086872', '(983,"Main2") - 0.958086872', '(741,"Main2") - 0.958086872', '(732,"Main2") - 0.958086872', '(1089,"Main2") - 0.958086872', '(996,"Main2") - 0.958086872', '(909,"Main2") - 0.958086872']
Red Rules #: 33539
SMT Solving time: 0.01713996
Gen Solving time: 0.017286987
SMT Solver calls: 4
General Solver calls: 13
# nrpcs = [0, 1]
# post call args = 2
# func args = 0
# timeouts = 0
# branches = 188


Graph latex for: rewrite: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(rewrite)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.52, 9)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.22, 9) (0.96, 332)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


sphere
Baseline:
hpc_exp = [('CallForHPC', '42', '6', '14', '0', '0'), ('Main2', '1', '14', '1017', '24', '48')]
calculate hpc converage
[('CallForHPC', 42, 6, 14, '0', '0'), ('Main2', 1, 14, 1017, '24', '48')]
[('Main2', 1, 14, 1017, '24', '48')]
[('24', '48')]
Last time is: 0.216723469
hpc reached = 1.4
g2 reached = 18
total = 1119
% reached = 1.6
last time = 0.216723469
all_times = ['(1168,"Main2") - 0.216723469', '(1166,"Main2") - 0.216723469', '(1145,"Main2") - 0.216723469', '(1143,"Main2") - 0.216723469', '(1173,"Main2") - 0.216723469', '(22,"Main2") - 0.216723469', '(1174,"Main2") - 0.216723469', '(1167,"Main2") - 0.216723469', '(1158,"Main2") - 0.216723469', '(1165,"Main2") - 0.216723469', '(1159,"Main2") - 0.216723469', '(1144,"Main2") - 0.216723469', '(24,"Main2") - 0.216723469', '(1172,"Main2") - 0.216723469', '(23,"Main2") - 0.216723469', '(1141,"Main2") - 0.216723469', '(1164,"Main2") - 0.216723469', '(1142,"Main2") - 0.216723469']
Red Rules #: 9285
SMT Solving time: 0.59244085
Gen Solving time: 0.595102306
SMT Solver calls: 75
General Solver calls: 177
# nrpcs = []
# post call args = 1
# func args = 0
# timeouts = 0
# branches = 72
NRPC:
hpc_exp = [('CallForHPC', '57', '77', '133', '0', '4'), ('Main2', '61', '626', '1017', '24', '48')]
calculate hpc converage
[('CallForHPC', 57, 77, 133, '0', '4'), ('Main2', 61, 626, 1017, '24', '48')]
[('Main2', 61, 626, 1017, '24', '48')]
[('24', '48')]
Last time is: 0.301353619
hpc reached = 61.6
g2 reached = 67
total = 1119
% reached = 6.0
last time = 0.301353619
all_times = ['(1168,"Main2") - 0.208751243', '(1166,"Main2") - 0.208751243', '(1145,"Main2") - 0.208751243', '(1143,"Main2") - 0.208751243', '(1173,"Main2") - 0.208751243', '(22,"Main2") - 0.208751243', '(1174,"Main2") - 0.208751243', '(1167,"Main2") - 0.208751243', '(1158,"Main2") - 0.208751243', '(1165,"Main2") - 0.208751243', '(1159,"Main2") - 0.208751243', '(1144,"Main2") - 0.208751243', '(24,"Main2") - 0.208751243', '(1172,"Main2") - 0.208751243', '(23,"Main2") - 0.208751243', '(1141,"Main2") - 0.208751243', '(1164,"Main2") - 0.208751243', '(1142,"Main2") - 0.208751243', '(1096,"Main2") - 0.301353619', '(1160,"Main2") - 0.301353619', '(1140,"Main2") - 0.301353619', '(1156,"Main2") - 0.301353619', '(1157,"Main2") - 0.301353619', '(1148,"Main2") - 0.301353619', '(1163,"Main2") - 0.301353619', '(1099,"Main2") - 0.301353619', '(1150,"Main2") - 0.301353619', '(456,"Main2") - 0.301353619', '(1149,"Main2") - 0.301353619', '(459,"Main2") - 0.301353619', '(679,"Main2") - 0.301353619', '(677,"Main2") - 0.301353619', '(464,"Main2") - 0.301353619', '(172,"Main2") - 0.301353619', '(703,"Main2") - 0.301353619', '(1095,"Main2") - 0.301353619', '(706,"Main2") - 0.301353619', '(716,"Main2") - 0.301353619', '(681,"Main2") - 0.301353619', '(1162,"Main2") - 0.301353619', '(458,"Main2") - 0.301353619', '(1171,"Main2") - 0.301353619', '(1128,"Main2") - 0.301353619', '(461,"Main2") - 0.301353619', '(717,"Main2") - 0.301353619', '(226,"Main2") - 0.301353619', '(1129,"Main2") - 0.301353619', '(660,"Main2") - 0.301353619', '(227,"Main2") - 0.301353619', '(1130,"Main2") - 0.301353619', '(680,"Main2") - 0.301353619', '(1117,"Main2") - 0.301353619', '(665,"Main2") - 0.301353619', '(661,"Main2") - 0.301353619', '(489,"Main2") - 0.301353619', '(1102,"Main2") - 0.301353619', '(1147,"Main2") - 0.301353619', '(678,"Main2") - 0.301353619', '(21,"Main2") - 0.301353619', '(171,"Main2") - 0.301353619', '(1146,"Main2") - 0.301353619', '(668,"Main2") - 0.301353619', '(1170,"Main2") - 0.301353619', '(1094,"Main2") - 0.301353619', '(1116,"Main2") - 0.301353619', '(1139,"Main2") - 0.301353619', '(490,"Main2") - 0.301353619']
Red Rules #: 14363
SMT Solving time: 0.450598986
Gen Solving time: 0.453041308
SMT Solver calls: 103
General Solver calls: 156
# nrpcs = [0, 2, 2, 1, 0, 1, 0, 1]
# post call args = 1
# func args = 7
# timeouts = 0
# branches = 72


Graph latex for: sphere: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(sphere)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.22, 18)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.21, 18) (0.3, 49)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


treejoin
Baseline:
hpc_exp = [('CallForHPC', '66', '22', '33', '0', '0'), ('Main2', '21', '42', '191', '13', '26')]
calculate hpc converage
[('CallForHPC', 66, 22, 33, '0', '0'), ('Main2', 21, 42, 191, '13', '26')]
[('Main2', 21, 42, 191, '13', '26')]
[('13', '26')]
Last time is: 0.769187735
hpc reached = 22.0
g2 reached = 56
total = 229
% reached = 24.5
last time = 0.769187735
all_times = ['(231,"Main2") - 0.200083410', '(191,"Main2") - 0.200083410', '(214,"Main2") - 0.200083410', '(230,"Main2") - 0.200083410', '(190,"Main2") - 0.200083410', '(140,"Main2") - 0.200083410', '(232,"Main2") - 0.200083410', '(225,"Main2") - 0.200083410', '(224,"Main2") - 0.200083410', '(226,"Main2") - 0.200083410', '(227,"Main2") - 0.200083410', '(228,"Main2") - 0.200083410', '(2,"Main2") - 0.613167630', '(3,"Main2") - 0.613167630', '(138,"Main2") - 0.613167630', '(141,"Main2") - 0.613167630', '(25,"Main2") - 0.613167630', '(179,"Main2") - 0.613167630', '(17,"Main2") - 0.613167630', '(219,"Main2") - 0.613167630', '(22,"Main2") - 0.613167630', '(139,"Main2") - 0.613167630', '(166,"Main2") - 0.613167630', '(20,"Main2") - 0.613167630', '(218,"Main2") - 0.613167630', '(170,"Main2") - 0.613167630', '(157,"Main2") - 0.613167630', '(172,"Main2") - 0.613167630', '(189,"Main2") - 0.613167630', '(146,"Main2") - 0.613167630', '(221,"Main2") - 0.613167630', '(26,"Main2") - 0.613167630', '(168,"Main2") - 0.613167630', '(145,"Main2") - 0.613167630', '(15,"Main2") - 0.613167630', '(169,"Main2") - 0.613167630', '(178,"Main2") - 0.613167630', '(217,"Main2") - 0.613167630', '(158,"Main2") - 0.613167630', '(229,"Main2") - 0.613167630', '(24,"Main2") - 0.613167630', '(167,"Main2") - 0.613167630', '(142,"Main2") - 0.613167630', '(180,"Main2") - 0.613167630', '(144,"Main2") - 0.613167630', '(175,"Main2") - 0.613167630', '(21,"Main2") - 0.613167630', '(18,"Main2") - 0.613167630', '(16,"Main2") - 0.613167630', '(143,"Main2") - 0.613167630', '(220,"Main2") - 0.613167630', '(0,"Main2") - 0.613167630', '(192,"Main2") - 0.613167630', '(14,"Main2") - 0.769187735', '(13,"Main2") - 0.769187735', '(1,"Main2") - 0.769187735']
Red Rules #: 22348
SMT Solving time: 0.250281912
Gen Solving time: 0.254275506
SMT Solver calls: 82
General Solver calls: 447
# nrpcs = []
# post call args = 4
# func args = 0
# timeouts = 1
# branches = 39
NRPC:
hpc_exp = [('CallForHPC', '76', '40', '52', '0', '4'), ('Main2', '25', '49', '191', '13', '26')]
calculate hpc converage
[('CallForHPC', 76, 40, 52, '0', '4'), ('Main2', 25, 49, 191, '13', '26')]
[('Main2', 25, 49, 191, '13', '26')]
[('13', '26')]
Last time is: 0.547550141
hpc reached = 25.7
g2 reached = 72
total = 229
% reached = 31.4
last time = 0.547550141
all_times = ['(231,"Main2") - 0.201358827', '(191,"Main2") - 0.201358827', '(214,"Main2") - 0.201358827', '(230,"Main2") - 0.201358827', '(190,"Main2") - 0.201358827', '(140,"Main2") - 0.201358827', '(232,"Main2") - 0.201358827', '(225,"Main2") - 0.201358827', '(224,"Main2") - 0.201358827', '(226,"Main2") - 0.201358827', '(227,"Main2") - 0.201358827', '(228,"Main2") - 0.201358827', '(159,"Main2") - 0.253879567', '(223,"Main2") - 0.253879567', '(166,"Main2") - 0.253879567', '(155,"Main2") - 0.253879567', '(157,"Main2") - 0.253879567', '(172,"Main2") - 0.253879567', '(189,"Main2") - 0.253879567', '(160,"Main2") - 0.253879567', '(163,"Main2") - 0.253879567', '(221,"Main2") - 0.253879567', '(168,"Main2") - 0.253879567', '(222,"Main2") - 0.253879567', '(169,"Main2") - 0.253879567', '(158,"Main2") - 0.253879567', '(167,"Main2") - 0.253879567', '(162,"Main2") - 0.253879567', '(161,"Main2") - 0.253879567', '(164,"Main2") - 0.253879567', '(152,"Main2") - 0.291528980', '(2,"Main2") - 0.291528980', '(3,"Main2") - 0.291528980', '(141,"Main2") - 0.291528980', '(25,"Main2") - 0.291528980', '(151,"Main2") - 0.291528980', '(22,"Main2") - 0.291528980', '(165,"Main2") - 0.291528980', '(19,"Main2") - 0.291528980', '(150,"Main2") - 0.291528980', '(154,"Main2") - 0.291528980', '(147,"Main2") - 0.291528980', '(26,"Main2") - 0.291528980', '(24,"Main2") - 0.291528980', '(156,"Main2") - 0.291528980', '(153,"Main2") - 0.291528980', '(142,"Main2") - 0.291528980', '(23,"Main2") - 0.291528980', '(21,"Main2") - 0.291528980', '(0,"Main2") - 0.291528980', '(138,"Main2") - 0.547550141', '(17,"Main2") - 0.547550141', '(219,"Main2") - 0.547550141', '(139,"Main2") - 0.547550141', '(20,"Main2") - 0.547550141', '(218,"Main2") - 0.547550141', '(146,"Main2") - 0.547550141', '(187,"Main2") - 0.547550141', '(145,"Main2") - 0.547550141', '(15,"Main2") - 0.547550141', '(217,"Main2") - 0.547550141', '(229,"Main2") - 0.547550141', '(186,"Main2") - 0.547550141', '(183,"Main2") - 0.547550141', '(144,"Main2") - 0.547550141', '(171,"Main2") - 0.547550141', '(18,"Main2") - 0.547550141', '(188,"Main2") - 0.547550141', '(16,"Main2") - 0.547550141', '(143,"Main2") - 0.547550141', '(220,"Main2") - 0.547550141', '(192,"Main2") - 0.547550141']
Red Rules #: 19787
SMT Solving time: 0.299965524
Gen Solving time: 0.307363959
SMT Solver calls: 94
General Solver calls: 288
# nrpcs = [0, 1, 1, 0, 0, 2, 19]
# post call args = 2
# func args = 5
# timeouts = 5
# branches = 39


Graph latex for: treejoin: 
\begin{tikzpicture}
\centering
\begin{axis}[
title={Baseline vs NRPC(treejoin)},
xlabel={Time (s)},
ylabel={No. of Ticks},
grid=major,
width=\columnwidth,
]
\addplot[color=blue,mark=*,smooth] plot coordinates {
(0.2, 12) (0.61, 41) (0.77, 3)};
\addlegendentry{Baseline}
\addplot[smooth,color=red,mark=x] plot coordinates {
(0.2, 12) (0.25, 18) (0.29, 20) (0.55, 22)
};
\addlegendentry{NRPC}
\end{axis}
\end{tikzpicture}


+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| Benchmark    |   #Total Ticks |   B HPC cov % |   B cov % |   B last time |   N HPC cov % |   N cov % |   N last time | Pos 1-sec B/N   | Pos 3-sec B/N   | Pos 5-sec B/N   | Diff tick 1s   | Diff tick 3s   | Diff tick 5s   |   Avg # Nrpcs |   # Branches |
+==============+================+===============+===========+===============+===============+===========+===============+=================+=================+=================+================+================+================+===============+==============+
| boyer        |           1017 |           1.6 |       2.5 |           0.3 |          37.6 |       2.5 |           0.3 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          2.68 |           45 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| boyer2       |            709 |           0   |       0   |           0   |           0   |       0   |           0   | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |          126 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| calendar     |            315 |           3.9 |       5.7 |           0.7 |          71.1 |      23.8 |           0.5 | 0/0             | 0/0             | 0/0             | 0/57           | 0/57           | 0/57           |          0.25 |           17 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| cichelli     |            436 |           0   |       0   |           0   |          86.7 |      28.9 |           0.9 | 0/0             | 0/0             | 0/0             | 0/126          | 0/126          | 0/126          |          1    |           50 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| circsim      |           1015 |           4   |       5.2 |           0.3 |           4   |       5.2 |           0.7 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |           66 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| clausify     |            369 |           2.2 |       2.7 |           0.8 |          24.7 |      13.8 |           0.8 | 0/0             | 0/0             | 0/0             | 0/41           | 0/41           | 0/41           |          0.33 |           68 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| constraints  |            604 |           0   |       0   |           0   |          53   |      49.2 |           0.8 | 0/0             | 0/0             | 0/0             | 0/296          | 0/296          | 0/296          |          1.06 |           53 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| cryptarithm1 |            102 |          42.6 |      46.1 |           0.3 |          42.6 |      46.1 |           0.3 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          1.38 |            7 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| cse          |            243 |          29.6 |      71.6 |           0.4 |          29.6 |      71.6 |           0.3 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          1    |           37 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| eliza        |            599 |           6.3 |       6.2 |           0.5 |           6.3 |       6.2 |           0.5 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |           28 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| expert       |            889 |           5.9 |       4.8 |           0.2 |           5.9 |       4.8 |           0.6 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |          138 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| gcd          |            123 |          72.7 |      83.7 |           0.4 |          82.6 |      91.1 |           0.7 | 0/0             | 0/0             | 0/0             | 0/9            | 0/9            | 0/9            |          2.08 |           13 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| integer      |            110 |           0   |       0   |           0   |          77.9 |      76.4 |           0.9 | 0/0             | 0/0             | 0/0             | 0/84           | 0/84           | 0/84           |          1.28 |            2 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| lcss         |            155 |           6.7 |       7.7 |           0.2 |          78.4 |      18.1 |           0.3 | 0/0             | 0/0             | 0/0             | 0/16           | 0/16           | 0/16           |          2.1  |           18 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| life         |            161 |          21.5 |      29.8 |           0.4 |          51.6 |      60.9 |           0.5 | 0/0             | 0/0             | 0/0             | 0/50           | 0/50           | 0/50           |          1.15 |           14 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| mandel2      |            445 |          70.5 |      69.7 |           0.7 |          70.5 |      69.7 |           0.8 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |           60 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| multiplier   |            736 |           0   |       0   |           0   |           0   |       0   |           0   | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |          113 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| power        |            278 |           7   |      10.1 |           0.3 |          60.6 |      49.6 |           1   | 0/0             | 0/0             | 0/0             | 0/110          | 0/110          | 0/110          |          0.6  |           43 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| primetest    |            470 |           4.5 |       5.3 |           0.9 |           4.5 |       5.3 |           0.9 | 0/0             | 0/0             | 0/0             | 0/0            | 0/0            | 0/0            |          0    |           58 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| scc          |            197 |           0   |       0   |           0   |          93   |      16.2 |           0.2 | 0/0             | 0/0             | 0/0             | 0/32           | 0/32           | 0/32           |          0.75 |           17 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| rewrite      |           1518 |           0.5 |       0.6 |           0.5 |          21   |      22.5 |           1   | 0/0             | 0/0             | 0/0             | 0/332          | 0/332          | 0/332          |          0.5  |          188 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| sphere       |           1119 |           1.4 |       1.6 |           0.2 |          61.6 |       6   |           0.3 | 0/0             | 0/0             | 0/0             | 0/49           | 0/49           | 0/49           |          0.88 |           72 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+
| treejoin     |            229 |          22   |      24.5 |           0.8 |          25.7 |      31.4 |           0.5 | 0/0             | 0/0             | 0/0             | 0/16           | 0/16           | 0/16           |          3.29 |           39 |
+--------------+----------------+---------------+-----------+---------------+---------------+-----------+---------------+-----------------+-----------------+-----------------+----------------+----------------+----------------+---------------+--------------+


Latex string for coverage table

\multicolumn{4}{l}{\textbf{imaginary}}\\ \hline 
bernouilli & 96 & 12.9 & \textbf{80.0} & 0.3 & 0.7\\ \hline 
digits-of-e1 & 118 & \textbf{75.2} & 74.3 & 0.4 & 0.9\\ \hline 
digits-of-e2 & 87 & \textbf{98.7} & 92.3 & 0.9 & 0.9\\ \hline 
exp3_8 & 55 & \textbf{89.4} & 38.3 & 1.0 & 0.6\\ \hline 
gen_regexps & 128 & 47.5 & 47.5 & 0.6 & 0.6\\ \hline 
integrate & 143 & 3.6 & \textbf{69.1} & 0.2 & 0.3\\ \hline 
paraffins & 264 & 38.5 & \textbf{71.2} & 0.9 & 1.0\\ \hline 
primes & 29 & 100.0 & 100.0 & 0.3 & 0.3\\ \hline 
queens & 95 & 28.1 & \textbf{73.0} & 0.9 & 1.0\\ \hline 
rfib & 25 & 95.2 & 95.2 & 0.9 & 0.8\\ \hline 
tak & 41 & \textbf{37.8} & 32.4 & 0.2 & 0.6\\ \hline 
wheel-sieve1 & 131 & \textbf{76.3} & 73.7 & 0.8 & 0.7\\ \hline 
wheel-sieve2 & 177 & \textbf{37.7} & 29.1 & 0.5 & 0.6\\ \hline 
x2n1 & 35 & 0.0 & 0.0 & 0.0 & 0.0\\ \hline 
\multicolumn{4}{l}{\textbf{spectral}}\\ \hline 
boyer & 1017 & 1.6 & \textbf{37.6} & 0.3 & 0.3\\ \hline 
boyer2 & 709 & 0.0 & 0.0 & 0.0 & 0.0\\ \hline 
calendar & 315 & 3.9 & \textbf{71.1} & 0.7 & 0.5\\ \hline 
cichelli & 436 & 0.0 & \textbf{86.7} & 0.0 & 0.9\\ \hline 
circsim & 1015 & 4.0 & 4.0 & 0.3 & 0.7\\ \hline 
clausify & 369 & 2.2 & \textbf{24.7} & 0.8 & 0.8\\ \hline 
constraints & 604 & 0.0 & \textbf{53.0} & 0.0 & 0.8\\ \hline 
cryptarithm1 & 102 & 42.6 & 42.6 & 0.3 & 0.3\\ \hline 
cse & 243 & 29.6 & 29.6 & 0.4 & 0.3\\ \hline 
eliza & 599 & 6.3 & 6.3 & 0.5 & 0.5\\ \hline 
expert & 889 & 5.9 & 5.9 & 0.2 & 0.6\\ \hline 
gcd & 123 & 72.7 & \textbf{82.6} & 0.4 & 0.7\\ \hline 
integer & 110 & 0.0 & \textbf{77.9} & 0.0 & 0.9\\ \hline 
lcss & 155 & 6.7 & \textbf{78.4} & 0.2 & 0.3\\ \hline 
life & 161 & 21.5 & \textbf{51.6} & 0.4 & 0.5\\ \hline 
mandel2 & 445 & 70.5 & 70.5 & 0.7 & 0.8\\ \hline 
multiplier & 736 & 0.0 & 0.0 & 0.0 & 0.0\\ \hline 
power & 278 & 7.0 & \textbf{60.6} & 0.3 & 1.0\\ \hline 
primetest & 470 & 4.5 & 4.5 & 0.9 & 0.9\\ \hline 
scc & 197 & 0.0 & \textbf{93.0} & 0.0 & 0.2\\ \hline 
rewrite & 1518 & 0.5 & \textbf{21.0} & 0.5 & 1.0\\ \hline 
sphere & 1119 & 1.4 & \textbf{61.6} & 0.2 & 0.3\\ \hline 
treejoin & 229 & 22.0 & \textbf{25.7} & 0.8 & 0.5\\ \hline 

Latex string for coverage table with Tick count at atleast 1second 

\multicolumn{4}{l}{\textbf{imaginary}}\\ \hline 
bernouilli & 96 & 12.9 & \textbf{80.0} & 0.3 & 0.7 & 0/61\\ \hline 
digits-of-e1 & 118 & \textbf{75.2} & 74.3 & 0.4 & 0.9 & 0/5\\ \hline 
digits-of-e2 & 87 & \textbf{98.7} & 92.3 & 0.9 & 0.9 & 5/0\\ \hline 
exp3_8 & 55 & \textbf{89.4} & 38.3 & 1.0 & 0.6 & 16/0\\ \hline 
gen_regexps & 128 & 47.5 & 47.5 & 0.6 & 0.6 & 0/0\\ \hline 
integrate & 143 & 3.6 & \textbf{69.1} & 0.2 & 0.3 & 0/56\\ \hline 
paraffins & 264 & 38.5 & \textbf{71.2} & 0.9 & 1.0 & 24/0\\ \hline 
primes & 29 & 100.0 & 100.0 & 0.3 & 0.3 & 0/0\\ \hline 
queens & 95 & 28.1 & \textbf{73.0} & 0.9 & 1.0 & 0/40\\ \hline 
rfib & 25 & 95.2 & 95.2 & 0.9 & 0.8 & 0/0\\ \hline 
tak & 41 & \textbf{37.8} & 32.4 & 0.2 & 0.6 & 0/17\\ \hline 
wheel-sieve1 & 131 & \textbf{76.3} & 73.7 & 0.8 & 0.7 & 0/2\\ \hline 
wheel-sieve2 & 177 & \textbf{37.7} & 29.1 & 0.5 & 0.6 & 0/73\\ \hline 
x2n1 & 35 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0\\ \hline 
\multicolumn{4}{l}{\textbf{spectral}}\\ \hline 
boyer & 1017 & 1.6 & \textbf{37.6} & 0.3 & 0.3 & 0/0\\ \hline 
boyer2 & 709 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0\\ \hline 
calendar & 315 & 3.9 & \textbf{71.1} & 0.7 & 0.5 & 0/57\\ \hline 
cichelli & 436 & 0.0 & \textbf{86.7} & 0.0 & 0.9 & 0/126\\ \hline 
circsim & 1015 & 4.0 & 4.0 & 0.3 & 0.7 & 0/0\\ \hline 
clausify & 369 & 2.2 & \textbf{24.7} & 0.8 & 0.8 & 0/41\\ \hline 
constraints & 604 & 0.0 & \textbf{53.0} & 0.0 & 0.8 & 0/296\\ \hline 
cryptarithm1 & 102 & 42.6 & 42.6 & 0.3 & 0.3 & 0/0\\ \hline 
cse & 243 & 29.6 & 29.6 & 0.4 & 0.3 & 0/0\\ \hline 
eliza & 599 & 6.3 & 6.3 & 0.5 & 0.5 & 0/0\\ \hline 
expert & 889 & 5.9 & 5.9 & 0.2 & 0.6 & 0/0\\ \hline 
gcd & 123 & 72.7 & \textbf{82.6} & 0.4 & 0.7 & 0/9\\ \hline 
integer & 110 & 0.0 & \textbf{77.9} & 0.0 & 0.9 & 0/84\\ \hline 
lcss & 155 & 6.7 & \textbf{78.4} & 0.2 & 0.3 & 0/16\\ \hline 
life & 161 & 21.5 & \textbf{51.6} & 0.4 & 0.5 & 0/50\\ \hline 
mandel2 & 445 & 70.5 & 70.5 & 0.7 & 0.8 & 0/0\\ \hline 
multiplier & 736 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0\\ \hline 
power & 278 & 7.0 & \textbf{60.6} & 0.3 & 1.0 & 0/110\\ \hline 
primetest & 470 & 4.5 & 4.5 & 0.9 & 0.9 & 0/0\\ \hline 
scc & 197 & 0.0 & \textbf{93.0} & 0.0 & 0.2 & 0/32\\ \hline 
rewrite & 1518 & 0.5 & \textbf{21.0} & 0.5 & 1.0 & 0/332\\ \hline 
sphere & 1119 & 1.4 & \textbf{61.6} & 0.2 & 0.3 & 0/49\\ \hline 
treejoin & 229 & 22.0 & \textbf{25.7} & 0.8 & 0.5 & 0/16\\ \hline 

Latex string for coverage table with Tick count at atleast 5second 

\multicolumn{4}{l}{\textbf{imaginary}}\\ \hline 
bernouilli & 96 & 12.9 & \textbf{80.0} & 0.3 & 0.7 & 0/61 & 0/61\\ \hline 
digits-of-e1 & 118 & \textbf{75.2} & 74.3 & 0.4 & 0.9 & 0/5 & 0/5\\ \hline 
digits-of-e2 & 87 & \textbf{98.7} & 92.3 & 0.9 & 0.9 & 5/0 & 5/0\\ \hline 
exp3_8 & 55 & \textbf{89.4} & 38.3 & 1.0 & 0.6 & 16/0 & 16/0\\ \hline 
gen_regexps & 128 & 47.5 & 47.5 & 0.6 & 0.6 & 0/0 & 0/0\\ \hline 
integrate & 143 & 3.6 & \textbf{69.1} & 0.2 & 0.3 & 0/56 & 0/56\\ \hline 
paraffins & 264 & 38.5 & \textbf{71.2} & 0.9 & 1.0 & 24/0 & 24/0\\ \hline 
primes & 29 & 100.0 & 100.0 & 0.3 & 0.3 & 0/0 & 0/0\\ \hline 
queens & 95 & 28.1 & \textbf{73.0} & 0.9 & 1.0 & 0/40 & 0/40\\ \hline 
rfib & 25 & 95.2 & 95.2 & 0.9 & 0.8 & 0/0 & 0/0\\ \hline 
tak & 41 & \textbf{37.8} & 32.4 & 0.2 & 0.6 & 0/17 & 0/17\\ \hline 
wheel-sieve1 & 131 & \textbf{76.3} & 73.7 & 0.8 & 0.7 & 0/2 & 0/2\\ \hline 
wheel-sieve2 & 177 & \textbf{37.7} & 29.1 & 0.5 & 0.6 & 0/73 & 0/73\\ \hline 
x2n1 & 35 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0 & 0/0\\ \hline 
\multicolumn{4}{l}{\textbf{spectral}}\\ \hline 
boyer & 1017 & 1.6 & \textbf{37.6} & 0.3 & 0.3 & 0/0 & 0/0\\ \hline 
boyer2 & 709 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0 & 0/0\\ \hline 
calendar & 315 & 3.9 & \textbf{71.1} & 0.7 & 0.5 & 0/57 & 0/57\\ \hline 
cichelli & 436 & 0.0 & \textbf{86.7} & 0.0 & 0.9 & 0/126 & 0/126\\ \hline 
circsim & 1015 & 4.0 & 4.0 & 0.3 & 0.7 & 0/0 & 0/0\\ \hline 
clausify & 369 & 2.2 & \textbf{24.7} & 0.8 & 0.8 & 0/41 & 0/41\\ \hline 
constraints & 604 & 0.0 & \textbf{53.0} & 0.0 & 0.8 & 0/296 & 0/296\\ \hline 
cryptarithm1 & 102 & 42.6 & 42.6 & 0.3 & 0.3 & 0/0 & 0/0\\ \hline 
cse & 243 & 29.6 & 29.6 & 0.4 & 0.3 & 0/0 & 0/0\\ \hline 
eliza & 599 & 6.3 & 6.3 & 0.5 & 0.5 & 0/0 & 0/0\\ \hline 
expert & 889 & 5.9 & 5.9 & 0.2 & 0.6 & 0/0 & 0/0\\ \hline 
gcd & 123 & 72.7 & \textbf{82.6} & 0.4 & 0.7 & 0/9 & 0/9\\ \hline 
integer & 110 & 0.0 & \textbf{77.9} & 0.0 & 0.9 & 0/84 & 0/84\\ \hline 
lcss & 155 & 6.7 & \textbf{78.4} & 0.2 & 0.3 & 0/16 & 0/16\\ \hline 
life & 161 & 21.5 & \textbf{51.6} & 0.4 & 0.5 & 0/50 & 0/50\\ \hline 
mandel2 & 445 & 70.5 & 70.5 & 0.7 & 0.8 & 0/0 & 0/0\\ \hline 
multiplier & 736 & 0.0 & 0.0 & 0.0 & 0.0 & 0/0 & 0/0\\ \hline 
power & 278 & 7.0 & \textbf{60.6} & 0.3 & 1.0 & 0/110 & 0/110\\ \hline 
primetest & 470 & 4.5 & 4.5 & 0.9 & 0.9 & 0/0 & 0/0\\ \hline 
scc & 197 & 0.0 & \textbf{93.0} & 0.0 & 0.2 & 0/32 & 0/32\\ \hline 
rewrite & 1518 & 0.5 & \textbf{21.0} & 0.5 & 1.0 & 0/332 & 0/332\\ \hline 
sphere & 1119 & 1.4 & \textbf{61.6} & 0.2 & 0.3 & 0/49 & 0/49\\ \hline 
treejoin & 229 & 22.0 & \textbf{25.7} & 0.8 & 0.5 & 0/16 & 0/16\\ \hline 


Latex string for table 2

\multicolumn{4}{l}{\textbf{imaginary}}\\ \hline 
bernouilli & 0/0 & 0/0 & 0/0\\ \hline 
digits-of-e1 & 0/0 & 0/0 & 0/0\\ \hline 
digits-of-e2 & 0/0 & 0/0 & 0/0\\ \hline 
exp3_8 & 0/0 & 0/0 & 0/0\\ \hline 
gen_regexps & 0/0 & 0/0 & 0/0\\ \hline 
integrate & 0/0 & 0/0 & 0/0\\ \hline 
paraffins & 0/0 & 0/0 & 0/0\\ \hline 
primes & 0/0 & 0/0 & 0/0\\ \hline 
queens & 0/0 & 0/0 & 0/0\\ \hline 
rfib & 0/0 & 0/0 & 0/0\\ \hline 
tak & 0/0 & 0/0 & 0/0\\ \hline 
wheel-sieve1 & 0/0 & 0/0 & 0/0\\ \hline 
wheel-sieve2 & 0/0 & 0/0 & 0/0\\ \hline 
x2n1 & 0/0 & 0/0 & 0/0\\ \hline 
\multicolumn{4}{l}{\textbf{spectral}}\\ \hline 
boyer & 0/0 & 0/0 & 0/0\\ \hline 
boyer2 & 0/0 & 0/0 & 0/0\\ \hline 
calendar & 0/0 & 0/0 & 0/0\\ \hline 
cichelli & 0/0 & 0/0 & 0/0\\ \hline 
circsim & 0/0 & 0/0 & 0/0\\ \hline 
clausify & 0/0 & 0/0 & 0/0\\ \hline 
constraints & 0/0 & 0/0 & 0/0\\ \hline 
cryptarithm1 & 0/0 & 0/0 & 0/0\\ \hline 
cse & 0/0 & 0/0 & 0/0\\ \hline 
eliza & 0/0 & 0/0 & 0/0\\ \hline 
expert & 0/0 & 0/0 & 0/0\\ \hline 
gcd & 0/0 & 0/0 & 0/0\\ \hline 
integer & 0/0 & 0/0 & 0/0\\ \hline 
lcss & 0/0 & 0/0 & 0/0\\ \hline 
life & 0/0 & 0/0 & 0/0\\ \hline 
mandel2 & 0/0 & 0/0 & 0/0\\ \hline 
multiplier & 0/0 & 0/0 & 0/0\\ \hline 
power & 0/0 & 0/0 & 0/0\\ \hline 
primetest & 0/0 & 0/0 & 0/0\\ \hline 
scc & 0/0 & 0/0 & 0/0\\ \hline 
rewrite & 0/0 & 0/0 & 0/0\\ \hline 
sphere & 0/0 & 0/0 & 0/0\\ \hline 
treejoin & 0/0 & 0/0 & 0/0\\ \hline 


Latex string for table 3

\multicolumn{4}{l}{\textbf{imaginary}}\\ \hline 
bernouilli & 0/61 & 0/61 & 0/61\\ \hline 
digits-of-e1 & 0/5 & 0/5 & 0/5\\ \hline 
digits-of-e2 & 5/0 & 5/0 & 5/0\\ \hline 
exp3_8 & 16/0 & 16/0 & 16/0\\ \hline 
gen_regexps & 0/0 & 0/0 & 0/0\\ \hline 
integrate & 0/56 & 0/56 & 0/56\\ \hline 
paraffins & 24/0 & 24/0 & 24/0\\ \hline 
primes & 0/0 & 0/0 & 0/0\\ \hline 
queens & 0/40 & 0/40 & 0/40\\ \hline 
rfib & 0/0 & 0/0 & 0/0\\ \hline 
tak & 0/17 & 0/17 & 0/17\\ \hline 
wheel-sieve1 & 0/2 & 0/2 & 0/2\\ \hline 
wheel-sieve2 & 0/73 & 0/73 & 0/73\\ \hline 
x2n1 & 0/0 & 0/0 & 0/0\\ \hline 
\multicolumn{4}{l}{\textbf{spectral}}\\ \hline 
boyer & 0/0 & 0/0 & 0/0\\ \hline 
boyer2 & 0/0 & 0/0 & 0/0\\ \hline 
calendar & 0/57 & 0/57 & 0/57\\ \hline 
cichelli & 0/126 & 0/126 & 0/126\\ \hline 
circsim & 0/0 & 0/0 & 0/0\\ \hline 
clausify & 0/41 & 0/41 & 0/41\\ \hline 
constraints & 0/296 & 0/296 & 0/296\\ \hline 
cryptarithm1 & 0/0 & 0/0 & 0/0\\ \hline 
cse & 0/0 & 0/0 & 0/0\\ \hline 
eliza & 0/0 & 0/0 & 0/0\\ \hline 
expert & 0/0 & 0/0 & 0/0\\ \hline 
gcd & 0/9 & 0/9 & 0/9\\ \hline 
integer & 0/84 & 0/84 & 0/84\\ \hline 
lcss & 0/16 & 0/16 & 0/16\\ \hline 
life & 0/50 & 0/50 & 0/50\\ \hline 
mandel2 & 0/0 & 0/0 & 0/0\\ \hline 
multiplier & 0/0 & 0/0 & 0/0\\ \hline 
power & 0/110 & 0/110 & 0/110\\ \hline 
primetest & 0/0 & 0/0 & 0/0\\ \hline 
scc & 0/32 & 0/32 & 0/32\\ \hline 
rewrite & 0/332 & 0/332 & 0/332\\ \hline 
sphere & 0/49 & 0/49 & 0/49\\ \hline 
treejoin & 0/16 & 0/16 & 0/16\\ \hline 

Total NRPC post call states = 124
Total NRPC func arg states = 336
Total NRPC timeouts = 73
Total programs with timeout = 11
